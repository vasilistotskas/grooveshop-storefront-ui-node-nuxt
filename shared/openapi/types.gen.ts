// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};

/**
 * * `subscribe` - subscribe
 * * `unsubscribe` - unsubscribe
 */
export type ActionEnum = 'subscribe' | 'unsubscribe';

export type AddTrackingRequest = {
    trackingNumber: string;
    shippingCarrier: string;
};

export type BlankEnum = '';

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogAuthor = {
    translations: {
        el?: {
            bio?: string;
        };
        en?: {
            bio?: string;
        };
        de?: {
            bio?: string;
        };
    };
    readonly id: number;
    readonly uuid: string;
    user: number;
    /**
     * URL link or empty string
     */
    readonly website: string | null;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly numberOfPosts: number;
    totalLikesReceived: number | 0;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogAuthorDetail = {
    translations: {
        el?: {
            bio?: string;
        };
        en?: {
            bio?: string;
        };
        de?: {
            bio?: string;
        };
    };
    readonly id: number;
    readonly uuid: string;
    user: UserDetails;
    /**
     * URL link or empty string
     */
    readonly website: string | null;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly numberOfPosts: number;
    totalLikesReceived: number | 0;
    readonly recentPosts: Array<BlogPost>;
    readonly topPosts: Array<BlogPost>;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogAuthorWriteRequest = {
    translations: {
        el?: {
            bio?: string;
        };
        en?: {
            bio?: string;
        };
        de?: {
            bio?: string;
        };
    };
    user: number;
    website?: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogCategory = {
    readonly id: number;
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    slug: string;
    parent?: number | null;
    readonly level: number;
    readonly sortOrder: number | null;
    readonly postCount: number;
    readonly hasChildren: boolean;
    readonly mainImagePath: string;
    readonly createdAt: string;
    readonly updatedAt: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogCategoryDetail = {
    readonly id: number;
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    slug: string;
    parent?: number | null;
    readonly level: number;
    readonly sortOrder: number | null;
    readonly postCount: number;
    readonly hasChildren: boolean;
    readonly mainImagePath: string;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly children: Array<BlogCategory>;
    readonly ancestors: Array<BlogCategory>;
    readonly siblingsCount: number;
    readonly descendantsCount: number;
    readonly recursivePostCount: number;
    readonly categoryPath: string;
    readonly treeId: number;
    readonly uuid: string;
};

export type BlogCategoryReorderItemRequest = {
    /**
     * Category ID
     */
    id: number;
    /**
     * New sort order value
     */
    sortOrder: number;
};

export type BlogCategoryReorderRequestRequest = {
    /**
     * List of categories with new sort orders
     */
    categories: Array<BlogCategoryReorderItemRequest>;
};

export type BlogCategoryReorderResponse = {
    /**
     * Number of categories updated
     */
    updatedCount: number;
    /**
     * Success message
     */
    message: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogCategoryWriteRequest = {
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    slug: string;
    parent?: number | null;
    /**
     * Εικόνα
     */
    image?: Blob | File | null;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogComment = {
    readonly id: number;
    translations: {
        el?: {
            content?: string;
        };
        en?: {
            content?: string;
        };
        de?: {
            content?: string;
        };
    };
    user: UserDetails;
    /**
     * First 150 characters of the comment content
     */
    readonly contentPreview: string | null;
    /**
     * Whether this comment is a reply to another comment
     */
    readonly isReply: boolean;
    readonly parent: number | null;
    /**
     * Whether this comment has approved replies
     */
    readonly hasReplies: boolean;
    readonly approved: boolean;
    /**
     * Whether this comment has been edited
     */
    readonly isEdited: boolean;
    readonly likesCount: number;
    readonly repliesCount: number;
    /**
     * Whether the current user has liked this comment
     */
    readonly userHasLiked: boolean;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogCommentDetail = {
    readonly id: number;
    translations: {
        el?: {
            content?: string;
        };
        en?: {
            content?: string;
        };
        de?: {
            content?: string;
        };
    };
    user: UserDetails;
    /**
     * First 150 characters of the comment content
     */
    readonly contentPreview: string | null;
    /**
     * Whether this comment is a reply to another comment
     */
    readonly isReply: boolean;
    readonly parent: number | null;
    /**
     * Whether this comment has approved replies
     */
    readonly hasReplies: boolean;
    readonly approved: boolean;
    /**
     * Whether this comment has been edited
     */
    readonly isEdited: boolean;
    readonly likesCount: number;
    readonly repliesCount: number;
    /**
     * Whether the current user has liked this comment
     */
    readonly userHasLiked: boolean;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
    /**
     * Basic information about the blog post
     */
    post: BlogPost;
    /**
     * Parent comment if this is a reply
     */
    readonly parentComment: {
        id: number;
        contentPreview: string;
        user: UserDetails;
        createdAt: string;
    } | null;
    /**
     * Direct approved child comments (replies)
     */
    readonly childrenComments: Array<BlogComment>;
    /**
     * Path from root comment to this comment
     */
    readonly ancestorsPath: Array<{
        id: number;
        contentPreview: string;
        user: UserDetails;
    }>;
    /**
     * Position information in the comment tree
     */
    readonly treePosition: {
        level: number;
        treeId: number;
        approvedDescendantsCount: number;
        siblingsCount: number;
    };
};

export type BlogCommentLikedCommentsRequestRequest = {
    /**
     * List of comment IDs to check like status for
     */
    commentIds: Array<number>;
};

export type BlogCommentLikedCommentsResponse = {
    /**
     * List of comment IDs that are liked by the current user
     */
    likedCommentIds: Array<number>;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogCommentWriteRequest = {
    translations: {
        el?: {
            content?: string;
        };
        en?: {
            content?: string;
        };
        de?: {
            content?: string;
        };
    };
    user?: number;
    post: number;
    parent?: number | null;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogPost = {
    readonly id: number;
    readonly uuid: string;
    slug: string;
    likes: Array<number>;
    translations: {
        el?: {
            title?: string;
            subtitle?: string;
            body?: string;
        };
        en?: {
            title?: string;
            subtitle?: string;
            body?: string;
        };
        de?: {
            title?: string;
            subtitle?: string;
            body?: string;
        };
    };
    author: number;
    category: number;
    tags: Array<number>;
    featured?: boolean;
    readonly viewCount: number;
    readonly likesCount: number;
    readonly commentsCount: number;
    readonly tagsCount: number;
    isPublished?: boolean;
    readonly publishedAt: string | null;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly mainImagePath: string;
    readonly readingTime: number;
    readonly contentPreview: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogPostDetail = {
    readonly id: number;
    readonly uuid: string;
    slug: string;
    readonly likes: Array<number>;
    translations: {
        el?: {
            title?: string;
            subtitle?: string;
            body?: string;
        };
        en?: {
            title?: string;
            subtitle?: string;
            body?: string;
        };
        de?: {
            title?: string;
            subtitle?: string;
            body?: string;
        };
    };
    author: BlogAuthorDetail;
    category: BlogCategoryDetail;
    readonly tags: Array<BlogTagDetail>;
    featured?: boolean;
    readonly viewCount: number;
    readonly likesCount: number;
    readonly commentsCount: number;
    readonly tagsCount: number;
    isPublished?: boolean;
    readonly publishedAt: string | null;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly mainImagePath: string;
    readonly readingTime: number;
    readonly contentPreview: string;
    readonly userHasLiked: boolean;
    seoTitle?: string;
    seoDescription?: string;
    seoKeywords?: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogPostDetailRequest = {
    slug: string;
    translations: {
        el?: {
            title?: string;
            subtitle?: string;
            body?: string;
        };
        en?: {
            title?: string;
            subtitle?: string;
            body?: string;
        };
        de?: {
            title?: string;
            subtitle?: string;
            body?: string;
        };
    };
    featured?: boolean;
    isPublished?: boolean;
    seoTitle?: string;
    seoDescription?: string;
    seoKeywords?: string;
};

export type BlogPostLikedPostsRequestRequest = {
    /**
     * List of post IDs to check for likes
     */
    postIds: Array<number>;
};

export type BlogPostLikedPostsResponse = {
    /**
     * List of liked post IDs
     */
    postIds: Array<number>;
};

export type BlogPostMeiliSearchResponse = {
    limit: number;
    offset: number;
    estimatedTotalHits: number;
    results: Array<BlogPostMeiliSearchResult>;
};

export type BlogPostMeiliSearchResult = {
    id: number;
    languageCode: string;
    title: string;
    subtitle: string;
    body: string;
    master: number;
    slug: string;
    mainImagePath: string;
    matchesPosition: unknown;
    rankingScore: number | null;
    formatted: unknown;
    contentType: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogPostWriteRequest = {
    translations: {
        el?: {
            title?: string;
            subtitle?: string;
            body?: string;
        };
        en?: {
            title?: string;
            subtitle?: string;
            body?: string;
        };
        de?: {
            title?: string;
            subtitle?: string;
            body?: string;
        };
    };
    slug: string;
    category: number;
    tags?: Array<number>;
    author: number;
    featured?: boolean;
    isPublished?: boolean;
    seoTitle?: string;
    seoDescription?: string;
    seoKeywords?: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogTag = {
    readonly id: number;
    translations: {
        el?: {
            name?: string;
        };
        en?: {
            name?: string;
        };
        de?: {
            name?: string;
        };
    };
    active?: boolean;
    readonly sortOrder: number | null;
    /**
     * Number of blog posts using this tag
     */
    readonly postsCount: string;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogTagDetail = {
    readonly id: number;
    translations: {
        el?: {
            name?: string;
        };
        en?: {
            name?: string;
        };
        de?: {
            name?: string;
        };
    };
    active?: boolean;
    readonly sortOrder: number | null;
    /**
     * Number of blog posts using this tag
     */
    readonly postsCount: string;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogTagWriteRequest = {
    translations: {
        el?: {
            name?: string;
        };
        en?: {
            name?: string;
        };
        de?: {
            name?: string;
        };
    };
    active?: boolean;
};

export type BulkSubscriptionRequest = {
    /**
     * List of topic IDs to subscribe/unsubscribe
     */
    topicIds: Array<number>;
    /**
     * Action to perform on the topics
     *
     * * `subscribe` - subscribe
     * * `unsubscribe` - unsubscribe
     */
    action: ActionEnum;
};

export type CancelOrderRequestRequest = {
    /**
     * Reason for canceling the order
     */
    reason?: string;
    /**
     * Whether to automatically refund the payment if the order is paid
     */
    refundPayment?: boolean;
};

export type Cart = {
    readonly id: number;
    user?: number | null;
    /**
     * Session key for guest users
     */
    sessionKey?: string;
    readonly uuid: string;
    readonly items: Array<CartItem>;
    readonly totalPrice: number;
    readonly totalDiscountValue: number;
    readonly totalVatValue: number;
    totalItems: number | 0;
    readonly totalItemsUnique: number;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly lastActivity: string;
};

export type CartDetail = {
    readonly id: number;
    user?: number | null;
    /**
     * Session key for guest users
     */
    sessionKey?: string;
    readonly uuid: string;
    readonly items: Array<CartItem>;
    readonly totalPrice: number;
    readonly totalDiscountValue: number;
    readonly totalVatValue: number;
    totalItems: number | 0;
    readonly totalItemsUnique: number;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly lastActivity: string;
    /**
     * Product recommendations based on cart contents
     */
    readonly recommendations: Array<Product>;
};

export type CartItem = {
    readonly id: number;
    readonly cartId: number;
    product: Product;
    quantity?: number;
    /**
     * Weight information for shipping calculations
     */
    readonly weightInfo: {
        unitWeight: number;
        totalWeight: number;
        weightUnit: string;
    };
    readonly price: number;
    readonly finalPrice: number;
    readonly discountValue: number;
    readonly priceSavePercent: number;
    readonly discountPercent: number;
    readonly vatPercent: number;
    readonly vatValue: number;
    readonly totalPrice: number;
    readonly totalDiscountValue: number;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
};

export type CartItemCreateRequest = {
    product: number;
    quantity?: number;
};

export type CartItemDetail = {
    readonly id: number;
    readonly cartId: number;
    product: Product;
    quantity?: number;
    /**
     * Weight information for shipping calculations
     */
    readonly weightInfo: {
        unitWeight: number;
        totalWeight: number;
        weightUnit: string;
    };
    readonly price: number;
    readonly finalPrice: number;
    readonly discountValue: number;
    readonly priceSavePercent: number;
    readonly discountPercent: number;
    readonly vatPercent: number;
    readonly vatValue: number;
    readonly totalPrice: number;
    readonly totalDiscountValue: number;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
    /**
     * Related products that might interest the customer
     */
    readonly recommendations: Array<Product>;
};

export type CartItemUpdateRequest = {
    quantity?: number;
};

export type CartWriteRequest = {
    user?: number | null;
    /**
     * Session key for guest users
     */
    sessionKey?: string;
};

/**
 * * `MARKETING` - Marketing Campaigns
 * * `PRODUCT` - Product Updates
 * * `ACCOUNT` - Account Updates
 * * `SYSTEM` - System Notifications
 * * `NEWSLETTER` - Newsletter
 * * `PROMOTIONAL` - Promotional
 * * `OTHER` - Other
 */
export type CategoryEnum = 'MARKETING' | 'PRODUCT' | 'ACCOUNT' | 'SYSTEM' | 'NEWSLETTER' | 'PROMOTIONAL' | 'OTHER';

export type ContactWrite = {
    readonly id: number;
    name: string;
    email: string;
    message: string;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
};

export type ContactWriteRequest = {
    name: string;
    email: string;
    message: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type Country = {
    translations: {
        el?: {
            name?: string;
        };
        en?: {
            name?: string;
        };
        de?: {
            name?: string;
        };
    };
    /**
     * Country Code Alpha 2
     */
    alpha2: string;
    /**
     * Country Code Alpha 3
     */
    alpha3: string;
    /**
     * ISO Country Code
     */
    isoCc?: number | null;
    phoneCode?: number | null;
    readonly sortOrder: number | null;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
    readonly mainImagePath: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type CountryDetail = {
    translations: {
        el?: {
            name?: string;
        };
        en?: {
            name?: string;
        };
        de?: {
            name?: string;
        };
    };
    /**
     * Country Code Alpha 2
     */
    alpha2: string;
    /**
     * Country Code Alpha 3
     */
    alpha3: string;
    /**
     * ISO Country Code
     */
    isoCc?: number | null;
    phoneCode?: number | null;
    readonly sortOrder: number | null;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
    readonly mainImagePath: string;
    readonly regions: Array<string>;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type CountryWriteRequest = {
    translations: {
        el?: {
            name?: string;
        };
        en?: {
            name?: string;
        };
        de?: {
            name?: string;
        };
    };
    /**
     * Country Code Alpha 2
     */
    alpha2: string;
    /**
     * Country Code Alpha 3
     */
    alpha3: string;
    /**
     * ISO Country Code
     */
    isoCc?: number | null;
    phoneCode?: number | null;
};

export type CreateCheckoutSessionRequestRequest = {
    successUrl: string;
    cancelUrl: string;
    customerEmail?: string;
    customerId?: string;
    description?: string;
};

export type CreateCheckoutSessionResponse = {
    sessionId: string;
    checkoutUrl: string;
    status: string;
    amount: string;
    currency: string;
    provider: string;
};

export type CreatePaymentIntentRequestRequest = {
    /**
     * Additional payment data required by the payment provider
     */
    paymentData?: {
        [key: string]: unknown;
    };
};

export type CreatePaymentIntentResponse = {
    /**
     * Payment intent ID from the payment provider
     */
    paymentId: string;
    /**
     * Payment status
     */
    status: string;
    /**
     * Payment amount
     */
    amount: string;
    /**
     * Payment currency
     */
    currency: string;
    /**
     * Payment provider name
     */
    provider: string;
    /**
     * Stripe PaymentIntent client secret for frontend confirmation
     */
    clientSecret?: string;
    /**
     * Whether the payment requires additional action (3D Secure, etc.)
     */
    requiresAction?: boolean;
    /**
     * Next action required for payment completion
     */
    nextAction?: {
        [key: string]: unknown;
    } | null;
};

export type DetailRequest = {
    detail: string;
};

/**
 * * `RECEIPT` - Receipt
 * * `INVOICE` - Invoice
 * * `PROFORMA` - Proforma Invoice
 * * `SHIPPING_LABEL` - Shipping Label
 * * `RETURN_LABEL` - Return Label
 * * `CREDIT_NOTE` - Credit Note
 */
export type DocumentTypeEnum = 'RECEIPT' | 'INVOICE' | 'PROFORMA' | 'SHIPPING_LABEL' | 'RETURN_LABEL' | 'CREDIT_NOTE';

export type ErrorResponse = {
    detail: string;
    error?: string;
};

/**
 * * `BASEMENT` - Basement
 * * `GROUND_FLOOR` - Ground Floor
 * * `FIRST_FLOOR` - First Floor
 * * `SECOND_FLOOR` - Second Floor
 * * `THIRD_FLOOR` - Third Floor
 * * `FOURTH_FLOOR` - Fourth Floor
 * * `FIFTH_FLOOR` - Fifth Floor
 * * `SIXTH_FLOOR_PLUS` - Sixth Floor Plus
 */
export type FloorEnum = 'BASEMENT' | 'GROUND_FLOOR' | 'FIRST_FLOOR' | 'SECOND_FLOOR' | 'THIRD_FLOOR' | 'FOURTH_FLOOR' | 'FIFTH_FLOOR' | 'SIXTH_FLOOR_PLUS';

export type HealthCheckResponse = {
    database: boolean;
    redis: boolean;
    celery: boolean;
};

/**
 * * `MAIN` - Main Image
 * * `BANNER` - Banner Image
 * * `ICON` - Icon Image
 * * `THUMBNAIL` - Thumbnail Image
 * * `GALLERY` - Gallery Image
 * * `BACKGROUND` - Background Image
 * * `HERO` - Hero Image
 * * `FEATURE` - Feature Image
 * * `PROMOTIONAL` - Promotional Image
 * * `SEASONAL` - Seasonal Image
 */
export type ImageTypeEnum = 'MAIN' | 'BANNER' | 'ICON' | 'THUMBNAIL' | 'GALLERY' | 'BACKGROUND' | 'HERO' | 'FEATURE' | 'PROMOTIONAL' | 'SEASONAL';

/**
 * * `ERROR` - Error
 * * `SUCCESS` - Success
 * * `INFO` - Info
 * * `WARNING` - Warning
 * * `DANGER` - Danger
 */
export type KindEnum = 'ERROR' | 'SUCCESS' | 'INFO' | 'WARNING' | 'DANGER';

/**
 * * `HOME` - Αρχική
 * * `OFFICE` - Office
 * * `OTHER` - Other
 */
export type LocationTypeEnum = 'HOME' | 'OFFICE' | 'OTHER';

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type Notification = {
    translations: {
        el?: {
            title?: string;
            message?: string;
        };
        en?: {
            title?: string;
            message?: string;
        };
        de?: {
            title?: string;
            message?: string;
        };
    };
    readonly id: number;
    /**
     * URL link or empty string
     */
    readonly link: string | null;
    kind?: KindEnum;
    expiryDate?: string | null;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
};

export type NotificationCountResponse = {
    /**
     * Number of unseen notifications
     */
    count: number;
};

export type NotificationIdsRequest = {
    ids: Array<number>;
};

export type NotificationSuccessResponse = {
    /**
     * Whether the operation was successful
     */
    success?: boolean;
};

export type NotificationSuccessResponseRequest = {
    /**
     * Whether the operation was successful
     */
    success?: boolean;
};

export type NotificationUser = {
    readonly id: number;
    user: number;
    notification: number;
    seen?: boolean;
    seenAt?: string | null;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
};

export type NotificationUserActionRequest = {
    /**
     * List of notification user IDs to mark as seen/unseen
     */
    notificationUserIds: Array<number>;
};

export type NotificationUserDetail = {
    readonly id: number;
    user: UserDetails;
    notification: Notification;
    seen?: boolean;
    seenAt?: string | null;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
};

export type NotificationUserWriteRequest = {
    user: number;
    notification: number;
    seen?: boolean;
};

export type Order = {
    readonly id: number;
    user?: number | null;
    /**
     * Country Code Alpha 2
     */
    country: string;
    /**
     * Region Code
     */
    region: string;
    floor?: FloorEnum | BlankEnum;
    locationType?: LocationTypeEnum | BlankEnum;
    street: string;
    streetNumber: string;
    payWay: number;
    status?: OrderStatus;
    readonly statusDisplay: string;
    readonly statusUpdatedAt: string | null;
    firstName: string;
    lastName: string;
    email: string;
    zipcode: string;
    place?: string;
    city: string;
    phone: string;
    mobilePhone?: string;
    customerNotes?: string;
    readonly paidAmount: number;
    items: Array<OrderItemDetail>;
    readonly shippingPrice: number;
    documentType?: DocumentTypeEnum;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
    readonly totalPriceItems: number;
    readonly totalPriceExtra: number;
    readonly fullAddress: string;
    paymentId?: string;
    paymentStatus?: PaymentStatusEnum | BlankEnum;
    paymentMethod?: string;
    readonly canBeCanceled: boolean;
    readonly isPaid: boolean;
};

export type OrderDetail = {
    readonly id: number;
    user?: number | null;
    /**
     * Country Code Alpha 2
     */
    country: string;
    /**
     * Region Code
     */
    region: string;
    floor?: FloorEnum | BlankEnum;
    locationType?: LocationTypeEnum | BlankEnum;
    street: string;
    streetNumber: string;
    payWay: number;
    status?: OrderStatus;
    readonly statusDisplay: string;
    readonly statusUpdatedAt: string | null;
    firstName: string;
    lastName: string;
    email: string;
    zipcode: string;
    place?: string;
    city: string;
    readonly phone: string;
    readonly mobilePhone: string;
    customerNotes?: string;
    readonly paidAmount: number;
    items: Array<OrderItemDetail>;
    readonly shippingPrice: number;
    documentType?: DocumentTypeEnum;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
    readonly totalPriceItems: number;
    readonly totalPriceExtra: number;
    readonly fullAddress: string;
    paymentId?: string;
    paymentStatus?: PaymentStatusEnum | BlankEnum;
    paymentMethod?: string;
    readonly canBeCanceled: boolean;
    readonly isPaid: boolean;
    /**
     * Order status timeline and history
     */
    readonly orderTimeline: Array<{
        changeType?: string;
        timestamp?: string;
        description?: string;
        user?: string | null;
    }>;
    /**
     * Detailed pricing breakdown
     */
    readonly pricingBreakdown: {
        itemsSubtotal?: number;
        shippingCost?: number;
        extrasTotal?: number;
        grandTotal?: number;
        currency?: string;
        paidAmount?: number;
        remainingAmount?: number;
    };
    /**
     * Tracking and shipping details
     */
    readonly trackingDetails: {
        trackingNumber?: string | null;
        shippingCarrier?: string | null;
        hasTracking?: boolean;
        estimatedDelivery?: string | null;
        trackingUrl?: string | null;
    } | null;
    trackingNumber?: string;
    shippingCarrier?: string;
    readonly customerFullName: string;
    readonly isCompleted: boolean;
    readonly isCanceled: boolean;
};

export type OrderItem = {
    readonly id: number;
    readonly uuid: string;
    order: number;
    product: number;
    readonly price: number;
    quantity?: number;
    readonly isRefunded: boolean;
    readonly refundedQuantity: number;
    readonly netQuantity: number;
    readonly totalPrice: number;
    readonly createdAt: string;
    readonly updatedAt: string;
};

export type OrderItemCreateRequest = {
    product: number;
    quantity?: number;
    notes?: string;
};

export type OrderItemDetail = {
    readonly id: number;
    readonly uuid: string;
    order: number;
    product: Product;
    readonly price: number;
    quantity?: number;
    readonly isRefunded: boolean;
    readonly refundedQuantity: number;
    readonly netQuantity: number;
    readonly totalPrice: number;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly originalQuantity: number | null;
    readonly refundedAmount: number;
    readonly netPrice: number;
    readonly sortOrder: number | null;
    notes?: string;
};

export type OrderItemRefundRequest = {
    /**
     * Quantity to refund. If not provided, refunds all.
     */
    quantity?: number;
    /**
     * Optional reason for the refund
     */
    reason?: string;
};

export type OrderItemRefundResponse = {
    detail: string;
    refundedAmount: number;
    item: OrderItem;
};

export type OrderItemWriteRequest = {
    order: number;
    product: number;
    quantity?: number;
    notes?: string;
};

/**
 * * `PENDING` - Pending
 * * `PROCESSING` - Processing
 * * `SHIPPED` - Shipped
 * * `DELIVERED` - Delivered
 * * `COMPLETED` - Completed
 * * `CANCELED` - Canceled
 * * `RETURNED` - Returned
 * * `REFUNDED` - Refunded
 */
export type OrderStatus = 'PENDING' | 'PROCESSING' | 'SHIPPED' | 'DELIVERED' | 'COMPLETED' | 'CANCELED' | 'RETURNED' | 'REFUNDED';

export type OrderWriteRequest = {
    user?: number | null;
    /**
     * Country Code Alpha 2
     */
    country?: string | null;
    /**
     * Region Code
     */
    region?: string | null;
    floor?: FloorEnum | BlankEnum;
    locationType?: LocationTypeEnum | BlankEnum;
    street: string;
    streetNumber: string;
    payWay?: number | null;
    status?: OrderStatus;
    firstName: string;
    lastName: string;
    email: string;
    zipcode: string;
    place?: string;
    city: string;
    phone: string;
    mobilePhone?: string;
    paidAmount?: number;
    customerNotes?: string;
    items: Array<OrderItemCreateRequest>;
    shippingPrice: number;
    documentType?: DocumentTypeEnum;
    paymentId?: string;
    paymentStatus?: string;
    paymentMethod?: string;
    trackingNumber?: string;
    shippingCarrier?: string;
};

export type PaginatedBlogAuthorList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<BlogAuthor>;
};

export type PaginatedBlogCategoryList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<BlogCategory>;
};

export type PaginatedBlogCommentList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<BlogComment>;
};

export type PaginatedBlogPostList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<BlogPost>;
};

export type PaginatedBlogTagList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<BlogTag>;
};

export type PaginatedCartItemList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<CartItem>;
};

export type PaginatedCartList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<Cart>;
};

export type PaginatedCountryList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<Country>;
};

export type PaginatedNotificationUserList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<NotificationUser>;
};

export type PaginatedOrderItemList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<OrderItem>;
};

export type PaginatedOrderList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<Order>;
};

export type PaginatedPayWayList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<PayWay>;
};

export type PaginatedProductCategoryImageList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<ProductCategoryImage>;
};

export type PaginatedProductCategoryList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<ProductCategory>;
};

export type PaginatedProductFavouriteList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<ProductFavourite>;
};

export type PaginatedProductImageList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<ProductImage>;
};

export type PaginatedProductList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<Product>;
};

export type PaginatedProductReviewList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<ProductReview>;
};

export type PaginatedRegionList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<Region>;
};

export type PaginatedSubscriptionTopicList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<SubscriptionTopic>;
};

export type PaginatedTagList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<Tag>;
};

export type PaginatedTaggedItemList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<TaggedItem>;
};

export type PaginatedUserAddressList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<UserAddress>;
};

export type PaginatedUserDetailsList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<UserDetails>;
};

export type PaginatedUserSubscriptionList = {
    links?: {
        next?: string | null;
        previous?: string | null;
    };
    count: number;
    totalPages?: number;
    pageSize?: number;
    pageTotalResults?: number;
    page?: number;
    results: Array<UserSubscription>;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type PatchedBlogAuthorWriteRequest = {
    translations?: {
        el?: {
            bio?: string;
        };
        en?: {
            bio?: string;
        };
        de?: {
            bio?: string;
        };
    };
    user?: number;
    website?: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type PatchedBlogCategoryWriteRequest = {
    translations?: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    slug?: string;
    parent?: number | null;
    /**
     * Εικόνα
     */
    image?: Blob | File | null;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type PatchedBlogCommentWriteRequest = {
    translations?: {
        el?: {
            content?: string;
        };
        en?: {
            content?: string;
        };
        de?: {
            content?: string;
        };
    };
    user?: number;
    post?: number;
    parent?: number | null;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type PatchedBlogPostWriteRequest = {
    translations?: {
        el?: {
            title?: string;
            subtitle?: string;
            body?: string;
        };
        en?: {
            title?: string;
            subtitle?: string;
            body?: string;
        };
        de?: {
            title?: string;
            subtitle?: string;
            body?: string;
        };
    };
    slug?: string;
    category?: number;
    tags?: Array<number>;
    author?: number;
    featured?: boolean;
    isPublished?: boolean;
    seoTitle?: string;
    seoDescription?: string;
    seoKeywords?: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type PatchedBlogTagWriteRequest = {
    translations?: {
        el?: {
            name?: string;
        };
        en?: {
            name?: string;
        };
        de?: {
            name?: string;
        };
    };
    active?: boolean;
};

export type PatchedCartItemUpdateRequest = {
    quantity?: number;
};

export type PatchedCartWriteRequest = {
    user?: number | null;
    /**
     * Session key for guest users
     */
    sessionKey?: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type PatchedCountryWriteRequest = {
    translations?: {
        el?: {
            name?: string;
        };
        en?: {
            name?: string;
        };
        de?: {
            name?: string;
        };
    };
    /**
     * Country Code Alpha 2
     */
    alpha2?: string;
    /**
     * Country Code Alpha 3
     */
    alpha3?: string;
    /**
     * ISO Country Code
     */
    isoCc?: number | null;
    phoneCode?: number | null;
};

export type PatchedNotificationUserWriteRequest = {
    user?: number;
    notification?: number;
    seen?: boolean;
};

export type PatchedOrderItemWriteRequest = {
    order?: number;
    product?: number;
    quantity?: number;
    notes?: string;
};

export type PatchedOrderWriteRequest = {
    user?: number | null;
    /**
     * Country Code Alpha 2
     */
    country?: string | null;
    /**
     * Region Code
     */
    region?: string | null;
    floor?: FloorEnum | BlankEnum;
    locationType?: LocationTypeEnum | BlankEnum;
    street?: string;
    streetNumber?: string;
    payWay?: number | null;
    status?: OrderStatus;
    firstName?: string;
    lastName?: string;
    email?: string;
    zipcode?: string;
    place?: string;
    city?: string;
    phone?: string;
    mobilePhone?: string;
    paidAmount?: number;
    customerNotes?: string;
    items?: Array<OrderItemCreateRequest>;
    shippingPrice?: number;
    documentType?: DocumentTypeEnum;
    paymentId?: string;
    paymentStatus?: string;
    paymentMethod?: string;
    trackingNumber?: string;
    shippingCarrier?: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type PatchedPayWayWriteRequest = {
    translations?: {
        el?: {
            name?: string;
            description?: string;
            instructions?: string;
        };
        en?: {
            name?: string;
            description?: string;
            instructions?: string;
        };
        de?: {
            name?: string;
            description?: string;
            instructions?: string;
        };
    };
    active?: boolean;
    cost?: number;
    freeThreshold?: number;
    icon?: Blob | File | null;
    /**
     * Code used to identify the payment provider in the system (e.g., 'stripe', 'paypal')
     */
    providerCode?: string;
    /**
     * Whether this payment method is processed online
     */
    isOnlinePayment?: boolean;
    /**
     * Whether this payment method requires manual confirmation (e.g., bank transfer)
     */
    requiresConfirmation?: boolean;
    /**
     * Provider Configuration
     * Provider-specific configuration (API keys, webhooks, etc.)
     */
    configuration?: unknown;
};

export type PatchedProductCategoryImageBulkUpdateRequest = {
    imageIds?: Array<number>;
    active?: boolean;
    sortOrder?: number;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type PatchedProductCategoryImageWriteRequest = {
    category?: number;
    /**
     * Εικόνα
     */
    image?: Blob | File;
    imageType?: ImageTypeEnum;
    active?: boolean;
    translations?: {
        el?: {
            title?: string;
            altText?: string;
        };
        en?: {
            title?: string;
            altText?: string;
        };
        de?: {
            title?: string;
            altText?: string;
        };
    };
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type PatchedProductCategoryWriteRequest = {
    translations?: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    slug?: string;
    active?: boolean;
    parent?: number | null;
    seoTitle?: string;
    seoDescription?: string;
    seoKeywords?: string;
};

export type PatchedProductFavouriteWriteRequest = {
    product?: number;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type PatchedProductImageWriteRequest = {
    product?: number;
    /**
     * Εικόνα
     */
    image?: Blob | File;
    isMain?: boolean;
    translations?: {
        el?: {
            title?: string;
        };
        en?: {
            title?: string;
        };
        de?: {
            title?: string;
        };
    };
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type PatchedProductReviewWriteRequest = {
    product?: number;
    rate?: RateEnum;
    status?: ReviewStatus;
    isPublished?: boolean;
    translations?: {
        el?: {
            comment?: string;
        };
        en?: {
            comment?: string;
        };
        de?: {
            comment?: string;
        };
    };
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type PatchedProductWriteRequest = {
    translations?: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    slug?: string;
    category?: number;
    price?: number;
    vat?: number;
    stock?: number;
    weight?: {
        unit?: string;
        value?: number;
    } | null;
    discountPercent?: number;
    seoTitle?: string;
    seoDescription?: string;
    seoKeywords?: string;
    active?: boolean;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type PatchedRegionWriteRequest = {
    translations?: {
        el?: {
            name?: string;
        };
        en?: {
            name?: string;
        };
        de?: {
            name?: string;
        };
    };
    /**
     * Region Code
     */
    alpha?: string;
    /**
     * Country Code Alpha 2
     */
    country?: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type PatchedSubscriptionTopicWriteRequest = {
    translations?: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    /**
     * Unique identifier for the topic (e.g., 'weekly-newsletter')
     */
    slug?: string;
    /**
     * Category of the subscription topic
     *
     * * `MARKETING` - Marketing Campaigns
     * * `PRODUCT` - Product Updates
     * * `ACCOUNT` - Account Updates
     * * `SYSTEM` - System Notifications
     * * `NEWSLETTER` - Newsletter
     * * `PROMOTIONAL` - Promotional
     * * `OTHER` - Other
     */
    category?: CategoryEnum;
    /**
     * Active
     * Whether this topic is currently available for subscription
     */
    isActive?: boolean;
    /**
     * Default Subscription
     * Whether new users are automatically subscribed to this topic
     */
    isDefault?: boolean;
    /**
     * Whether subscription to this topic requires email confirmation
     */
    requiresConfirmation?: boolean;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type PatchedTagWriteRequest = {
    translations?: {
        el?: {
            label?: string;
        };
        en?: {
            label?: string;
        };
        de?: {
            label?: string;
        };
    };
    active?: boolean;
};

export type PatchedTaggedItemWriteRequest = {
    contentType?: number;
    objectId?: number;
};

export type PatchedUserAddressWriteRequest = {
    title?: string;
    firstName?: string;
    lastName?: string;
    street?: string;
    streetNumber?: string;
    city?: string;
    /**
     * Zip Code
     */
    zipcode?: string;
    floor?: FloorEnum | BlankEnum;
    locationType?: LocationTypeEnum | BlankEnum;
    phone?: string;
    mobilePhone?: string;
    notes?: string;
    isMain?: boolean;
    user?: number;
    /**
     * Country Code Alpha 2
     */
    country?: string;
    /**
     * Region Code
     */
    region?: string;
};

export type PatchedUserSubscriptionWriteRequest = {
    topic?: number;
    status?: SubscriptionStatus;
    /**
     * Additional subscription preferences or data
     */
    metadata?: unknown;
};

export type PatchedUserWriteRequest = {
    /**
     * Διεύθυνση ηλεκτρονικού ταχυδρομείου
     */
    email?: string;
    firstName?: string;
    lastName?: string;
    /**
     * Όνομα χρήστη
     * Required. 30 characters or fewer.Letters, digits and @/./+/-/_ only.
     */
    username?: string | null;
    /**
     * Εικόνα
     */
    image?: Blob | File | null;
    phone?: string | null;
    city?: string;
    /**
     * Zip Code
     */
    zipcode?: string;
    address?: string;
    place?: string;
    /**
     * Country Code Alpha 2
     */
    country?: string | null;
    /**
     * Region Code
     */
    region?: string | null;
    birthDate?: string | null;
    /**
     * Twitter Profile
     */
    twitter?: string | null;
    /**
     * LinkedIn Profile
     */
    linkedin?: string | null;
    /**
     * Facebook Profile
     */
    facebook?: string | null;
    /**
     * Instagram Profile
     */
    instagram?: string | null;
    website?: string | null;
    /**
     * Youtube Profile
     */
    youtube?: string | null;
    /**
     * Github Profile
     */
    github?: string | null;
    bio?: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type PayWay = {
    translations: {
        el?: {
            name?: string;
            description?: string;
            instructions?: string;
        };
        en?: {
            name?: string;
            description?: string;
            instructions?: string;
        };
        de?: {
            name?: string;
            description?: string;
            instructions?: string;
        };
    };
    readonly id: number;
    active?: boolean;
    cost: number;
    freeThreshold: number;
    icon?: string | null;
    readonly sortOrder: number | null;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
    readonly iconFilename: string;
    /**
     * Code used to identify the payment provider in the system (e.g., 'stripe', 'paypal')
     */
    providerCode?: string;
    /**
     * Whether this payment method is processed online
     */
    isOnlinePayment?: boolean;
    /**
     * Whether this payment method requires manual confirmation (e.g., bank transfer)
     */
    requiresConfirmation?: boolean;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type PayWayDetail = {
    translations: {
        el?: {
            name?: string;
            description?: string;
            instructions?: string;
        };
        en?: {
            name?: string;
            description?: string;
            instructions?: string;
        };
        de?: {
            name?: string;
            description?: string;
            instructions?: string;
        };
    };
    readonly id: number;
    active?: boolean;
    cost: number;
    freeThreshold: number;
    icon?: string | null;
    readonly sortOrder: number | null;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
    readonly iconFilename: string;
    /**
     * Code used to identify the payment provider in the system (e.g., 'stripe', 'paypal')
     */
    providerCode?: string;
    /**
     * Whether this payment method is processed online
     */
    isOnlinePayment?: boolean;
    /**
     * Whether this payment method requires manual confirmation (e.g., bank transfer)
     */
    requiresConfirmation?: boolean;
    /**
     * Provider Configuration
     * Provider-specific configuration (API keys, webhooks, etc.)
     */
    configuration?: unknown;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type PayWayWriteRequest = {
    translations: {
        el?: {
            name?: string;
            description?: string;
            instructions?: string;
        };
        en?: {
            name?: string;
            description?: string;
            instructions?: string;
        };
        de?: {
            name?: string;
            description?: string;
            instructions?: string;
        };
    };
    active?: boolean;
    cost: number;
    freeThreshold?: number;
    icon?: Blob | File | null;
    /**
     * Code used to identify the payment provider in the system (e.g., 'stripe', 'paypal')
     */
    providerCode?: string;
    /**
     * Whether this payment method is processed online
     */
    isOnlinePayment?: boolean;
    /**
     * Whether this payment method requires manual confirmation (e.g., bank transfer)
     */
    requiresConfirmation?: boolean;
    /**
     * Provider Configuration
     * Provider-specific configuration (API keys, webhooks, etc.)
     */
    configuration?: unknown;
};

/**
 * * `PENDING` - Pending
 * * `PROCESSING` - Processing
 * * `COMPLETED` - Completed
 * * `FAILED` - Failed
 * * `REFUNDED` - Refunded
 * * `PARTIALLY_REFUNDED` - Partially Refunded
 * * `CANCELED` - Canceled
 */
export type PaymentStatusEnum = 'PENDING' | 'PROCESSING' | 'COMPLETED' | 'FAILED' | 'REFUNDED' | 'PARTIALLY_REFUNDED' | 'CANCELED';

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type Product = {
    readonly id: number;
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    slug: string;
    category: number;
    price: number;
    vat: number;
    readonly viewCount: number;
    stock?: number;
    active?: boolean;
    weight?: {
        unit?: string;
        value?: number;
    } | null;
    seoTitle?: string;
    seoDescription?: string;
    seoKeywords?: string;
    discountPercent?: number;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
    readonly discountValue: number;
    readonly priceSavePercent: number;
    readonly vatPercent: number;
    readonly vatValue: number;
    readonly finalPrice: number;
    readonly mainImagePath: string;
    readonly reviewAverage: number;
    readonly reviewCount: number;
    readonly likesCount: number;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductCategory = {
    readonly id: number;
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    slug: string;
    active?: boolean;
    parent?: number | null;
    readonly level: number;
    readonly treeId: number;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
    readonly recursiveProductCount: number;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductCategoryDetail = {
    readonly id: number;
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    slug: string;
    active?: boolean;
    parent?: number | null;
    readonly level: number;
    readonly treeId: number;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
    readonly recursiveProductCount: number;
    readonly children: Array<ProductCategory>;
    seoTitle?: string;
    seoDescription?: string;
    seoKeywords?: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductCategoryImage = {
    readonly id: number;
    category: number;
    readonly categoryName: string;
    /**
     * Εικόνα
     */
    image: string;
    imageType?: ImageTypeEnum;
    active?: boolean;
    readonly sortOrder: number | null;
    translations: {
        el?: {
            title?: string;
            altText?: string;
        };
        en?: {
            title?: string;
            altText?: string;
        };
        de?: {
            title?: string;
            altText?: string;
        };
    };
    readonly imagePath: string;
    readonly imageUrl: string;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
};

export type ProductCategoryImageBulkResponse = {
    success: boolean;
    message: string;
    updatedCount: number;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductCategoryImageDetail = {
    readonly id: number;
    category: number;
    readonly categoryName: string;
    /**
     * Εικόνα
     */
    image: string;
    imageType?: ImageTypeEnum;
    active?: boolean;
    readonly sortOrder: number | null;
    translations: {
        el?: {
            title?: string;
            altText?: string;
        };
        en?: {
            title?: string;
            altText?: string;
        };
        de?: {
            title?: string;
            altText?: string;
        };
    };
    readonly imagePath: string;
    readonly imageUrl: string;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductCategoryImageWriteRequest = {
    category: number;
    /**
     * Εικόνα
     */
    image: Blob | File;
    imageType?: ImageTypeEnum;
    active?: boolean;
    translations: {
        el?: {
            title?: string;
            altText?: string;
        };
        en?: {
            title?: string;
            altText?: string;
        };
        de?: {
            title?: string;
            altText?: string;
        };
    };
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductCategoryWriteRequest = {
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    slug: string;
    active?: boolean;
    parent?: number | null;
    seoTitle?: string;
    seoDescription?: string;
    seoKeywords?: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductDetail = {
    readonly id: number;
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    slug: string;
    category: number;
    price: number;
    vat: number;
    readonly viewCount: number;
    stock?: number;
    active?: boolean;
    weight?: {
        unit?: string;
        value?: number;
    } | null;
    seoTitle?: string;
    seoDescription?: string;
    seoKeywords?: string;
    discountPercent?: number;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
    readonly discountValue: number;
    readonly priceSavePercent: number;
    readonly vatPercent: number;
    readonly vatValue: number;
    readonly finalPrice: number;
    readonly mainImagePath: string;
    readonly reviewAverage: number;
    readonly reviewCount: number;
    readonly likesCount: number;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductDetailRequest = {
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    slug: string;
    category: number;
    price: number;
    vat: number;
    stock?: number;
    active?: boolean;
    weight?: {
        unit?: string;
        value?: number;
    } | null;
    seoTitle?: string;
    seoDescription?: string;
    seoKeywords?: string;
    discountPercent?: number;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductDetailResponse = {
    readonly id: number;
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    slug: string;
    category: number;
    price: number;
    vat: number;
    readonly viewCount: number;
    stock?: number;
    active?: boolean;
    weight?: {
        unit?: string;
        value?: number;
    } | null;
    seoTitle?: string;
    seoDescription?: string;
    seoKeywords?: string;
    discountPercent?: number;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
    readonly discountValue: number;
    readonly priceSavePercent: number;
    readonly vatPercent: number;
    readonly vatValue: number;
    readonly finalPrice: number;
    readonly mainImagePath: string;
    readonly reviewAverage: number;
    readonly reviewCount: number;
    readonly likesCount: number;
};

export type ProductFavourite = {
    readonly id: number;
    readonly userId: number;
    readonly userUsername: string;
    product: ProductDetail;
    readonly createdAt: string;
    readonly uuid: string;
};

export type ProductFavouriteByProductsRequestRequest = {
    /**
     * List of product IDs to check for favorites
     */
    productIds: Array<number>;
};

export type ProductFavouriteDetail = {
    readonly id: number;
    readonly userId: number;
    readonly userUsername: string;
    product: ProductDetail;
    readonly createdAt: string;
    readonly uuid: string;
    readonly user: string;
    readonly updatedAt: string;
};

export type ProductFavouriteWrite = {
    readonly id: number;
    product: number;
};

export type ProductFavouriteWriteRequest = {
    product: number;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductImage = {
    readonly id: number;
    readonly uuid: string;
    readonly product: number;
    /**
     * Εικόνα
     */
    image: string;
    readonly imageUrl: string;
    readonly imageSizeKb: number;
    readonly altText: string;
    isMain?: boolean;
    readonly sortOrder: number | null;
    translations: {
        el?: {
            title?: string;
        };
        en?: {
            title?: string;
        };
        de?: {
            title?: string;
        };
    };
    readonly mainImagePath: string;
    readonly createdAt: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductImageDetail = {
    readonly id: number;
    readonly uuid: string;
    product: Product;
    /**
     * Εικόνα
     */
    image: string;
    readonly imageUrl: string;
    readonly imageSizeKb: number;
    readonly altText: string;
    isMain?: boolean;
    readonly sortOrder: number | null;
    translations: {
        el?: {
            title?: string;
        };
        en?: {
            title?: string;
        };
        de?: {
            title?: string;
        };
    };
    readonly mainImagePath: string;
    readonly createdAt: string;
    readonly imageDimensions: {
        width?: number;
        height?: number;
        aspectRatio?: number;
    };
    readonly imageFormat: string;
    readonly usageContext: {
        isMain?: boolean;
        positionInGallery?: number;
        totalProductImages?: number;
        recommendedFor?: string;
    };
    readonly updatedAt: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductImageWriteRequest = {
    product: number;
    /**
     * Εικόνα
     */
    image: Blob | File;
    isMain?: boolean;
    translations: {
        el?: {
            title?: string;
        };
        en?: {
            title?: string;
        };
        de?: {
            title?: string;
        };
    };
};

export type ProductMeiliSearchResponse = {
    limit: number;
    offset: number;
    estimatedTotalHits: number;
    results: Array<ProductMeiliSearchResult>;
};

export type ProductMeiliSearchResult = {
    id: number;
    languageCode: string;
    name: string;
    description: string;
    master: number;
    slug: string;
    mainImagePath: string;
    matchesPosition: unknown;
    rankingScore: number | null;
    formatted: unknown;
    contentType: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductReview = {
    readonly id: number;
    product: Product;
    user: UserDetails;
    rate: RateEnum;
    status?: ReviewStatus;
    isPublished?: boolean;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly publishedAt: string | null;
    readonly uuid: string;
    translations: {
        el?: {
            comment?: string;
        };
        en?: {
            comment?: string;
        };
        de?: {
            comment?: string;
        };
    };
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductReviewDetail = {
    readonly id: number;
    product: Product;
    user: UserDetails;
    rate: RateEnum;
    status?: ReviewStatus;
    isPublished?: boolean;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly publishedAt: string | null;
    readonly uuid: string;
    translations: {
        el?: {
            comment?: string;
        };
        en?: {
            comment?: string;
        };
        de?: {
            comment?: string;
        };
    };
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductReviewWriteRequest = {
    product: number;
    rate: RateEnum;
    status?: ReviewStatus;
    isPublished?: boolean;
    translations: {
        el?: {
            comment?: string;
        };
        en?: {
            comment?: string;
        };
        de?: {
            comment?: string;
        };
    };
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductWriteRequest = {
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    slug: string;
    category: number;
    price: number;
    vat: number;
    stock?: number;
    weight?: {
        unit?: string;
        value?: number;
    } | null;
    discountPercent?: number;
    seoTitle?: string;
    seoDescription?: string;
    seoKeywords?: string;
    active?: boolean;
};

/**
 * * `1` - One
 * * `2` - Two
 * * `3` - Three
 * * `4` - Four
 * * `5` - Five
 * * `6` - Six
 * * `7` - Seven
 * * `8` - Eight
 * * `9` - Nine
 * * `10` - Ten
 */
export type RateEnum = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type Region = {
    translations: {
        el?: {
            name?: string;
        };
        en?: {
            name?: string;
        };
        de?: {
            name?: string;
        };
    };
    /**
     * Region Code
     */
    alpha: string;
    /**
     * Country Code Alpha 2
     */
    country: string;
    readonly sortOrder: number | null;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type RegionDetail = {
    translations: {
        el?: {
            name?: string;
        };
        en?: {
            name?: string;
        };
        de?: {
            name?: string;
        };
    };
    /**
     * Region Code
     */
    alpha: string;
    /**
     * Country Code Alpha 2
     */
    country: string;
    readonly sortOrder: number | null;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type RegionWriteRequest = {
    translations: {
        el?: {
            name?: string;
        };
        en?: {
            name?: string;
        };
        de?: {
            name?: string;
        };
    };
    /**
     * Region Code
     */
    alpha: string;
    /**
     * Country Code Alpha 2
     */
    country: string;
};

/**
 * * `NEW` - New
 * * `TRUE` - True
 * * `FALSE` - False
 */
export type ReviewStatus = 'NEW' | 'TRUE' | 'FALSE';

export type SearchSuggestion = {
    term: string;
    type: string;
    highlight: string;
};

export type SearchSuggestionResponse = {
    query: string;
    suggestions: Array<SearchSuggestion>;
};

/**
 * * `ACTIVE` - Active
 * * `PENDING` - Pending Confirmation
 * * `UNSUBSCRIBED` - Unsubscribed
 * * `BOUNCED` - Bounced
 */
export type SubscriptionStatus = 'ACTIVE' | 'PENDING' | 'UNSUBSCRIBED' | 'BOUNCED';

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type SubscriptionTopic = {
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    readonly id: number;
    readonly uuid: string;
    /**
     * Unique identifier for the topic (e.g., 'weekly-newsletter')
     */
    slug: string;
    /**
     * Category of the subscription topic
     *
     * * `MARKETING` - Marketing Campaigns
     * * `PRODUCT` - Product Updates
     * * `ACCOUNT` - Account Updates
     * * `SYSTEM` - System Notifications
     * * `NEWSLETTER` - Newsletter
     * * `PROMOTIONAL` - Promotional
     * * `OTHER` - Other
     */
    category?: CategoryEnum;
    /**
     * Active
     * Whether this topic is currently available for subscription
     */
    isActive?: boolean;
    /**
     * Default Subscription
     * Whether new users are automatically subscribed to this topic
     */
    isDefault?: boolean;
    /**
     * Whether subscription to this topic requires email confirmation
     */
    requiresConfirmation?: boolean;
    readonly subscriberCount: number;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type SubscriptionTopicDetail = {
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    readonly id: number;
    readonly uuid: string;
    /**
     * Unique identifier for the topic (e.g., 'weekly-newsletter')
     */
    slug: string;
    /**
     * Category of the subscription topic
     *
     * * `MARKETING` - Marketing Campaigns
     * * `PRODUCT` - Product Updates
     * * `ACCOUNT` - Account Updates
     * * `SYSTEM` - System Notifications
     * * `NEWSLETTER` - Newsletter
     * * `PROMOTIONAL` - Promotional
     * * `OTHER` - Other
     */
    category?: CategoryEnum;
    /**
     * Active
     * Whether this topic is currently available for subscription
     */
    isActive?: boolean;
    /**
     * Default Subscription
     * Whether new users are automatically subscribed to this topic
     */
    isDefault?: boolean;
    /**
     * Whether subscription to this topic requires email confirmation
     */
    requiresConfirmation?: boolean;
    readonly subscriberCount: number;
    readonly createdAt: string;
    readonly updatedAt: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type SubscriptionTopicRequest = {
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    /**
     * Unique identifier for the topic (e.g., 'weekly-newsletter')
     */
    slug: string;
    /**
     * Category of the subscription topic
     *
     * * `MARKETING` - Marketing Campaigns
     * * `PRODUCT` - Product Updates
     * * `ACCOUNT` - Account Updates
     * * `SYSTEM` - System Notifications
     * * `NEWSLETTER` - Newsletter
     * * `PROMOTIONAL` - Promotional
     * * `OTHER` - Other
     */
    category?: CategoryEnum;
    /**
     * Active
     * Whether this topic is currently available for subscription
     */
    isActive?: boolean;
    /**
     * Default Subscription
     * Whether new users are automatically subscribed to this topic
     */
    isDefault?: boolean;
    /**
     * Whether subscription to this topic requires email confirmation
     */
    requiresConfirmation?: boolean;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type SubscriptionTopicWriteRequest = {
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    /**
     * Unique identifier for the topic (e.g., 'weekly-newsletter')
     */
    slug: string;
    /**
     * Category of the subscription topic
     *
     * * `MARKETING` - Marketing Campaigns
     * * `PRODUCT` - Product Updates
     * * `ACCOUNT` - Account Updates
     * * `SYSTEM` - System Notifications
     * * `NEWSLETTER` - Newsletter
     * * `PROMOTIONAL` - Promotional
     * * `OTHER` - Other
     */
    category?: CategoryEnum;
    /**
     * Active
     * Whether this topic is currently available for subscription
     */
    isActive?: boolean;
    /**
     * Default Subscription
     * Whether new users are automatically subscribed to this topic
     */
    isDefault?: boolean;
    /**
     * Whether subscription to this topic requires email confirmation
     */
    requiresConfirmation?: boolean;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type Tag = {
    readonly id: number;
    translations: {
        el?: {
            label?: string;
        };
        en?: {
            label?: string;
        };
        de?: {
            label?: string;
        };
    };
    active?: boolean;
    readonly sortOrder: number | null;
    /**
     * Number of times this tag is used
     */
    readonly usageCount: string;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type TagDetail = {
    readonly id: number;
    translations: {
        el?: {
            label?: string;
        };
        en?: {
            label?: string;
        };
        de?: {
            label?: string;
        };
    };
    active?: boolean;
    readonly sortOrder: number | null;
    /**
     * Number of times this tag is used
     */
    readonly usageCount: string;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
    /**
     * Content types this tag is used with
     */
    readonly contentTypes: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type TagWriteRequest = {
    translations: {
        el?: {
            label?: string;
        };
        en?: {
            label?: string;
        };
        de?: {
            label?: string;
        };
    };
    active?: boolean;
};

export type TaggedItem = {
    readonly id: number;
    tag: Tag;
    contentType: number;
    /**
     * Name of the content type
     */
    readonly contentTypeName: string;
    objectId: number;
    /**
     * Serialized representation of the related content object
     */
    readonly contentObject: {
        id?: number;
        name?: string;
        description?: string;
        price?: string;
        active?: boolean;
        [key: string]: unknown | number | string | boolean | undefined;
    };
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
};

export type TaggedItemDetail = {
    readonly id: number;
    tag: TagDetail;
    contentType: number;
    /**
     * Name of the content type
     */
    readonly contentTypeName: string;
    objectId: number;
    /**
     * Serialized representation of the related content object
     */
    readonly contentObject: {
        id?: number;
        name?: string;
        description?: string;
        price?: string;
        active?: boolean;
        [key: string]: unknown | number | string | boolean | undefined;
    };
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
};

export type TaggedItemWriteRequest = {
    contentType: number;
    objectId: number;
};

export type Unsubscribe = {
    message: string;
    topic?: string;
    userEmail?: string;
    topicSlug?: string;
    error?: string;
};

export type UpdateStatusRequest = {
    status: OrderStatus;
};

export type UserAddress = {
    readonly id: number;
    title: string;
    firstName: string;
    lastName: string;
    street: string;
    streetNumber: string;
    city: string;
    /**
     * Zip Code
     */
    zipcode: string;
    floor?: FloorEnum | BlankEnum;
    locationType?: LocationTypeEnum | BlankEnum;
    phone: string;
    mobilePhone?: string;
    notes?: string;
    isMain?: boolean;
    readonly user: number;
    /**
     * Country Code Alpha 2
     */
    country: string;
    /**
     * Region Code
     */
    region: string;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
};

export type UserAddressDetail = {
    readonly id: number;
    title: string;
    firstName: string;
    lastName: string;
    street: string;
    streetNumber: string;
    city: string;
    /**
     * Zip Code
     */
    zipcode: string;
    floor?: FloorEnum | BlankEnum;
    locationType?: LocationTypeEnum | BlankEnum;
    phone: string;
    mobilePhone?: string;
    notes?: string;
    isMain?: boolean;
    readonly user: number;
    /**
     * Country Code Alpha 2
     */
    country: string;
    /**
     * Region Code
     */
    region: string;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
};

export type UserAddressWriteRequest = {
    title: string;
    firstName: string;
    lastName: string;
    street: string;
    streetNumber: string;
    city: string;
    /**
     * Zip Code
     */
    zipcode: string;
    floor?: FloorEnum | BlankEnum;
    locationType?: LocationTypeEnum | BlankEnum;
    phone: string;
    mobilePhone?: string;
    notes?: string;
    isMain?: boolean;
    user: number;
    /**
     * Country Code Alpha 2
     */
    country: string;
    /**
     * Region Code
     */
    region?: string;
};

export type UserDetails = {
    /**
     * Id
     */
    readonly pk: number;
    /**
     * Διεύθυνση ηλεκτρονικού ταχυδρομείου
     */
    email: string;
    firstName?: string;
    lastName?: string;
    readonly id: number;
    /**
     * Όνομα χρήστη
     * Required. 30 characters or fewer.Letters, digits and @/./+/-/_ only.
     */
    username?: string | null;
    phone?: string | null;
    city?: string;
    /**
     * Zip Code
     */
    zipcode?: string;
    address?: string;
    place?: string;
    /**
     * Country Code Alpha 2
     */
    country?: string | null;
    /**
     * Region Code
     */
    region?: string | null;
    birthDate?: string | null;
    /**
     * URL link or empty string
     */
    readonly twitter: string | null;
    /**
     * URL link or empty string
     */
    readonly linkedin: string | null;
    /**
     * URL link or empty string
     */
    readonly facebook: string | null;
    /**
     * URL link or empty string
     */
    readonly instagram: string | null;
    /**
     * URL link or empty string
     */
    readonly website: string | null;
    /**
     * URL link or empty string
     */
    readonly youtube: string | null;
    /**
     * URL link or empty string
     */
    readonly github: string | null;
    bio?: string;
    /**
     * Active
     */
    readonly isActive: boolean;
    /**
     * Staff
     */
    readonly isStaff: boolean;
    /**
     * Κατάσταση υπερχρήστη
     * Υποδηλώνει ότι ο συγκεκριμένος χρήστης έχει όλα τα δικαιώματα χωρίς να χρειάζεται να τα παραχωρήσετε ξεχωριστά.
     */
    readonly isSuperuser: boolean;
    readonly createdAt: string;
    readonly updatedAt: string;
    readonly uuid: string;
    readonly mainImagePath: string;
};

export type UserSubscription = {
    readonly id: number;
    /**
     * Χρήστης
     */
    readonly user: number;
    topic: number;
    topicDetails: SubscriptionTopic;
    status?: SubscriptionStatus;
    readonly subscribedAt: string;
    readonly unsubscribedAt: string | null;
    /**
     * Additional subscription preferences or data
     */
    metadata?: unknown;
    readonly createdAt: string;
    readonly updatedAt: string;
};

export type UserSubscriptionDetail = {
    readonly id: number;
    /**
     * Χρήστης
     */
    readonly user: number;
    topic: number;
    topicDetails: SubscriptionTopic;
    status?: SubscriptionStatus;
    readonly subscribedAt: string;
    readonly unsubscribedAt: string | null;
    /**
     * Additional subscription preferences or data
     */
    metadata?: unknown;
    readonly createdAt: string;
    readonly updatedAt: string;
    /**
     * Token for email confirmation if required
     */
    readonly confirmationToken: string;
};

export type UserSubscriptionDetailRequest = {
    topic: number;
    status?: SubscriptionStatus;
    /**
     * Additional subscription preferences or data
     */
    metadata?: unknown;
};

export type UserSubscriptionRequest = {
    topic: number;
    status?: SubscriptionStatus;
    /**
     * Additional subscription preferences or data
     */
    metadata?: unknown;
};

export type UserSubscriptionWriteRequest = {
    topic: number;
    status?: SubscriptionStatus;
    /**
     * Additional subscription preferences or data
     */
    metadata?: unknown;
};

export type UserWriteRequest = {
    /**
     * Διεύθυνση ηλεκτρονικού ταχυδρομείου
     */
    email: string;
    firstName?: string;
    lastName?: string;
    /**
     * Όνομα χρήστη
     * Required. 30 characters or fewer.Letters, digits and @/./+/-/_ only.
     */
    username?: string | null;
    /**
     * Εικόνα
     */
    image?: Blob | File | null;
    phone?: string | null;
    city?: string;
    /**
     * Zip Code
     */
    zipcode?: string;
    address?: string;
    place?: string;
    /**
     * Country Code Alpha 2
     */
    country?: string | null;
    /**
     * Region Code
     */
    region?: string | null;
    birthDate?: string | null;
    /**
     * Twitter Profile
     */
    twitter?: string | null;
    /**
     * LinkedIn Profile
     */
    linkedin?: string | null;
    /**
     * Facebook Profile
     */
    facebook?: string | null;
    /**
     * Instagram Profile
     */
    instagram?: string | null;
    website?: string | null;
    /**
     * Youtube Profile
     */
    youtube?: string | null;
    /**
     * Github Profile
     */
    github?: string | null;
    bio?: string;
};

export type UsernameUpdateRequest = {
    /**
     * New username
     */
    username: string;
};

export type UsernameUpdateResponse = {
    /**
     * Success message for username update
     */
    detail: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogAuthorWritable = {
    translations: {
        el?: {
            bio?: string;
        };
        en?: {
            bio?: string;
        };
        de?: {
            bio?: string;
        };
    };
    user: number;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogAuthorDetailWritable = {
    translations: {
        el?: {
            bio?: string;
        };
        en?: {
            bio?: string;
        };
        de?: {
            bio?: string;
        };
    };
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogCategoryWritable = {
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    slug: string;
    parent?: number | null;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogCategoryDetailWritable = {
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    slug: string;
    parent?: number | null;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogCommentWritable = {
    translations: {
        el?: {
            content?: string;
        };
        en?: {
            content?: string;
        };
        de?: {
            content?: string;
        };
    };
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogCommentDetailWritable = {
    translations: {
        el?: {
            content?: string;
        };
        en?: {
            content?: string;
        };
        de?: {
            content?: string;
        };
    };
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogPostWritable = {
    slug: string;
    likes: Array<number>;
    translations: {
        el?: {
            title?: string;
            subtitle?: string;
            body?: string;
        };
        en?: {
            title?: string;
            subtitle?: string;
            body?: string;
        };
        de?: {
            title?: string;
            subtitle?: string;
            body?: string;
        };
    };
    author: number;
    category: number;
    tags: Array<number>;
    featured?: boolean;
    isPublished?: boolean;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogPostDetailWritable = {
    slug: string;
    translations: {
        el?: {
            title?: string;
            subtitle?: string;
            body?: string;
        };
        en?: {
            title?: string;
            subtitle?: string;
            body?: string;
        };
        de?: {
            title?: string;
            subtitle?: string;
            body?: string;
        };
    };
    featured?: boolean;
    isPublished?: boolean;
    seoTitle?: string;
    seoDescription?: string;
    seoKeywords?: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogTagWritable = {
    translations: {
        el?: {
            name?: string;
        };
        en?: {
            name?: string;
        };
        de?: {
            name?: string;
        };
    };
    active?: boolean;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type BlogTagDetailWritable = {
    translations: {
        el?: {
            name?: string;
        };
        en?: {
            name?: string;
        };
        de?: {
            name?: string;
        };
    };
    active?: boolean;
};

export type CartWritable = {
    user?: number | null;
    /**
     * Session key for guest users
     */
    sessionKey?: string;
};

export type CartDetailWritable = {
    user?: number | null;
    /**
     * Session key for guest users
     */
    sessionKey?: string;
};

export type CartItemWritable = {
    quantity?: number;
};

export type CartItemDetailWritable = {
    quantity?: number;
};

export type ContactWriteWritable = {
    name: string;
    email: string;
    message: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type CountryWritable = {
    translations: {
        el?: {
            name?: string;
        };
        en?: {
            name?: string;
        };
        de?: {
            name?: string;
        };
    };
    /**
     * Country Code Alpha 2
     */
    alpha2: string;
    /**
     * Country Code Alpha 3
     */
    alpha3: string;
    /**
     * ISO Country Code
     */
    isoCc?: number | null;
    phoneCode?: number | null;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type CountryDetailWritable = {
    translations: {
        el?: {
            name?: string;
        };
        en?: {
            name?: string;
        };
        de?: {
            name?: string;
        };
    };
    /**
     * Country Code Alpha 2
     */
    alpha2: string;
    /**
     * Country Code Alpha 3
     */
    alpha3: string;
    /**
     * ISO Country Code
     */
    isoCc?: number | null;
    phoneCode?: number | null;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type NotificationWritable = {
    translations: {
        el?: {
            title?: string;
            message?: string;
        };
        en?: {
            title?: string;
            message?: string;
        };
        de?: {
            title?: string;
            message?: string;
        };
    };
    kind?: KindEnum;
    expiryDate?: string | null;
};

export type NotificationUserWritable = {
    user: number;
    notification: number;
    seen?: boolean;
    seenAt?: string | null;
};

export type NotificationUserDetailWritable = {
    seen?: boolean;
    seenAt?: string | null;
};

export type OrderWritable = {
    user?: number | null;
    /**
     * Country Code Alpha 2
     */
    country: string;
    /**
     * Region Code
     */
    region: string;
    floor?: FloorEnum | BlankEnum;
    locationType?: LocationTypeEnum | BlankEnum;
    street: string;
    streetNumber: string;
    payWay: number;
    status?: OrderStatus;
    firstName: string;
    lastName: string;
    email: string;
    zipcode: string;
    place?: string;
    city: string;
    phone: string;
    mobilePhone?: string;
    customerNotes?: string;
    items: Array<OrderItemDetailWritable>;
    documentType?: DocumentTypeEnum;
    paymentId?: string;
    paymentStatus?: PaymentStatusEnum | BlankEnum;
    paymentMethod?: string;
};

export type OrderDetailWritable = {
    user?: number | null;
    /**
     * Country Code Alpha 2
     */
    country: string;
    /**
     * Region Code
     */
    region: string;
    floor?: FloorEnum | BlankEnum;
    locationType?: LocationTypeEnum | BlankEnum;
    street: string;
    streetNumber: string;
    payWay: number;
    status?: OrderStatus;
    firstName: string;
    lastName: string;
    email: string;
    zipcode: string;
    place?: string;
    city: string;
    customerNotes?: string;
    items: Array<OrderItemDetailWritable>;
    documentType?: DocumentTypeEnum;
    paymentId?: string;
    paymentStatus?: PaymentStatusEnum | BlankEnum;
    paymentMethod?: string;
    trackingNumber?: string;
    shippingCarrier?: string;
};

export type OrderItemWritable = {
    order: number;
    product: number;
    quantity?: number;
};

export type OrderItemDetailWritable = {
    order: number;
    quantity?: number;
    notes?: string;
};

export type PatchedTaggedItemWriteRequestWritable = {
    /**
     * ID of the tag to assign
     */
    tagId?: number;
    contentType?: number;
    objectId?: number;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type PayWayWritable = {
    translations: {
        el?: {
            name?: string;
            description?: string;
            instructions?: string;
        };
        en?: {
            name?: string;
            description?: string;
            instructions?: string;
        };
        de?: {
            name?: string;
            description?: string;
            instructions?: string;
        };
    };
    active?: boolean;
    cost: number;
    freeThreshold: number;
    icon?: string | null;
    /**
     * Code used to identify the payment provider in the system (e.g., 'stripe', 'paypal')
     */
    providerCode?: string;
    /**
     * Whether this payment method is processed online
     */
    isOnlinePayment?: boolean;
    /**
     * Whether this payment method requires manual confirmation (e.g., bank transfer)
     */
    requiresConfirmation?: boolean;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type PayWayDetailWritable = {
    translations: {
        el?: {
            name?: string;
            description?: string;
            instructions?: string;
        };
        en?: {
            name?: string;
            description?: string;
            instructions?: string;
        };
        de?: {
            name?: string;
            description?: string;
            instructions?: string;
        };
    };
    active?: boolean;
    cost: number;
    freeThreshold: number;
    icon?: string | null;
    /**
     * Code used to identify the payment provider in the system (e.g., 'stripe', 'paypal')
     */
    providerCode?: string;
    /**
     * Whether this payment method is processed online
     */
    isOnlinePayment?: boolean;
    /**
     * Whether this payment method requires manual confirmation (e.g., bank transfer)
     */
    requiresConfirmation?: boolean;
    /**
     * Provider Configuration
     * Provider-specific configuration (API keys, webhooks, etc.)
     */
    configuration?: unknown;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductWritable = {
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    slug: string;
    category: number;
    price: number;
    vat: number;
    stock?: number;
    active?: boolean;
    weight?: {
        unit?: string;
        value?: number;
    } | null;
    seoTitle?: string;
    seoDescription?: string;
    seoKeywords?: string;
    discountPercent?: number;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductCategoryWritable = {
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    slug: string;
    active?: boolean;
    parent?: number | null;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductCategoryDetailWritable = {
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    slug: string;
    active?: boolean;
    parent?: number | null;
    seoTitle?: string;
    seoDescription?: string;
    seoKeywords?: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductCategoryImageWritable = {
    category: number;
    /**
     * Εικόνα
     */
    image: string;
    imageType?: ImageTypeEnum;
    active?: boolean;
    translations: {
        el?: {
            title?: string;
            altText?: string;
        };
        en?: {
            title?: string;
            altText?: string;
        };
        de?: {
            title?: string;
            altText?: string;
        };
    };
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductCategoryImageDetailWritable = {
    category: number;
    /**
     * Εικόνα
     */
    image: string;
    imageType?: ImageTypeEnum;
    active?: boolean;
    translations: {
        el?: {
            title?: string;
            altText?: string;
        };
        en?: {
            title?: string;
            altText?: string;
        };
        de?: {
            title?: string;
            altText?: string;
        };
    };
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductDetailWritable = {
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    slug: string;
    category: number;
    price: number;
    vat: number;
    stock?: number;
    active?: boolean;
    weight?: {
        unit?: string;
        value?: number;
    } | null;
    seoTitle?: string;
    seoDescription?: string;
    seoKeywords?: string;
    discountPercent?: number;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductDetailResponseWritable = {
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    slug: string;
    category: number;
    price: number;
    vat: number;
    stock?: number;
    active?: boolean;
    weight?: {
        unit?: string;
        value?: number;
    } | null;
    seoTitle?: string;
    seoDescription?: string;
    seoKeywords?: string;
    discountPercent?: number;
};

export type ProductFavouriteWritable = {
    [key: string]: unknown;
};

export type ProductFavouriteDetailWritable = {
    [key: string]: unknown;
};

export type ProductFavouriteWriteWritable = {
    product: number;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductImageWritable = {
    /**
     * Εικόνα
     */
    image: string;
    isMain?: boolean;
    translations: {
        el?: {
            title?: string;
        };
        en?: {
            title?: string;
        };
        de?: {
            title?: string;
        };
    };
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductImageDetailWritable = {
    /**
     * Εικόνα
     */
    image: string;
    isMain?: boolean;
    translations: {
        el?: {
            title?: string;
        };
        en?: {
            title?: string;
        };
        de?: {
            title?: string;
        };
    };
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductReviewWritable = {
    rate: RateEnum;
    status?: ReviewStatus;
    isPublished?: boolean;
    translations: {
        el?: {
            comment?: string;
        };
        en?: {
            comment?: string;
        };
        de?: {
            comment?: string;
        };
    };
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type ProductReviewDetailWritable = {
    rate: RateEnum;
    status?: ReviewStatus;
    isPublished?: boolean;
    translations: {
        el?: {
            comment?: string;
        };
        en?: {
            comment?: string;
        };
        de?: {
            comment?: string;
        };
    };
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type RegionWritable = {
    translations: {
        el?: {
            name?: string;
        };
        en?: {
            name?: string;
        };
        de?: {
            name?: string;
        };
    };
    /**
     * Region Code
     */
    alpha: string;
    /**
     * Country Code Alpha 2
     */
    country: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type RegionDetailWritable = {
    translations: {
        el?: {
            name?: string;
        };
        en?: {
            name?: string;
        };
        de?: {
            name?: string;
        };
    };
    /**
     * Region Code
     */
    alpha: string;
    /**
     * Country Code Alpha 2
     */
    country: string;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type SubscriptionTopicWritable = {
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    /**
     * Unique identifier for the topic (e.g., 'weekly-newsletter')
     */
    slug: string;
    /**
     * Category of the subscription topic
     *
     * * `MARKETING` - Marketing Campaigns
     * * `PRODUCT` - Product Updates
     * * `ACCOUNT` - Account Updates
     * * `SYSTEM` - System Notifications
     * * `NEWSLETTER` - Newsletter
     * * `PROMOTIONAL` - Promotional
     * * `OTHER` - Other
     */
    category?: CategoryEnum;
    /**
     * Active
     * Whether this topic is currently available for subscription
     */
    isActive?: boolean;
    /**
     * Default Subscription
     * Whether new users are automatically subscribed to this topic
     */
    isDefault?: boolean;
    /**
     * Whether subscription to this topic requires email confirmation
     */
    requiresConfirmation?: boolean;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type SubscriptionTopicDetailWritable = {
    translations: {
        el?: {
            name?: string;
            description?: string;
        };
        en?: {
            name?: string;
            description?: string;
        };
        de?: {
            name?: string;
            description?: string;
        };
    };
    /**
     * Unique identifier for the topic (e.g., 'weekly-newsletter')
     */
    slug: string;
    /**
     * Category of the subscription topic
     *
     * * `MARKETING` - Marketing Campaigns
     * * `PRODUCT` - Product Updates
     * * `ACCOUNT` - Account Updates
     * * `SYSTEM` - System Notifications
     * * `NEWSLETTER` - Newsletter
     * * `PROMOTIONAL` - Promotional
     * * `OTHER` - Other
     */
    category?: CategoryEnum;
    /**
     * Active
     * Whether this topic is currently available for subscription
     */
    isActive?: boolean;
    /**
     * Default Subscription
     * Whether new users are automatically subscribed to this topic
     */
    isDefault?: boolean;
    /**
     * Whether subscription to this topic requires email confirmation
     */
    requiresConfirmation?: boolean;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type TagWritable = {
    translations: {
        el?: {
            label?: string;
        };
        en?: {
            label?: string;
        };
        de?: {
            label?: string;
        };
    };
    active?: boolean;
};

/**
 * Serializer that saves :class:`TranslatedFieldsField` automatically.
 */
export type TagDetailWritable = {
    translations: {
        el?: {
            label?: string;
        };
        en?: {
            label?: string;
        };
        de?: {
            label?: string;
        };
    };
    active?: boolean;
};

export type TaggedItemWritable = {
    contentType: number;
    objectId: number;
};

export type TaggedItemDetailWritable = {
    contentType: number;
    objectId: number;
};

export type TaggedItemWriteRequestWritable = {
    /**
     * ID of the tag to assign
     */
    tagId: number;
    contentType: number;
    objectId: number;
};

export type UserAddressWritable = {
    title: string;
    firstName: string;
    lastName: string;
    street: string;
    streetNumber: string;
    city: string;
    /**
     * Zip Code
     */
    zipcode: string;
    floor?: FloorEnum | BlankEnum;
    locationType?: LocationTypeEnum | BlankEnum;
    phone: string;
    mobilePhone?: string;
    notes?: string;
    isMain?: boolean;
    /**
     * Country Code Alpha 2
     */
    country: string;
    /**
     * Region Code
     */
    region: string;
};

export type UserAddressDetailWritable = {
    title: string;
    firstName: string;
    lastName: string;
    street: string;
    streetNumber: string;
    city: string;
    /**
     * Zip Code
     */
    zipcode: string;
    floor?: FloorEnum | BlankEnum;
    locationType?: LocationTypeEnum | BlankEnum;
    phone: string;
    mobilePhone?: string;
    notes?: string;
    isMain?: boolean;
    /**
     * Country Code Alpha 2
     */
    country: string;
    /**
     * Region Code
     */
    region: string;
};

export type UserDetailsWritable = {
    /**
     * Διεύθυνση ηλεκτρονικού ταχυδρομείου
     */
    email: string;
    firstName?: string;
    lastName?: string;
    /**
     * Όνομα χρήστη
     * Required. 30 characters or fewer.Letters, digits and @/./+/-/_ only.
     */
    username?: string | null;
    phone?: string | null;
    city?: string;
    /**
     * Zip Code
     */
    zipcode?: string;
    address?: string;
    place?: string;
    /**
     * Country Code Alpha 2
     */
    country?: string | null;
    /**
     * Region Code
     */
    region?: string | null;
    birthDate?: string | null;
    bio?: string;
};

export type UserSubscriptionWritable = {
    topic: number;
    status?: SubscriptionStatus;
    /**
     * Additional subscription preferences or data
     */
    metadata?: unknown;
};

export type UserSubscriptionDetailWritable = {
    topic: number;
    status?: SubscriptionStatus;
    /**
     * Additional subscription preferences or data
     */
    metadata?: unknown;
};

export type ListBlogAuthorData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Cursor for pagination
         */
        cursor?: string;
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, user_FirstName, -user_FirstName, user_LastName, -user_LastName, user_Email, -user_Email, user_CreatedAt, -user_CreatedAt, website, -website
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'user_FirstName' | '-user_FirstName' | 'user_LastName' | '-user_LastName' | 'user_Email' | '-user_Email' | 'user_CreatedAt' | '-user_CreatedAt' | 'website' | '-website';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/api/v1/blog/author';
};

export type ListBlogAuthorResponses = {
    200: PaginatedBlogAuthorList;
};

export type ListBlogAuthorResponse = ListBlogAuthorResponses[keyof ListBlogAuthorResponses];

export type CreateBlogAuthorData = {
    body: BlogAuthorWriteRequest;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/blog/author';
};

export type CreateBlogAuthorResponses = {
    201: BlogAuthorDetail;
};

export type CreateBlogAuthorResponse = CreateBlogAuthorResponses[keyof CreateBlogAuthorResponses];

export type DestroyBlogAuthorData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/blog/author/{id}';
};

export type DestroyBlogAuthorResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyBlogAuthorResponse = DestroyBlogAuthorResponses[keyof DestroyBlogAuthorResponses];

export type RetrieveBlogAuthorData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/blog/author/{id}';
};

export type RetrieveBlogAuthorResponses = {
    200: BlogAuthorDetail;
};

export type RetrieveBlogAuthorResponse = RetrieveBlogAuthorResponses[keyof RetrieveBlogAuthorResponses];

export type PartialUpdateBlogAuthorData = {
    body?: PatchedBlogAuthorWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/blog/author/{id}';
};

export type PartialUpdateBlogAuthorResponses = {
    200: BlogAuthorDetail;
};

export type PartialUpdateBlogAuthorResponse = PartialUpdateBlogAuthorResponses[keyof PartialUpdateBlogAuthorResponses];

export type UpdateBlogAuthorData = {
    body: BlogAuthorWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/blog/author/{id}';
};

export type UpdateBlogAuthorResponses = {
    200: BlogAuthorDetail;
};

export type UpdateBlogAuthorResponse = UpdateBlogAuthorResponses[keyof UpdateBlogAuthorResponses];

export type GetBlogAuthorPostsData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, user_FirstName, -user_FirstName, user_LastName, -user_LastName, user_Email, -user_Email, user_CreatedAt, -user_CreatedAt, website, -website
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'user_FirstName' | '-user_FirstName' | 'user_LastName' | '-user_LastName' | 'user_Email' | '-user_Email' | 'user_CreatedAt' | '-user_CreatedAt' | 'website' | '-website';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page.
         */
        pageSize?: string | number;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/api/v1/blog/author/{id}/posts';
};

export type GetBlogAuthorPostsErrors = {
    404: ErrorResponse;
};

export type GetBlogAuthorPostsError = GetBlogAuthorPostsErrors[keyof GetBlogAuthorPostsErrors];

export type GetBlogAuthorPostsResponses = {
    200: PaginatedBlogPostList;
};

export type GetBlogAuthorPostsResponse = GetBlogAuthorPostsResponses[keyof GetBlogAuthorPostsResponses];

export type ListBlogCategoryData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, sortOrder, -sortOrder, level, -level, lft, -lft, rght, -rght, treeId, -treeId, name, -name
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'sortOrder' | '-sortOrder' | 'level' | '-level' | 'lft' | '-lft' | 'rght' | '-rght' | 'treeId' | '-treeId' | 'name' | '-name';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/api/v1/blog/category';
};

export type ListBlogCategoryResponses = {
    200: PaginatedBlogCategoryList;
};

export type ListBlogCategoryResponse = ListBlogCategoryResponses[keyof ListBlogCategoryResponses];

export type CreateBlogCategoryData = {
    body: BlogCategoryWriteRequest;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/blog/category';
};

export type CreateBlogCategoryResponses = {
    201: BlogCategoryDetail;
};

export type CreateBlogCategoryResponse = CreateBlogCategoryResponses[keyof CreateBlogCategoryResponses];

export type DestroyBlogCategoryData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/blog/category/{id}';
};

export type DestroyBlogCategoryResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyBlogCategoryResponse = DestroyBlogCategoryResponses[keyof DestroyBlogCategoryResponses];

export type RetrieveBlogCategoryData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/blog/category/{id}';
};

export type RetrieveBlogCategoryResponses = {
    200: BlogCategoryDetail;
};

export type RetrieveBlogCategoryResponse = RetrieveBlogCategoryResponses[keyof RetrieveBlogCategoryResponses];

export type PartialUpdateBlogCategoryData = {
    body?: PatchedBlogCategoryWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/blog/category/{id}';
};

export type PartialUpdateBlogCategoryResponses = {
    200: BlogCategoryDetail;
};

export type PartialUpdateBlogCategoryResponse = PartialUpdateBlogCategoryResponses[keyof PartialUpdateBlogCategoryResponses];

export type UpdateBlogCategoryData = {
    body: BlogCategoryWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/blog/category/{id}';
};

export type UpdateBlogCategoryResponses = {
    200: BlogCategoryDetail;
};

export type UpdateBlogCategoryResponse = UpdateBlogCategoryResponses[keyof UpdateBlogCategoryResponses];

export type ListBlogCategoryAncestorsData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, sortOrder, -sortOrder, level, -level, lft, -lft, rght, -rght, treeId, -treeId, name, -name
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'sortOrder' | '-sortOrder' | 'level' | '-level' | 'lft' | '-lft' | 'rght' | '-rght' | 'treeId' | '-treeId' | 'name' | '-name';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page.
         */
        pageSize?: string | number;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/api/v1/blog/category/{id}/ancestors';
};

export type ListBlogCategoryAncestorsErrors = {
    404: ErrorResponse;
};

export type ListBlogCategoryAncestorsError = ListBlogCategoryAncestorsErrors[keyof ListBlogCategoryAncestorsErrors];

export type ListBlogCategoryAncestorsResponses = {
    200: PaginatedBlogCategoryList;
};

export type ListBlogCategoryAncestorsResponse = ListBlogCategoryAncestorsResponses[keyof ListBlogCategoryAncestorsResponses];

export type ListBlogCategoryChildrenData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, sortOrder, -sortOrder, level, -level, lft, -lft, rght, -rght, treeId, -treeId, name, -name
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'sortOrder' | '-sortOrder' | 'level' | '-level' | 'lft' | '-lft' | 'rght' | '-rght' | 'treeId' | '-treeId' | 'name' | '-name';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page.
         */
        pageSize?: string | number;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/api/v1/blog/category/{id}/children';
};

export type ListBlogCategoryChildrenErrors = {
    404: ErrorResponse;
};

export type ListBlogCategoryChildrenError = ListBlogCategoryChildrenErrors[keyof ListBlogCategoryChildrenErrors];

export type ListBlogCategoryChildrenResponses = {
    200: PaginatedBlogCategoryList;
};

export type ListBlogCategoryChildrenResponse = ListBlogCategoryChildrenResponses[keyof ListBlogCategoryChildrenResponses];

export type ListBlogCategoryDescendantsData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, sortOrder, -sortOrder, level, -level, lft, -lft, rght, -rght, treeId, -treeId, name, -name
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'sortOrder' | '-sortOrder' | 'level' | '-level' | 'lft' | '-lft' | 'rght' | '-rght' | 'treeId' | '-treeId' | 'name' | '-name';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page.
         */
        pageSize?: string | number;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/api/v1/blog/category/{id}/descendants';
};

export type ListBlogCategoryDescendantsErrors = {
    404: ErrorResponse;
};

export type ListBlogCategoryDescendantsError = ListBlogCategoryDescendantsErrors[keyof ListBlogCategoryDescendantsErrors];

export type ListBlogCategoryDescendantsResponses = {
    200: PaginatedBlogCategoryList;
};

export type ListBlogCategoryDescendantsResponse = ListBlogCategoryDescendantsResponses[keyof ListBlogCategoryDescendantsResponses];

export type ListBlogCategoryPostsData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, sortOrder, -sortOrder, level, -level, lft, -lft, rght, -rght, treeId, -treeId, name, -name
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'sortOrder' | '-sortOrder' | 'level' | '-level' | 'lft' | '-lft' | 'rght' | '-rght' | 'treeId' | '-treeId' | 'name' | '-name';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page.
         */
        pageSize?: string | number;
        /**
         * Include posts from all descendant categories
         */
        recursive?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/api/v1/blog/category/{id}/posts';
};

export type ListBlogCategoryPostsErrors = {
    404: ErrorResponse;
};

export type ListBlogCategoryPostsError = ListBlogCategoryPostsErrors[keyof ListBlogCategoryPostsErrors];

export type ListBlogCategoryPostsResponses = {
    200: PaginatedBlogPostList;
};

export type ListBlogCategoryPostsResponse = ListBlogCategoryPostsResponses[keyof ListBlogCategoryPostsResponses];

export type ListBlogCategorySiblingsData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, sortOrder, -sortOrder, level, -level, lft, -lft, rght, -rght, treeId, -treeId, name, -name
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'sortOrder' | '-sortOrder' | 'level' | '-level' | 'lft' | '-lft' | 'rght' | '-rght' | 'treeId' | '-treeId' | 'name' | '-name';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page.
         */
        pageSize?: string | number;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/api/v1/blog/category/{id}/siblings';
};

export type ListBlogCategorySiblingsErrors = {
    404: ErrorResponse;
};

export type ListBlogCategorySiblingsError = ListBlogCategorySiblingsErrors[keyof ListBlogCategorySiblingsErrors];

export type ListBlogCategorySiblingsResponses = {
    200: PaginatedBlogCategoryList;
};

export type ListBlogCategorySiblingsResponse = ListBlogCategorySiblingsResponses[keyof ListBlogCategorySiblingsResponses];

export type ReorderBlogCategoriesData = {
    body: BlogCategoryReorderRequestRequest;
    path?: never;
    query?: never;
    url: '/api/v1/blog/category/reorder';
};

export type ReorderBlogCategoriesErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
};

export type ReorderBlogCategoriesError = ReorderBlogCategoriesErrors[keyof ReorderBlogCategoriesErrors];

export type ReorderBlogCategoriesResponses = {
    200: BlogCategoryReorderResponse;
};

export type ReorderBlogCategoriesResponse = ReorderBlogCategoriesResponses[keyof ReorderBlogCategoriesResponses];

export type GetBlogCategoryTreeData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, sortOrder, -sortOrder, level, -level, lft, -lft, rght, -rght, treeId, -treeId, name, -name
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'sortOrder' | '-sortOrder' | 'level' | '-level' | 'lft' | '-lft' | 'rght' | '-rght' | 'treeId' | '-treeId' | 'name' | '-name';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page.
         */
        pageSize?: string | number;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/api/v1/blog/category/tree';
};

export type GetBlogCategoryTreeResponses = {
    200: PaginatedBlogCategoryList;
};

export type GetBlogCategoryTreeResponse = GetBlogCategoryTreeResponses[keyof GetBlogCategoryTreeResponses];

export type ListBlogCommentData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter comments that are ancestors of the given comment ID
         */
        ancestorOf?: string | number;
        /**
         * Filter by approval status
         */
        approved?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by comment content (case-insensitive)
         */
        content?: string;
        /**
         * Filter by exact content length
         */
        contentLength?: string | number;
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Cursor for pagination
         */
        cursor?: string;
        /**
         * Filter comments that are descendants of the given comment ID
         */
        descendantOf?: string | number;
        /**
         * Filter comments that have content (true) or are empty (false)
         */
        hasContent?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter comments that have likes (true) or no likes (false)
         */
        hasLikes?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter comments that have approved replies (true) or no replies (false)
         */
        hasReplies?: 'true' | 'false' | '1' | '0' | boolean;
        id?: string | number;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        id_In?: string | Array<number>;
        /**
         * Filter anonymous comments (no user)
         */
        isAnonymous?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter leaf comments (no approved replies)
         */
        isLeaf?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Filter by comment nesting level (0 for top-level)
         */
        level?: string | number;
        /**
         * Filter comments at or below this nesting level
         */
        level_Gte?: string | number;
        /**
         * Filter comments at or above this nesting level
         */
        level_Lte?: string | number;
        /**
         * Filter by left tree value (MPTT internal)
         */
        lft?: string | number;
        lft_Gte?: string | number;
        lft_Lte?: string | number;
        /**
         * Filter comments liked by specific user ID
         */
        likedBy?: string | number;
        /**
         * Filter comments with at most this content length
         */
        maxContentLength?: string | number;
        /**
         * Filter comments with at most this many likes
         */
        maxLikes?: string | number;
        /**
         * Filter comments with at most this many approved replies
         */
        maxReplies?: string | number;
        /**
         * Filter comments with at least this content length
         */
        minContentLength?: string | number;
        /**
         * Filter comments with at least this many likes
         */
        minLikes?: string | number;
        /**
         * Filter comments with at least this many approved replies
         */
        minReplies?: string | number;
        /**
         * Order comments by most likes first
         */
        mostLiked?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Order comments by most approved replies first
         */
        mostReplied?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, level, -level, lft, -lft, approved, -approved
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'level' | '-level' | 'lft' | '-lft' | 'approved' | '-approved';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        /**
         * Filter by parent comment ID
         */
        parent?: string | number;
        /**
         * Filter top-level comments (true) or replies (false)
         */
        parent_Isnull?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by blog post ID
         */
        post?: string | number;
        /**
         * Filter by blog post author ID
         */
        post_Author?: string | number;
        /**
         * Filter by blog post category ID
         */
        post_Category?: string | number;
        /**
         * Filter by blog post category slug
         */
        post_Category_Slug?: string;
        /**
         * Filter by blog post published status
         */
        post_IsPublished?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by blog post slug
         */
        post_Slug?: string;
        /**
         * Filter by blog post title
         */
        post_Title?: string;
        /**
         * Filter by right tree value (MPTT internal)
         */
        rght?: string | number;
        rght_Gte?: string | number;
        rght_Lte?: string | number;
        /**
         * A search term.
         */
        search?: string;
        /**
         * Filter by tree ID (MPTT internal)
         */
        treeId?: string | number;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        /**
         * Filter by user ID
         */
        user?: string | number;
        /**
         * Filter by user email
         */
        user_Email?: string;
        /**
         * Filter comments by active users
         */
        user_IsActive?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter comments by staff users
         */
        user_IsStaff?: 'true' | 'false' | '1' | '0' | boolean;
        uuid?: string;
    };
    url: '/api/v1/blog/comment';
};

export type ListBlogCommentErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type ListBlogCommentError = ListBlogCommentErrors[keyof ListBlogCommentErrors];

export type ListBlogCommentResponses = {
    200: PaginatedBlogCommentList;
};

export type ListBlogCommentResponse = ListBlogCommentResponses[keyof ListBlogCommentResponses];

export type CreateBlogCommentData = {
    body: BlogCommentWriteRequest;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/blog/comment';
};

export type CreateBlogCommentErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type CreateBlogCommentError = CreateBlogCommentErrors[keyof CreateBlogCommentErrors];

export type CreateBlogCommentResponses = {
    201: BlogCommentDetail;
};

export type CreateBlogCommentResponse = CreateBlogCommentResponses[keyof CreateBlogCommentResponses];

export type DestroyBlogCommentData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/blog/comment/{id}';
};

export type DestroyBlogCommentErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type DestroyBlogCommentError = DestroyBlogCommentErrors[keyof DestroyBlogCommentErrors];

export type DestroyBlogCommentResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyBlogCommentResponse = DestroyBlogCommentResponses[keyof DestroyBlogCommentResponses];

export type RetrieveBlogCommentData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/blog/comment/{id}';
};

export type RetrieveBlogCommentErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type RetrieveBlogCommentError = RetrieveBlogCommentErrors[keyof RetrieveBlogCommentErrors];

export type RetrieveBlogCommentResponses = {
    200: BlogCommentDetail;
};

export type RetrieveBlogCommentResponse = RetrieveBlogCommentResponses[keyof RetrieveBlogCommentResponses];

export type PartialUpdateBlogCommentData = {
    body?: PatchedBlogCommentWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/blog/comment/{id}';
};

export type PartialUpdateBlogCommentErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type PartialUpdateBlogCommentError = PartialUpdateBlogCommentErrors[keyof PartialUpdateBlogCommentErrors];

export type PartialUpdateBlogCommentResponses = {
    200: BlogCommentDetail;
};

export type PartialUpdateBlogCommentResponse = PartialUpdateBlogCommentResponses[keyof PartialUpdateBlogCommentResponses];

export type UpdateBlogCommentData = {
    body: BlogCommentWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/blog/comment/{id}';
};

export type UpdateBlogCommentErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type UpdateBlogCommentError = UpdateBlogCommentErrors[keyof UpdateBlogCommentErrors];

export type UpdateBlogCommentResponses = {
    200: BlogCommentDetail;
};

export type UpdateBlogCommentResponse = UpdateBlogCommentResponses[keyof UpdateBlogCommentResponses];

export type GetBlogCommentPostData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/blog/comment/{id}/post';
};

export type GetBlogCommentPostErrors = {
    404: ErrorResponse;
};

export type GetBlogCommentPostError = GetBlogCommentPostErrors[keyof GetBlogCommentPostErrors];

export type GetBlogCommentPostResponses = {
    200: BlogPostDetail;
};

export type GetBlogCommentPostResponse = GetBlogCommentPostResponses[keyof GetBlogCommentPostResponses];

export type ListBlogCommentRepliesData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Filter comments that are ancestors of the given comment ID
         */
        ancestorOf?: string | number;
        /**
         * Filter by approval status
         */
        approved?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by comment content (case-insensitive)
         */
        content?: string;
        /**
         * Filter by exact content length
         */
        contentLength?: string | number;
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Filter comments that are descendants of the given comment ID
         */
        descendantOf?: string | number;
        /**
         * Filter comments that have content (true) or are empty (false)
         */
        hasContent?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter comments that have likes (true) or no likes (false)
         */
        hasLikes?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter comments that have approved replies (true) or no replies (false)
         */
        hasReplies?: 'true' | 'false' | '1' | '0' | boolean;
        id?: string | number;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        id_In?: string | Array<number>;
        /**
         * Filter anonymous comments (no user)
         */
        isAnonymous?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter leaf comments (no approved replies)
         */
        isLeaf?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by comment nesting level (0 for top-level)
         */
        level?: string | number;
        /**
         * Filter comments at or below this nesting level
         */
        level_Gte?: string | number;
        /**
         * Filter comments at or above this nesting level
         */
        level_Lte?: string | number;
        /**
         * Filter by left tree value (MPTT internal)
         */
        lft?: string | number;
        lft_Gte?: string | number;
        lft_Lte?: string | number;
        /**
         * Filter comments liked by specific user ID
         */
        likedBy?: string | number;
        /**
         * Filter comments with at most this content length
         */
        maxContentLength?: string | number;
        /**
         * Filter comments with at most this many likes
         */
        maxLikes?: string | number;
        /**
         * Filter comments with at most this many approved replies
         */
        maxReplies?: string | number;
        /**
         * Filter comments with at least this content length
         */
        minContentLength?: string | number;
        /**
         * Filter comments with at least this many likes
         */
        minLikes?: string | number;
        /**
         * Filter comments with at least this many approved replies
         */
        minReplies?: string | number;
        /**
         * Order comments by most likes first
         */
        mostLiked?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Order comments by most approved replies first
         */
        mostReplied?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, level, -level, lft, -lft, approved, -approved
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'level' | '-level' | 'lft' | '-lft' | 'approved' | '-approved';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page.
         */
        pageSize?: string | number;
        /**
         * Filter by parent comment ID
         */
        parent?: string | number;
        /**
         * Filter top-level comments (true) or replies (false)
         */
        parent_Isnull?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by blog post ID
         */
        post?: string | number;
        /**
         * Filter by blog post author ID
         */
        post_Author?: string | number;
        /**
         * Filter by blog post category ID
         */
        post_Category?: string | number;
        /**
         * Filter by blog post category slug
         */
        post_Category_Slug?: string;
        /**
         * Filter by blog post published status
         */
        post_IsPublished?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by blog post slug
         */
        post_Slug?: string;
        /**
         * Filter by blog post title
         */
        post_Title?: string;
        /**
         * Filter by right tree value (MPTT internal)
         */
        rght?: string | number;
        rght_Gte?: string | number;
        rght_Lte?: string | number;
        /**
         * A search term.
         */
        search?: string;
        /**
         * Filter by tree ID (MPTT internal)
         */
        treeId?: string | number;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        /**
         * Filter by user ID
         */
        user?: string | number;
        /**
         * Filter by user email
         */
        user_Email?: string;
        /**
         * Filter comments by active users
         */
        user_IsActive?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter comments by staff users
         */
        user_IsStaff?: 'true' | 'false' | '1' | '0' | boolean;
        uuid?: string;
    };
    url: '/api/v1/blog/comment/{id}/replies';
};

export type ListBlogCommentRepliesErrors = {
    404: ErrorResponse;
};

export type ListBlogCommentRepliesError = ListBlogCommentRepliesErrors[keyof ListBlogCommentRepliesErrors];

export type ListBlogCommentRepliesResponses = {
    200: PaginatedBlogCommentList;
};

export type ListBlogCommentRepliesResponse = ListBlogCommentRepliesResponses[keyof ListBlogCommentRepliesResponses];

export type GetBlogCommentThreadData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Filter comments that are ancestors of the given comment ID
         */
        ancestorOf?: string | number;
        /**
         * Filter by approval status
         */
        approved?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by comment content (case-insensitive)
         */
        content?: string;
        /**
         * Filter by exact content length
         */
        contentLength?: string | number;
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Filter comments that are descendants of the given comment ID
         */
        descendantOf?: string | number;
        /**
         * Filter comments that have content (true) or are empty (false)
         */
        hasContent?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter comments that have likes (true) or no likes (false)
         */
        hasLikes?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter comments that have approved replies (true) or no replies (false)
         */
        hasReplies?: 'true' | 'false' | '1' | '0' | boolean;
        id?: string | number;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        id_In?: string | Array<number>;
        /**
         * Filter anonymous comments (no user)
         */
        isAnonymous?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter leaf comments (no approved replies)
         */
        isLeaf?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by comment nesting level (0 for top-level)
         */
        level?: string | number;
        /**
         * Filter comments at or below this nesting level
         */
        level_Gte?: string | number;
        /**
         * Filter comments at or above this nesting level
         */
        level_Lte?: string | number;
        /**
         * Filter by left tree value (MPTT internal)
         */
        lft?: string | number;
        lft_Gte?: string | number;
        lft_Lte?: string | number;
        /**
         * Filter comments liked by specific user ID
         */
        likedBy?: string | number;
        /**
         * Filter comments with at most this content length
         */
        maxContentLength?: string | number;
        /**
         * Filter comments with at most this many likes
         */
        maxLikes?: string | number;
        /**
         * Filter comments with at most this many approved replies
         */
        maxReplies?: string | number;
        /**
         * Filter comments with at least this content length
         */
        minContentLength?: string | number;
        /**
         * Filter comments with at least this many likes
         */
        minLikes?: string | number;
        /**
         * Filter comments with at least this many approved replies
         */
        minReplies?: string | number;
        /**
         * Order comments by most likes first
         */
        mostLiked?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Order comments by most approved replies first
         */
        mostReplied?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, level, -level, lft, -lft, approved, -approved
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'level' | '-level' | 'lft' | '-lft' | 'approved' | '-approved';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page.
         */
        pageSize?: string | number;
        /**
         * Filter by parent comment ID
         */
        parent?: string | number;
        /**
         * Filter top-level comments (true) or replies (false)
         */
        parent_Isnull?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by blog post ID
         */
        post?: string | number;
        /**
         * Filter by blog post author ID
         */
        post_Author?: string | number;
        /**
         * Filter by blog post category ID
         */
        post_Category?: string | number;
        /**
         * Filter by blog post category slug
         */
        post_Category_Slug?: string;
        /**
         * Filter by blog post published status
         */
        post_IsPublished?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by blog post slug
         */
        post_Slug?: string;
        /**
         * Filter by blog post title
         */
        post_Title?: string;
        /**
         * Filter by right tree value (MPTT internal)
         */
        rght?: string | number;
        rght_Gte?: string | number;
        rght_Lte?: string | number;
        /**
         * A search term.
         */
        search?: string;
        /**
         * Filter by tree ID (MPTT internal)
         */
        treeId?: string | number;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        /**
         * Filter by user ID
         */
        user?: string | number;
        /**
         * Filter by user email
         */
        user_Email?: string;
        /**
         * Filter comments by active users
         */
        user_IsActive?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter comments by staff users
         */
        user_IsStaff?: 'true' | 'false' | '1' | '0' | boolean;
        uuid?: string;
    };
    url: '/api/v1/blog/comment/{id}/thread';
};

export type GetBlogCommentThreadResponses = {
    200: PaginatedBlogCommentList;
};

export type GetBlogCommentThreadResponse = GetBlogCommentThreadResponses[keyof GetBlogCommentThreadResponses];

export type ToggleBlogCommentLikeData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/blog/comment/{id}/update_likes';
};

export type ToggleBlogCommentLikeErrors = {
    401: ErrorResponse;
    404: ErrorResponse;
};

export type ToggleBlogCommentLikeError = ToggleBlogCommentLikeErrors[keyof ToggleBlogCommentLikeErrors];

export type ToggleBlogCommentLikeResponses = {
    200: BlogCommentDetail;
};

export type ToggleBlogCommentLikeResponse = ToggleBlogCommentLikeResponses[keyof ToggleBlogCommentLikeResponses];

export type CheckBlogCommentLikesData = {
    body: BlogCommentLikedCommentsRequestRequest;
    path?: never;
    query?: never;
    url: '/api/v1/blog/comment/liked_comments';
};

export type CheckBlogCommentLikesErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
};

export type CheckBlogCommentLikesError = CheckBlogCommentLikesErrors[keyof CheckBlogCommentLikesErrors];

export type CheckBlogCommentLikesResponses = {
    200: BlogCommentLikedCommentsResponse;
};

export type CheckBlogCommentLikesResponse = CheckBlogCommentLikesResponses[keyof CheckBlogCommentLikesResponses];

export type ListMyBlogCommentsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter comments that are ancestors of the given comment ID
         */
        ancestorOf?: string | number;
        /**
         * Filter by approval status
         */
        approved?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by comment content (case-insensitive)
         */
        content?: string;
        /**
         * Filter by exact content length
         */
        contentLength?: string | number;
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Filter comments that are descendants of the given comment ID
         */
        descendantOf?: string | number;
        /**
         * Filter comments that have content (true) or are empty (false)
         */
        hasContent?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter comments that have likes (true) or no likes (false)
         */
        hasLikes?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter comments that have approved replies (true) or no replies (false)
         */
        hasReplies?: 'true' | 'false' | '1' | '0' | boolean;
        id?: string | number;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        id_In?: string | Array<number>;
        /**
         * Filter anonymous comments (no user)
         */
        isAnonymous?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter leaf comments (no approved replies)
         */
        isLeaf?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by comment nesting level (0 for top-level)
         */
        level?: string | number;
        /**
         * Filter comments at or below this nesting level
         */
        level_Gte?: string | number;
        /**
         * Filter comments at or above this nesting level
         */
        level_Lte?: string | number;
        /**
         * Filter by left tree value (MPTT internal)
         */
        lft?: string | number;
        lft_Gte?: string | number;
        lft_Lte?: string | number;
        /**
         * Filter comments liked by specific user ID
         */
        likedBy?: string | number;
        /**
         * Filter comments with at most this content length
         */
        maxContentLength?: string | number;
        /**
         * Filter comments with at most this many likes
         */
        maxLikes?: string | number;
        /**
         * Filter comments with at most this many approved replies
         */
        maxReplies?: string | number;
        /**
         * Filter comments with at least this content length
         */
        minContentLength?: string | number;
        /**
         * Filter comments with at least this many likes
         */
        minLikes?: string | number;
        /**
         * Filter comments with at least this many approved replies
         */
        minReplies?: string | number;
        /**
         * Order comments by most likes first
         */
        mostLiked?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Order comments by most approved replies first
         */
        mostReplied?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, level, -level, lft, -lft, approved, -approved
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'level' | '-level' | 'lft' | '-lft' | 'approved' | '-approved';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page.
         */
        pageSize?: string | number;
        /**
         * Filter by parent comment ID
         */
        parent?: string | number;
        /**
         * Filter top-level comments (true) or replies (false)
         */
        parent_Isnull?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by blog post ID
         */
        post?: string | number;
        /**
         * Filter by blog post author ID
         */
        post_Author?: string | number;
        /**
         * Filter by blog post category ID
         */
        post_Category?: string | number;
        /**
         * Filter by blog post category slug
         */
        post_Category_Slug?: string;
        /**
         * Filter by blog post published status
         */
        post_IsPublished?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by blog post slug
         */
        post_Slug?: string;
        /**
         * Filter by blog post title
         */
        post_Title?: string;
        /**
         * Filter by right tree value (MPTT internal)
         */
        rght?: string | number;
        rght_Gte?: string | number;
        rght_Lte?: string | number;
        /**
         * A search term.
         */
        search?: string;
        /**
         * Filter by tree ID (MPTT internal)
         */
        treeId?: string | number;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        /**
         * Filter by user ID
         */
        user?: string | number;
        /**
         * Filter by user email
         */
        user_Email?: string;
        /**
         * Filter comments by active users
         */
        user_IsActive?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter comments by staff users
         */
        user_IsStaff?: 'true' | 'false' | '1' | '0' | boolean;
        uuid?: string;
    };
    url: '/api/v1/blog/comment/my_comments';
};

export type ListMyBlogCommentsErrors = {
    401: ErrorResponse;
};

export type ListMyBlogCommentsError = ListMyBlogCommentsErrors[keyof ListMyBlogCommentsErrors];

export type ListMyBlogCommentsResponses = {
    200: PaginatedBlogCommentList;
};

export type ListMyBlogCommentsResponse = ListMyBlogCommentsResponses[keyof ListMyBlogCommentsResponses];

export type ListBlogPostData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by author ID
         */
        author?: string | number;
        /**
         * Filter by author email (case-insensitive)
         */
        authorEmail?: string;
        /**
         * Filter by author full name (case-insensitive)
         */
        authorName?: string;
        /**
         * Filter by category ID
         */
        category?: string | number;
        /**
         * Filter by category name (case-insensitive)
         */
        categoryName?: string;
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Filter items that are currently published (published_at <= now and is_published=True)
         */
        currentlyPublished?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Cursor for pagination
         */
        cursor?: string;
        /**
         * Filter by featured status
         */
        featured?: 'true' | 'false' | '1' | '0' | boolean;
        id?: string | number;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        id_In?: string | Array<number>;
        /**
         * Filter by published status
         */
        isPublished?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Filter by minimum number of approved comments
         */
        minComments?: string | number;
        /**
         * Filter by minimum number of likes
         */
        minLikes?: string | number;
        /**
         * Filter by minimum number of active tags
         */
        minTags?: string | number;
        /**
         * Filter by minimum number of views
         */
        minViewCount?: string | number;
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, publishedAt, -publishedAt, viewCount, -viewCount, featured, -featured
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'publishedAt' | '-publishedAt' | 'viewCount' | '-viewCount' | 'featured' | '-featured';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        /**
         * Filter items published after this date
         */
        publishedAfter?: string;
        publishedAt_Date?: string;
        publishedAt_Gte?: string;
        publishedAt_Lte?: string;
        /**
         * Filter items published before this date
         */
        publishedBefore?: string;
        /**
         * A search term.
         */
        search?: string;
        slug?: string;
        slug_Icontains?: string;
        /**
         * Filter by tag label (case-insensitive)
         */
        tagName?: string;
        /**
         * Filter by tag IDs (comma-separated)
         */
        tags?: string | Array<number>;
        /**
         * Filter by title (case-insensitive)
         */
        title?: string;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        uuid?: string;
        viewCount?: string | number;
        viewCount_Gte?: string | number;
        viewCount_Lte?: string | number;
    };
    url: '/api/v1/blog/post';
};

export type ListBlogPostErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type ListBlogPostError = ListBlogPostErrors[keyof ListBlogPostErrors];

export type ListBlogPostResponses = {
    200: PaginatedBlogPostList;
};

export type ListBlogPostResponse = ListBlogPostResponses[keyof ListBlogPostResponses];

export type CreateBlogPostData = {
    body: BlogPostWriteRequest;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/blog/post';
};

export type CreateBlogPostErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type CreateBlogPostError = CreateBlogPostErrors[keyof CreateBlogPostErrors];

export type CreateBlogPostResponses = {
    201: BlogPostDetail;
};

export type CreateBlogPostResponse = CreateBlogPostResponses[keyof CreateBlogPostResponses];

export type DestroyBlogPostData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/blog/post/{id}';
};

export type DestroyBlogPostErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type DestroyBlogPostError = DestroyBlogPostErrors[keyof DestroyBlogPostErrors];

export type DestroyBlogPostResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyBlogPostResponse = DestroyBlogPostResponses[keyof DestroyBlogPostResponses];

export type RetrieveBlogPostData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/blog/post/{id}';
};

export type RetrieveBlogPostErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type RetrieveBlogPostError = RetrieveBlogPostErrors[keyof RetrieveBlogPostErrors];

export type RetrieveBlogPostResponses = {
    200: BlogPostDetail;
};

export type RetrieveBlogPostResponse = RetrieveBlogPostResponses[keyof RetrieveBlogPostResponses];

export type PartialUpdateBlogPostData = {
    body?: PatchedBlogPostWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/blog/post/{id}';
};

export type PartialUpdateBlogPostErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type PartialUpdateBlogPostError = PartialUpdateBlogPostErrors[keyof PartialUpdateBlogPostErrors];

export type PartialUpdateBlogPostResponses = {
    200: BlogPostDetail;
};

export type PartialUpdateBlogPostResponse = PartialUpdateBlogPostResponses[keyof PartialUpdateBlogPostResponses];

export type UpdateBlogPostData = {
    body: BlogPostWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/blog/post/{id}';
};

export type UpdateBlogPostErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type UpdateBlogPostError = UpdateBlogPostErrors[keyof UpdateBlogPostErrors];

export type UpdateBlogPostResponses = {
    200: BlogPostDetail;
};

export type UpdateBlogPostResponse = UpdateBlogPostResponses[keyof UpdateBlogPostResponses];

export type ListBlogPostCommentsData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, publishedAt, -publishedAt, viewCount, -viewCount, featured, -featured
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'publishedAt' | '-publishedAt' | 'viewCount' | '-viewCount' | 'featured' | '-featured';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page.
         */
        pageSize?: string | number;
        /**
         * Parent comment ID
         */
        parent?: string;
        /**
         * Filter comments with no parent
         */
        parent_Isnull?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/api/v1/blog/post/{id}/comments';
};

export type ListBlogPostCommentsErrors = {
    404: ErrorResponse;
};

export type ListBlogPostCommentsError = ListBlogPostCommentsErrors[keyof ListBlogPostCommentsErrors];

export type ListBlogPostCommentsResponses = {
    200: PaginatedBlogCommentList;
};

export type ListBlogPostCommentsResponse = ListBlogPostCommentsResponses[keyof ListBlogPostCommentsResponses];

export type ListBlogPostRelatedData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this blog post.
         */
        id: string | number;
    };
    query?: never;
    url: '/api/v1/blog/post/{id}/related_posts';
};

export type ListBlogPostRelatedErrors = {
    404: ErrorResponse;
};

export type ListBlogPostRelatedError = ListBlogPostRelatedErrors[keyof ListBlogPostRelatedErrors];

export type ListBlogPostRelatedResponses = {
    200: Array<BlogPost>;
};

export type ListBlogPostRelatedResponse = ListBlogPostRelatedResponses[keyof ListBlogPostRelatedResponses];

export type ToggleBlogPostLikeData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/blog/post/{id}/update_likes';
};

export type ToggleBlogPostLikeErrors = {
    401: ErrorResponse;
    404: ErrorResponse;
};

export type ToggleBlogPostLikeError = ToggleBlogPostLikeErrors[keyof ToggleBlogPostLikeErrors];

export type ToggleBlogPostLikeResponses = {
    200: BlogPostDetail;
};

export type ToggleBlogPostLikeResponse = ToggleBlogPostLikeResponses[keyof ToggleBlogPostLikeResponses];

export type IncrementBlogPostViewsData = {
    body: BlogPostDetailRequest;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/blog/post/{id}/update_view_count';
};

export type IncrementBlogPostViewsErrors = {
    404: ErrorResponse;
};

export type IncrementBlogPostViewsError = IncrementBlogPostViewsErrors[keyof IncrementBlogPostViewsErrors];

export type IncrementBlogPostViewsResponses = {
    200: BlogPostDetail;
};

export type IncrementBlogPostViewsResponse = IncrementBlogPostViewsResponses[keyof IncrementBlogPostViewsResponses];

export type ListFeaturedBlogPostsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by author ID
         */
        author?: string | number;
        /**
         * Filter by author email (case-insensitive)
         */
        authorEmail?: string;
        /**
         * Filter by author full name (case-insensitive)
         */
        authorName?: string;
        /**
         * Filter by category ID
         */
        category?: string | number;
        /**
         * Filter by category name (case-insensitive)
         */
        categoryName?: string;
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Filter items that are currently published (published_at <= now and is_published=True)
         */
        currentlyPublished?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by featured status
         */
        featured?: 'true' | 'false' | '1' | '0' | boolean;
        id?: string | number;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        id_In?: string | Array<number>;
        /**
         * Filter by published status
         */
        isPublished?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by minimum number of approved comments
         */
        minComments?: string | number;
        /**
         * Filter by minimum number of likes
         */
        minLikes?: string | number;
        /**
         * Filter by minimum number of active tags
         */
        minTags?: string | number;
        /**
         * Filter by minimum number of views
         */
        minViewCount?: string | number;
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, publishedAt, -publishedAt, viewCount, -viewCount, featured, -featured
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'publishedAt' | '-publishedAt' | 'viewCount' | '-viewCount' | 'featured' | '-featured';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page.
         */
        pageSize?: string | number;
        /**
         * Filter items published after this date
         */
        publishedAfter?: string;
        publishedAt_Date?: string;
        publishedAt_Gte?: string;
        publishedAt_Lte?: string;
        /**
         * Filter items published before this date
         */
        publishedBefore?: string;
        /**
         * A search term.
         */
        search?: string;
        slug?: string;
        slug_Icontains?: string;
        /**
         * Filter by tag label (case-insensitive)
         */
        tagName?: string;
        /**
         * Filter by tag IDs (comma-separated)
         */
        tags?: string | Array<number>;
        /**
         * Filter by title (case-insensitive)
         */
        title?: string;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        uuid?: string;
        viewCount?: string | number;
        viewCount_Gte?: string | number;
        viewCount_Lte?: string | number;
    };
    url: '/api/v1/blog/post/featured';
};

export type ListFeaturedBlogPostsResponses = {
    200: PaginatedBlogPostList;
};

export type ListFeaturedBlogPostsResponse = ListFeaturedBlogPostsResponses[keyof ListFeaturedBlogPostsResponses];

export type CheckBlogPostLikesData = {
    body: BlogPostLikedPostsRequestRequest;
    path?: never;
    query?: never;
    url: '/api/v1/blog/post/liked_posts';
};

export type CheckBlogPostLikesErrors = {
    400: ErrorResponse;
};

export type CheckBlogPostLikesError = CheckBlogPostLikesErrors[keyof CheckBlogPostLikesErrors];

export type CheckBlogPostLikesResponses = {
    200: BlogPostLikedPostsResponse;
};

export type CheckBlogPostLikesResponse = CheckBlogPostLikesResponses[keyof CheckBlogPostLikesResponses];

export type ListPopularBlogPostsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by author ID
         */
        author?: string | number;
        /**
         * Filter by author email (case-insensitive)
         */
        authorEmail?: string;
        /**
         * Filter by author full name (case-insensitive)
         */
        authorName?: string;
        /**
         * Filter by category ID
         */
        category?: string | number;
        /**
         * Filter by category name (case-insensitive)
         */
        categoryName?: string;
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Filter items that are currently published (published_at <= now and is_published=True)
         */
        currentlyPublished?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by featured status
         */
        featured?: 'true' | 'false' | '1' | '0' | boolean;
        id?: string | number;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        id_In?: string | Array<number>;
        /**
         * Filter by published status
         */
        isPublished?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by minimum number of approved comments
         */
        minComments?: string | number;
        /**
         * Filter by minimum number of likes
         */
        minLikes?: string | number;
        /**
         * Filter by minimum number of active tags
         */
        minTags?: string | number;
        /**
         * Filter by minimum number of views
         */
        minViewCount?: string | number;
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, publishedAt, -publishedAt, viewCount, -viewCount, featured, -featured
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'publishedAt' | '-publishedAt' | 'viewCount' | '-viewCount' | 'featured' | '-featured';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page.
         */
        pageSize?: string | number;
        /**
         * Filter items published after this date
         */
        publishedAfter?: string;
        publishedAt_Date?: string;
        publishedAt_Gte?: string;
        publishedAt_Lte?: string;
        /**
         * Filter items published before this date
         */
        publishedBefore?: string;
        /**
         * A search term.
         */
        search?: string;
        slug?: string;
        slug_Icontains?: string;
        /**
         * Filter by tag label (case-insensitive)
         */
        tagName?: string;
        /**
         * Filter by tag IDs (comma-separated)
         */
        tags?: string | Array<number>;
        /**
         * Filter by title (case-insensitive)
         */
        title?: string;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        uuid?: string;
        viewCount?: string | number;
        viewCount_Gte?: string | number;
        viewCount_Lte?: string | number;
    };
    url: '/api/v1/blog/post/popular';
};

export type ListPopularBlogPostsResponses = {
    200: PaginatedBlogPostList;
};

export type ListPopularBlogPostsResponse = ListPopularBlogPostsResponses[keyof ListPopularBlogPostsResponses];

export type ListTrendingBlogPostsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by author ID
         */
        author?: string | number;
        /**
         * Filter by author email (case-insensitive)
         */
        authorEmail?: string;
        /**
         * Filter by author full name (case-insensitive)
         */
        authorName?: string;
        /**
         * Filter by category ID
         */
        category?: string | number;
        /**
         * Filter by category name (case-insensitive)
         */
        categoryName?: string;
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Filter items that are currently published (published_at <= now and is_published=True)
         */
        currentlyPublished?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Number of days to look back for trending calculation
         */
        days?: string | number;
        /**
         * Filter by featured status
         */
        featured?: 'true' | 'false' | '1' | '0' | boolean;
        id?: string | number;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        id_In?: string | Array<number>;
        /**
         * Filter by published status
         */
        isPublished?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by minimum number of approved comments
         */
        minComments?: string | number;
        /**
         * Filter by minimum number of likes
         */
        minLikes?: string | number;
        /**
         * Filter by minimum number of active tags
         */
        minTags?: string | number;
        /**
         * Filter by minimum number of views
         */
        minViewCount?: string | number;
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, publishedAt, -publishedAt, viewCount, -viewCount, featured, -featured
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'publishedAt' | '-publishedAt' | 'viewCount' | '-viewCount' | 'featured' | '-featured';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page.
         */
        pageSize?: string | number;
        /**
         * Filter items published after this date
         */
        publishedAfter?: string;
        publishedAt_Date?: string;
        publishedAt_Gte?: string;
        publishedAt_Lte?: string;
        /**
         * Filter items published before this date
         */
        publishedBefore?: string;
        /**
         * A search term.
         */
        search?: string;
        slug?: string;
        slug_Icontains?: string;
        /**
         * Filter by tag label (case-insensitive)
         */
        tagName?: string;
        /**
         * Filter by tag IDs (comma-separated)
         */
        tags?: string | Array<number>;
        /**
         * Filter by title (case-insensitive)
         */
        title?: string;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        uuid?: string;
        viewCount?: string | number;
        viewCount_Gte?: string | number;
        viewCount_Lte?: string | number;
    };
    url: '/api/v1/blog/post/trending';
};

export type ListTrendingBlogPostsResponses = {
    200: PaginatedBlogPostList;
};

export type ListTrendingBlogPostsResponse = ListTrendingBlogPostsResponses[keyof ListTrendingBlogPostsResponses];

export type ListBlogTagData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by active status
         */
        active?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Cursor for pagination
         */
        cursor?: string;
        /**
         * Filter tags used in posts that have/don't have likes
         */
        hasLikedPosts?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter tags that have/don't have a name
         */
        hasName?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter tags that have/don't have posts
         */
        hasPosts?: 'true' | 'false' | '1' | '0' | boolean;
        id?: string | number;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        id_In?: string | Array<number>;
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Filter tags with at most X posts
         */
        maxPosts?: string | number;
        /**
         * Filter tags with at least X posts
         */
        minPosts?: string | number;
        /**
         * Filter tags with posts having at least X total likes
         */
        minTotalLikes?: string | number;
        /**
         * Order tags by total likes on posts using them
         */
        mostLiked?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Order tags by usage count (most used first)
         */
        mostUsed?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by tag name (partial match)
         */
        name?: string;
        /**
         * Filter by exact tag name
         */
        name_Exact?: string;
        /**
         * Filter tags with names starting with
         */
        name_Startswith?: string;
        /**
         * Which field to use when ordering the results. Available fields: id, -id, active, -active, createdAt, -createdAt, updatedAt, -updatedAt, sortOrder, -sortOrder, name, -name
         */
        ordering?: 'id' | '-id' | 'active' | '-active' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'sortOrder' | '-sortOrder' | 'name' | '-name';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        /**
         * Filter tags used by specific post ID
         */
        post?: string | number;
        /**
         * Filter tags used in posts by specific author
         */
        post_Author?: string | number;
        /**
         * Filter tags used in posts from specific category
         */
        post_Category?: string | number;
        /**
         * Filter tags used in published/unpublished posts
         */
        post_IsPublished?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * A search term.
         */
        search?: string;
        sortOrder?: string | number;
        sortOrder_Gte?: string | number;
        sortOrder_Lte?: string | number;
        translations_Name?: string;
        translations_Name_Icontains?: string;
        translations_Name_Istartswith?: string;
        /**
         * Filter tags not used in any posts
         */
        unused?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        uuid?: string;
    };
    url: '/api/v1/blog/tag';
};

export type ListBlogTagErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type ListBlogTagError = ListBlogTagErrors[keyof ListBlogTagErrors];

export type ListBlogTagResponses = {
    200: PaginatedBlogTagList;
};

export type ListBlogTagResponse = ListBlogTagResponses[keyof ListBlogTagResponses];

export type CreateBlogTagData = {
    body: BlogTagWriteRequest;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/blog/tag';
};

export type CreateBlogTagErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type CreateBlogTagError = CreateBlogTagErrors[keyof CreateBlogTagErrors];

export type CreateBlogTagResponses = {
    201: BlogTagDetail;
};

export type CreateBlogTagResponse = CreateBlogTagResponses[keyof CreateBlogTagResponses];

export type DestroyBlogTagData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/blog/tag/{id}';
};

export type DestroyBlogTagErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type DestroyBlogTagError = DestroyBlogTagErrors[keyof DestroyBlogTagErrors];

export type DestroyBlogTagResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyBlogTagResponse = DestroyBlogTagResponses[keyof DestroyBlogTagResponses];

export type RetrieveBlogTagData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/blog/tag/{id}';
};

export type RetrieveBlogTagErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type RetrieveBlogTagError = RetrieveBlogTagErrors[keyof RetrieveBlogTagErrors];

export type RetrieveBlogTagResponses = {
    200: BlogTagDetail;
};

export type RetrieveBlogTagResponse = RetrieveBlogTagResponses[keyof RetrieveBlogTagResponses];

export type PartialUpdateBlogTagData = {
    body?: PatchedBlogTagWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/blog/tag/{id}';
};

export type PartialUpdateBlogTagErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type PartialUpdateBlogTagError = PartialUpdateBlogTagErrors[keyof PartialUpdateBlogTagErrors];

export type PartialUpdateBlogTagResponses = {
    200: BlogTagDetail;
};

export type PartialUpdateBlogTagResponse = PartialUpdateBlogTagResponses[keyof PartialUpdateBlogTagResponses];

export type UpdateBlogTagData = {
    body: BlogTagWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/blog/tag/{id}';
};

export type UpdateBlogTagErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type UpdateBlogTagError = UpdateBlogTagErrors[keyof UpdateBlogTagErrors];

export type UpdateBlogTagResponses = {
    200: BlogTagDetail;
};

export type UpdateBlogTagResponse = UpdateBlogTagResponses[keyof UpdateBlogTagResponses];

export type DestroyCartData = {
    body?: never;
    headers?: {
        /**
         * Cart ID for guest users. Used to identify and maintain guest cart sessions.
         */
        'X-Cart-Id'?: string | number;
        /**
         * Session key for guest users. Used to validate cart ownership for anonymous sessions.
         */
        'X-Session-Key'?: string;
    };
    path?: never;
    query?: never;
    url: '/api/v1/cart';
};

export type DestroyCartErrors = {
    401: ErrorResponse;
    404: ErrorResponse;
};

export type DestroyCartError = DestroyCartErrors[keyof DestroyCartErrors];

export type DestroyCartResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyCartResponse = DestroyCartResponses[keyof DestroyCartResponses];

export type RetrieveCartData = {
    body?: never;
    headers?: {
        /**
         * Cart ID for guest users. Used to identify and maintain guest cart sessions.
         */
        'X-Cart-Id'?: string | number;
        /**
         * Session key for guest users. Used to validate cart ownership for anonymous sessions.
         */
        'X-Session-Key'?: string;
    };
    path?: never;
    query?: never;
    url: '/api/v1/cart';
};

export type RetrieveCartErrors = {
    404: ErrorResponse;
};

export type RetrieveCartError = RetrieveCartErrors[keyof RetrieveCartErrors];

export type RetrieveCartResponses = {
    200: CartDetail;
};

export type RetrieveCartResponse = RetrieveCartResponses[keyof RetrieveCartResponses];

export type PartialUpdateCartData = {
    body?: PatchedCartWriteRequest;
    headers?: {
        /**
         * Cart ID for guest users. Used to identify and maintain guest cart sessions.
         */
        'X-Cart-Id'?: string | number;
        /**
         * Session key for guest users. Used to validate cart ownership for anonymous sessions.
         */
        'X-Session-Key'?: string;
    };
    path?: never;
    query?: never;
    url: '/api/v1/cart';
};

export type PartialUpdateCartErrors = {
    404: ErrorResponse;
};

export type PartialUpdateCartError = PartialUpdateCartErrors[keyof PartialUpdateCartErrors];

export type PartialUpdateCartResponses = {
    200: CartDetail;
};

export type PartialUpdateCartResponse = PartialUpdateCartResponses[keyof PartialUpdateCartResponses];

export type UpdateCartData = {
    body?: CartWriteRequest;
    headers?: {
        /**
         * Cart ID for guest users. Used to identify and maintain guest cart sessions.
         */
        'X-Cart-Id'?: string | number;
        /**
         * Session key for guest users. Used to validate cart ownership for anonymous sessions.
         */
        'X-Session-Key'?: string;
    };
    path?: never;
    query?: never;
    url: '/api/v1/cart';
};

export type UpdateCartErrors = {
    404: ErrorResponse;
};

export type UpdateCartError = UpdateCartErrors[keyof UpdateCartErrors];

export type UpdateCartResponses = {
    200: CartDetail;
};

export type UpdateCartResponse = UpdateCartResponses[keyof UpdateCartResponses];

export type ListCartItemData = {
    body?: never;
    headers?: {
        /**
         * Cart ID for guest users. Used to identify and maintain guest cart sessions.
         */
        'X-Cart-Id'?: string | number;
        /**
         * Session key for guest users. Used to validate cart ownership for anonymous sessions.
         */
        'X-Session-Key'?: string;
    };
    path?: never;
    query?: {
        /**
         * Filter by cart ID
         */
        cart?: string | number;
        /**
         * Filter items in guest carts
         */
        cart_IsGuest?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by cart session key
         */
        cart_SessionKey?: string;
        cart_SessionKey_Icontains?: string;
        /**
         * Filter by cart user ID
         */
        cart_User?: string | number;
        /**
         * Filter by cart user email (partial match)
         */
        cart_User_Email?: string;
        /**
         * Filter by cart user name (first or last)
         */
        cart_User_Name?: string;
        /**
         * Filter by cart UUID
         */
        cart_Uuid?: string;
        /**
         * Filter by cart last activity after date
         */
        cartLastActivityAfter?: string;
        /**
         * Filter by cart last activity before date
         */
        cartLastActivityBefore?: string;
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Cursor for pagination
         */
        cursor?: string;
        id?: string | number;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        id_In?: string | Array<number>;
        /**
         * Filter items in abandoned carts (30+ days)
         */
        inAbandonedCarts?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter items in active carts (24hr)
         */
        inActiveCarts?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Filter by maximum discount percentage
         */
        maxDiscountPercent?: string | number;
        /**
         * Filter by maximum product price
         */
        maxPrice?: string | number;
        /**
         * Filter by maximum quantity
         */
        maxQuantity?: string | number;
        /**
         * Filter by maximum total price (quantity * price)
         */
        maxTotalPrice?: string | number;
        /**
         * Filter by minimum discount percentage
         */
        minDiscountPercent?: string | number;
        /**
         * Filter by minimum product price
         */
        minPrice?: string | number;
        /**
         * Filter by minimum quantity
         */
        minQuantity?: string | number;
        /**
         * Filter by minimum total price (quantity * price)
         */
        minTotalPrice?: string | number;
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, quantity, -quantity, cart_Id, -cart_Id, cart_LastActivity, -cart_LastActivity, product_Id, -product_Id
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'quantity' | '-quantity' | 'cart_Id' | '-cart_Id' | 'cart_LastActivity' | '-cart_LastActivity' | 'product_Id' | '-product_Id';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        /**
         * Filter by product ID
         */
        product?: string | number;
        /**
         * Filter by product active status
         */
        product_Active?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by product category ID
         */
        product_Category?: string | number;
        /**
         * Filter by product category slug
         */
        product_Category_Slug?: string;
        /**
         * Filter by product name (partial match)
         */
        product_Name?: string;
        /**
         * Filter by product sku (exact match)
         */
        product_Sku?: string;
        /**
         * Filter by product UUID
         */
        product_Uuid?: string;
        /**
         * Filter by exact quantity
         */
        quantity?: string | number;
        quantity_Gte?: string | number;
        quantity_Lte?: string | number;
        /**
         * A search term.
         */
        search?: string;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        uuid?: string;
        /**
         * Filter items with product discounts
         */
        withDiscounts?: 'true' | 'false' | '1' | '0' | boolean;
    };
    url: '/api/v1/cart/item';
};

export type ListCartItemErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type ListCartItemError = ListCartItemErrors[keyof ListCartItemErrors];

export type ListCartItemResponses = {
    200: PaginatedCartItemList;
};

export type ListCartItemResponse = ListCartItemResponses[keyof ListCartItemResponses];

export type CreateCartItemData = {
    body: CartItemCreateRequest;
    headers?: {
        /**
         * Cart ID for guest users. Used to identify and maintain guest cart sessions.
         */
        'X-Cart-Id'?: string | number;
        /**
         * Session key for guest users. Used to validate cart ownership for anonymous sessions.
         */
        'X-Session-Key'?: string;
    };
    path?: never;
    query?: never;
    url: '/api/v1/cart/item';
};

export type CreateCartItemErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
};

export type CreateCartItemError = CreateCartItemErrors[keyof CreateCartItemErrors];

export type CreateCartItemResponses = {
    201: CartItemDetail;
};

export type CreateCartItemResponse = CreateCartItemResponses[keyof CreateCartItemResponses];

export type DestroyCartItemData = {
    body?: never;
    headers?: {
        /**
         * Cart ID for guest users. Used to identify and maintain guest cart sessions.
         */
        'X-Cart-Id'?: string | number;
        /**
         * Session key for guest users. Used to validate cart ownership for anonymous sessions.
         */
        'X-Session-Key'?: string;
    };
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/cart/item/{id}';
};

export type DestroyCartItemErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type DestroyCartItemError = DestroyCartItemErrors[keyof DestroyCartItemErrors];

export type DestroyCartItemResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyCartItemResponse = DestroyCartItemResponses[keyof DestroyCartItemResponses];

export type RetrieveCartItemData = {
    body?: never;
    headers?: {
        /**
         * Cart ID for guest users. Used to identify and maintain guest cart sessions.
         */
        'X-Cart-Id'?: string | number;
        /**
         * Session key for guest users. Used to validate cart ownership for anonymous sessions.
         */
        'X-Session-Key'?: string;
    };
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/cart/item/{id}';
};

export type RetrieveCartItemErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type RetrieveCartItemError = RetrieveCartItemErrors[keyof RetrieveCartItemErrors];

export type RetrieveCartItemResponses = {
    200: CartItemDetail;
};

export type RetrieveCartItemResponse = RetrieveCartItemResponses[keyof RetrieveCartItemResponses];

export type PartialUpdateCartItemData = {
    body?: PatchedCartItemUpdateRequest;
    headers?: {
        /**
         * Cart ID for guest users. Used to identify and maintain guest cart sessions.
         */
        'X-Cart-Id'?: string | number;
        /**
         * Session key for guest users. Used to validate cart ownership for anonymous sessions.
         */
        'X-Session-Key'?: string;
    };
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/cart/item/{id}';
};

export type PartialUpdateCartItemErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type PartialUpdateCartItemError = PartialUpdateCartItemErrors[keyof PartialUpdateCartItemErrors];

export type PartialUpdateCartItemResponses = {
    200: CartItemDetail;
};

export type PartialUpdateCartItemResponse = PartialUpdateCartItemResponses[keyof PartialUpdateCartItemResponses];

export type UpdateCartItemData = {
    body?: CartItemUpdateRequest;
    headers?: {
        /**
         * Cart ID for guest users. Used to identify and maintain guest cart sessions.
         */
        'X-Cart-Id'?: string | number;
        /**
         * Session key for guest users. Used to validate cart ownership for anonymous sessions.
         */
        'X-Session-Key'?: string;
    };
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/cart/item/{id}';
};

export type UpdateCartItemErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type UpdateCartItemError = UpdateCartItemErrors[keyof UpdateCartItemErrors];

export type UpdateCartItemResponses = {
    200: CartItemDetail;
};

export type UpdateCartItemResponse = UpdateCartItemResponses[keyof UpdateCartItemResponses];

export type ListCartData = {
    body?: never;
    headers?: {
        /**
         * Cart ID for guest users. Used to identify and maintain guest cart sessions.
         */
        'X-Cart-Id'?: string | number;
        /**
         * Session key for guest users. Used to validate cart ownership for anonymous sessions.
         */
        'X-Session-Key'?: string;
    };
    path?: never;
    query?: {
        /**
         * Filter by cart type
         *
         * * `user` - User Cart
         * * `guest` - Guest Cart
         * * `anonymous` - Anonymous Cart
         */
        cartType?: 'anonymous' | 'guest' | 'user';
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Cursor for pagination
         */
        cursor?: string;
        /**
         * Filter carts inactive for at least X days
         */
        daysInactive?: string | number;
        /**
         * Filter carts with/without discounted items
         */
        hasDiscounts?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter carts that have/don't have items
         */
        hasItems?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter carts with/without session keys
         */
        hasSessionKey?: 'true' | 'false' | '1' | '0' | boolean;
        id?: string | number;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        id_In?: string | Array<number>;
        /**
         * Filter abandoned carts (inactive for 30+ days)
         */
        isAbandoned?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter active/abandoned carts (based on 30-day inactivity)
         */
        isActive?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter guest carts (True) or user carts (False)
         */
        isGuest?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Filter by exact last activity date
         */
        lastActivity?: string;
        lastActivity_Date?: string;
        lastActivity_Gte?: string;
        lastActivity_Lte?: string;
        /**
         * Filter carts with last activity after this date
         */
        lastActivityAfter?: string;
        /**
         * Filter carts with last activity before this date
         */
        lastActivityBefore?: string;
        /**
         * Filter carts with at most X total items (quantity)
         */
        maxItems?: string | number;
        /**
         * Filter carts with total value at most X
         */
        maxTotalValue?: string | number;
        /**
         * Filter carts with at most X unique items
         */
        maxUniqueItems?: string | number;
        /**
         * Filter carts with at least X total items (quantity)
         */
        minItems?: string | number;
        /**
         * Filter carts with total value at least X
         */
        minTotalValue?: string | number;
        /**
         * Filter carts with at least X unique items
         */
        minUniqueItems?: string | number;
        /**
         * Which field to use when ordering the results. Available fields: id, -id, user, -user, createdAt, -createdAt, updatedAt, -updatedAt, lastActivity, -lastActivity
         */
        ordering?: 'id' | '-id' | 'user' | '-user' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'lastActivity' | '-lastActivity';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        /**
         * A search term.
         */
        search?: string;
        /**
         * Filter by exact session key
         */
        sessionKey?: string;
        sessionKey_Icontains?: string;
        sessionKey_Istartswith?: string;
        /**
         * Filter by session key prefix
         */
        sessionKey_Startswith?: string;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        /**
         * Filter by user ID
         */
        user?: string | number;
        /**
         * Filter by active users
         */
        user_IsActive?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter carts with/without users
         */
        user_Isnull?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by user email (partial match)
         */
        userEmail?: string;
        /**
         * Filter by user full name (first or last name)
         */
        userName?: string;
        uuid?: string;
    };
    url: '/api/v1/cart/list';
};

export type ListCartErrors = {
    404: ErrorResponse;
};

export type ListCartError = ListCartErrors[keyof ListCartErrors];

export type ListCartResponses = {
    200: PaginatedCartList;
};

export type ListCartResponse = ListCartResponses[keyof ListCartResponses];

export type CreateContactData = {
    body: ContactWriteRequest;
    path?: never;
    query?: never;
    url: '/api/v1/contact';
};

export type CreateContactErrors = {
    400: ErrorResponse;
};

export type CreateContactError = CreateContactErrors[keyof CreateContactErrors];

export type CreateContactResponses = {
    201: ContactWrite;
};

export type CreateContactResponse = CreateContactResponses[keyof CreateContactResponses];

export type ListCountryData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by exact 2-letter country code
         */
        alpha2?: string;
        /**
         * Filter by 2-letter country code (partial match)
         */
        alpha2_Icontains?: string;
        alpha2_Iexact?: string;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        alpha2_In?: string | Array<string>;
        /**
         * Filter by exact 3-letter country code
         */
        alpha3?: string;
        /**
         * Filter by 3-letter country code (partial match)
         */
        alpha3_Icontains?: string;
        alpha3_Iexact?: string;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        alpha3_In?: string | Array<string>;
        /**
         * Filter by continent (based on ISO codes)
         *
         * * `AF` - Africa
         * * `AS` - Asia
         * * `EU` - Europe
         * * `NA` - North America
         * * `OC` - Oceania
         * * `SA` - South America
         * * `AN` - Antarctica
         */
        continent?: 'AF' | 'AN' | 'AS' | 'EU' | 'NA' | 'OC' | 'SA';
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Cursor for pagination
         */
        cursor?: string;
        /**
         * Filter countries that have complete data (ISO, phone, flag, name)
         */
        hasAllData?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter countries that have/don't have flag image
         */
        hasFlagImage?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter countries that have/don't have ISO country code
         */
        hasIsoCc?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter countries that have/don't have name translation
         */
        hasName?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter countries that have/don't have phone code
         */
        hasPhoneCode?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter EU member countries
         */
        isEu?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by exact ISO country code
         */
        isoCc?: string | number;
        isoCc_Gte?: string | number;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        isoCc_In?: string | Array<number>;
        isoCc_Lte?: string | number;
        /**
         * Filter countries with ISO code less than or equal to
         */
        isoCcMax?: string | number;
        /**
         * Filter countries with ISO code greater than or equal to
         */
        isoCcMin?: string | number;
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Filter by multiple country codes (comma-separated, alpha-2 or alpha-3)
         */
        multipleCodes?: string;
        /**
         * Filter by country name (partial match)
         */
        name?: string;
        /**
         * Filter by exact country name
         */
        name_Exact?: string;
        /**
         * Filter countries with names starting with
         */
        name_Startswith?: string;
        /**
         * Which field to use when ordering the results. Available fields: alpha2, -alpha2, alpha3, -alpha3, isoCc, -isoCc, phoneCode, -phoneCode, createdAt, -createdAt, updatedAt, -updatedAt, sortOrder, -sortOrder, translations_Name, -translations_Name
         */
        ordering?: 'alpha2' | '-alpha2' | 'alpha3' | '-alpha3' | 'isoCc' | '-isoCc' | 'phoneCode' | '-phoneCode' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'sortOrder' | '-sortOrder' | 'translations_Name' | '-translations_Name';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        /**
         * Filter by exact phone code
         */
        phoneCode?: string | number;
        phoneCode_Gte?: string | number;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        phoneCode_In?: string | Array<number>;
        phoneCode_Lte?: string | number;
        /**
         * Filter countries with phone code less than or equal to
         */
        phoneCodeMax?: string | number;
        /**
         * Filter countries with phone code greater than or equal to
         */
        phoneCodeMin?: string | number;
        /**
         * A search term.
         */
        search?: string;
        sortOrder?: string | number;
        sortOrder_Gte?: string | number;
        sortOrder_Lte?: string | number;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        uuid?: string;
    };
    url: '/api/v1/country';
};

export type ListCountryResponses = {
    200: PaginatedCountryList;
};

export type ListCountryResponse = ListCountryResponses[keyof ListCountryResponses];

export type CreateCountryData = {
    body: CountryWriteRequest;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/country';
};

export type CreateCountryResponses = {
    201: CountryDetail;
};

export type CreateCountryResponse = CreateCountryResponses[keyof CreateCountryResponses];

export type DestroyCountryData = {
    body?: never;
    path: {
        /**
         * Country Code Alpha 2
         * A unique value identifying this Country.
         */
        alpha2: string;
    };
    query?: never;
    url: '/api/v1/country/{alpha_2}';
};

export type DestroyCountryResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyCountryResponse = DestroyCountryResponses[keyof DestroyCountryResponses];

export type RetrieveCountryData = {
    body?: never;
    path: {
        /**
         * Country Code Alpha 2
         * A unique value identifying this Country.
         */
        alpha2: string;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/country/{alpha_2}';
};

export type RetrieveCountryResponses = {
    200: CountryDetail;
};

export type RetrieveCountryResponse = RetrieveCountryResponses[keyof RetrieveCountryResponses];

export type PartialUpdateCountryData = {
    body?: PatchedCountryWriteRequest;
    path: {
        /**
         * Country Code Alpha 2
         * A unique value identifying this Country.
         */
        alpha2: string;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/country/{alpha_2}';
};

export type PartialUpdateCountryResponses = {
    200: CountryDetail;
};

export type PartialUpdateCountryResponse = PartialUpdateCountryResponses[keyof PartialUpdateCountryResponses];

export type UpdateCountryData = {
    body: CountryWriteRequest;
    path: {
        /**
         * Country Code Alpha 2
         * A unique value identifying this Country.
         */
        alpha2: string;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/country/{alpha_2}';
};

export type UpdateCountryResponses = {
    200: CountryDetail;
};

export type UpdateCountryResponse = UpdateCountryResponses[keyof UpdateCountryResponses];

export type ApiV1HealthRetrieveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/health';
};

export type ApiV1HealthRetrieveResponses = {
    200: HealthCheckResponse;
};

export type ApiV1HealthRetrieveResponse = ApiV1HealthRetrieveResponses[keyof ApiV1HealthRetrieveResponses];

export type GetNotificationsByIdsData = {
    body: NotificationIdsRequest;
    path?: never;
    query?: {
        /**
         * Filter notifications by seen status. If false, returns only unseen notifications.
         */
        seen?: 'true' | 'false' | '1' | '0' | boolean;
    };
    url: '/api/v1/notification/ids';
};

export type GetNotificationsByIdsResponses = {
    200: Array<Notification>;
};

export type GetNotificationsByIdsResponse = GetNotificationsByIdsResponses[keyof GetNotificationsByIdsResponses];

export type ListNotificationUserData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Cursor for pagination
         */
        cursor?: string;
        /**
         * Filter notifications that have been seen (true) or not seen (false)
         */
        hasSeenAt?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter high priority notifications
         */
        highPriority?: 'true' | 'false' | '1' | '0' | boolean;
        id?: string | number;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        id_In?: string | Array<number>;
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Filter by notification ID
         */
        notification?: string | number;
        /**
         * Filter by notification category
         */
        notification_Category?: string;
        /**
         * Filter notifications expiring after this date
         */
        notification_ExpiresAfter?: string;
        /**
         * Filter notifications expiring before this date
         */
        notification_ExpiresBefore?: string;
        /**
         * Filter by notification expiry status
         */
        notification_IsExpired?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by notification kind
         */
        notification_Kind?: string;
        /**
         * Filter by notification link (case-insensitive)
         */
        notification_Link?: string;
        /**
         * Filter by notification message (case-insensitive)
         */
        notification_Message?: string;
        /**
         * Filter by notification priority
         */
        notification_Priority?: string;
        /**
         * Filter by notification title (case-insensitive)
         */
        notification_Title?: string;
        /**
         * Filter by notification type (case-insensitive)
         */
        notification_Type?: string;
        /**
         * Filter by multiple notification IDs (comma-separated)
         */
        notificationIds?: string;
        /**
         * Filter by notification kind
         */
        notificationKind?: string;
        /**
         * Which field to use when ordering the results. Available fields: id, -id, user, -user, user_Email, -user_Email, user_FirstName, -user_FirstName, user_LastName, -user_LastName, notification, -notification, notification_Kind, -notification_Kind, notification_Category, -notification_Category, notification_Priority, -notification_Priority, notification_CreatedAt, -notification_CreatedAt, seen, -seen, seenAt, -seenAt, createdAt, -createdAt, updatedAt, -updatedAt
         */
        ordering?: 'id' | '-id' | 'user' | '-user' | 'user_Email' | '-user_Email' | 'user_FirstName' | '-user_FirstName' | 'user_LastName' | '-user_LastName' | 'notification' | '-notification' | 'notification_Kind' | '-notification_Kind' | 'notification_Category' | '-notification_Category' | 'notification_Priority' | '-notification_Priority' | 'notification_CreatedAt' | '-notification_CreatedAt' | 'seen' | '-seen' | 'seenAt' | '-seenAt' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        /**
         * Filter notifications from the last 7 days
         */
        recentNotifications?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * A search term.
         */
        search?: string;
        /**
         * Filter by seen status
         */
        seen?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter notifications seen after this date
         */
        seenAfter?: string;
        seenAt_Date?: string;
        seenAt_Gte?: string;
        seenAt_Lte?: string;
        /**
         * Filter notifications seen before this date
         */
        seenBefore?: string;
        /**
         * Filter only seen notifications
         */
        seenOnly?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter only unseen notifications
         */
        unseenOnly?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        /**
         * Filter by user ID
         */
        user?: string | number;
        /**
         * Filter by user email (case-insensitive)
         */
        user_Email?: string;
        /**
         * Filter by user first name (case-insensitive)
         */
        user_FirstName?: string;
        /**
         * Filter by user active status
         */
        user_IsActive?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by user staff status
         */
        user_IsStaff?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by user last name (case-insensitive)
         */
        user_LastName?: string;
        /**
         * Filter by multiple user IDs (comma-separated)
         */
        userIds?: string;
        uuid?: string;
    };
    url: '/api/v1/notification/user';
};

export type ListNotificationUserResponses = {
    200: PaginatedNotificationUserList;
};

export type ListNotificationUserResponse = ListNotificationUserResponses[keyof ListNotificationUserResponses];

export type CreateNotificationUserData = {
    body: NotificationUserWriteRequest;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/notification/user';
};

export type CreateNotificationUserResponses = {
    201: NotificationUserDetail;
};

export type CreateNotificationUserResponse = CreateNotificationUserResponses[keyof CreateNotificationUserResponses];

export type DestroyNotificationUserData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/notification/user/{id}';
};

export type DestroyNotificationUserResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyNotificationUserResponse = DestroyNotificationUserResponses[keyof DestroyNotificationUserResponses];

export type RetrieveNotificationUserData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/notification/user/{id}';
};

export type RetrieveNotificationUserResponses = {
    200: NotificationUserDetail;
};

export type RetrieveNotificationUserResponse = RetrieveNotificationUserResponses[keyof RetrieveNotificationUserResponses];

export type PartialUpdateNotificationUserData = {
    body?: PatchedNotificationUserWriteRequest;
    path: {
        id: string;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/notification/user/{id}';
};

export type PartialUpdateNotificationUserResponses = {
    200: NotificationUserDetail;
};

export type PartialUpdateNotificationUserResponse = PartialUpdateNotificationUserResponses[keyof PartialUpdateNotificationUserResponses];

export type UpdateNotificationUserData = {
    body: NotificationUserWriteRequest;
    path: {
        id: string;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/notification/user/{id}';
};

export type UpdateNotificationUserResponses = {
    200: NotificationUserDetail;
};

export type UpdateNotificationUserResponse = UpdateNotificationUserResponses[keyof UpdateNotificationUserResponses];

export type MarkAllNotificationUsersAsSeenData = {
    body?: NotificationSuccessResponseRequest;
    path?: never;
    query?: never;
    url: '/api/v1/notification/user/mark_all_as_seen';
};

export type MarkAllNotificationUsersAsSeenErrors = {
    401: ErrorResponse;
};

export type MarkAllNotificationUsersAsSeenError = MarkAllNotificationUsersAsSeenErrors[keyof MarkAllNotificationUsersAsSeenErrors];

export type MarkAllNotificationUsersAsSeenResponses = {
    200: NotificationSuccessResponse;
};

export type MarkAllNotificationUsersAsSeenResponse = MarkAllNotificationUsersAsSeenResponses[keyof MarkAllNotificationUsersAsSeenResponses];

export type MarkAllNotificationUsersAsUnseenData = {
    body?: NotificationSuccessResponseRequest;
    path?: never;
    query?: never;
    url: '/api/v1/notification/user/mark_all_as_unseen';
};

export type MarkAllNotificationUsersAsUnseenErrors = {
    401: ErrorResponse;
};

export type MarkAllNotificationUsersAsUnseenError = MarkAllNotificationUsersAsUnseenErrors[keyof MarkAllNotificationUsersAsUnseenErrors];

export type MarkAllNotificationUsersAsUnseenResponses = {
    200: NotificationSuccessResponse;
};

export type MarkAllNotificationUsersAsUnseenResponse = MarkAllNotificationUsersAsUnseenResponses[keyof MarkAllNotificationUsersAsUnseenResponses];

export type MarkNotificationUsersAsSeenData = {
    body: NotificationUserActionRequest;
    path?: never;
    query?: never;
    url: '/api/v1/notification/user/mark_as_seen';
};

export type MarkNotificationUsersAsSeenErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
};

export type MarkNotificationUsersAsSeenError = MarkNotificationUsersAsSeenErrors[keyof MarkNotificationUsersAsSeenErrors];

export type MarkNotificationUsersAsSeenResponses = {
    200: NotificationSuccessResponse;
};

export type MarkNotificationUsersAsSeenResponse = MarkNotificationUsersAsSeenResponses[keyof MarkNotificationUsersAsSeenResponses];

export type MarkNotificationUsersAsUnseenData = {
    body: NotificationUserActionRequest;
    path?: never;
    query?: never;
    url: '/api/v1/notification/user/mark_as_unseen';
};

export type MarkNotificationUsersAsUnseenErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
};

export type MarkNotificationUsersAsUnseenError = MarkNotificationUsersAsUnseenErrors[keyof MarkNotificationUsersAsUnseenErrors];

export type MarkNotificationUsersAsUnseenResponses = {
    200: NotificationSuccessResponse;
};

export type MarkNotificationUsersAsUnseenResponse = MarkNotificationUsersAsUnseenResponses[keyof MarkNotificationUsersAsUnseenResponses];

export type GetNotificationUserUnseenCountData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/notification/user/unseen_count';
};

export type GetNotificationUserUnseenCountErrors = {
    401: ErrorResponse;
};

export type GetNotificationUserUnseenCountError = GetNotificationUserUnseenCountErrors[keyof GetNotificationUserUnseenCountErrors];

export type GetNotificationUserUnseenCountResponses = {
    200: NotificationCountResponse;
};

export type GetNotificationUserUnseenCountResponse = GetNotificationUserUnseenCountResponses[keyof GetNotificationUserUnseenCountResponses];

export type ListOrderData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter active orders (pending, processing, shipped, delivered)
         */
        activeOrders?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter orders that can be canceled
         */
        canBeCanceled?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by city (case-insensitive)
         */
        city?: string;
        city_Icontains?: string;
        /**
         * Filter by country code
         */
        country?: string;
        /**
         * Filter by country alpha-2 code
         */
        country_Alpha2?: string;
        /**
         * Filter by country name (case-insensitive)
         */
        country_Name?: string;
        /**
         * Filter by multiple country IDs (comma-separated)
         */
        countryIds?: string;
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Cursor for pagination
         */
        cursor?: string;
        customerNotes?: string;
        customerNotes_Icontains?: string;
        /**
         * Filter by document type
         */
        documentType?: string;
        /**
         * Filter by customer email (case-insensitive)
         */
        email?: string;
        email_Icontains?: string;
        /**
         * Filter final orders (completed, canceled, refunded)
         */
        finalOrders?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by customer first name (case-insensitive)
         */
        firstName?: string;
        firstName_Icontains?: string;
        /**
         * Filter by floor
         */
        floor?: string;
        /**
         * Filter orders that have/don't have customer notes
         */
        hasCustomerNotes?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter orders that have/don't have mobile phone
         */
        hasMobilePhone?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter orders that have/don't have payment ID
         */
        hasPaymentId?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter orders that have status update timestamp
         */
        hasStatusUpdatedAt?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter orders that have/don't have tracking number
         */
        hasTracking?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter orders that have/don't have a user
         */
        hasUser?: 'true' | 'false' | '1' | '0' | boolean;
        id?: string | number;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        id_In?: string | Array<number>;
        /**
         * Filter canceled orders
         */
        isCanceled?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter completed orders
         */
        isCompleted?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter paid/unpaid orders
         */
        isPaid?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Filter by customer last name (case-insensitive)
         */
        lastName?: string;
        lastName_Icontains?: string;
        /**
         * Filter by location type
         */
        locationType?: string;
        /**
         * Filter by mobile phone number
         */
        mobilePhone?: string;
        mobilePhone_Icontains?: string;
        /**
         * Filter orders that need processing
         */
        needsProcessing?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, status, -status, statusUpdatedAt, -statusUpdatedAt, paidAmount, -paidAmount, shippingPrice, -shippingPrice, paymentStatus, -paymentStatus, user_FirstName, -user_FirstName, user_LastName, -user_LastName
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'status' | '-status' | 'statusUpdatedAt' | '-statusUpdatedAt' | 'paidAmount' | '-paidAmount' | 'shippingPrice' | '-shippingPrice' | 'paymentStatus' | '-paymentStatus' | 'user_FirstName' | '-user_FirstName' | 'user_LastName' | '-user_LastName';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        paidAmount_Gte?: string | number;
        paidAmount_Lte?: string | number;
        /**
         * Filter by maximum paid amount
         */
        paidAmountMax?: string | number;
        /**
         * Filter by minimum paid amount
         */
        paidAmountMin?: string | number;
        /**
         * Filter by payment method ID
         */
        payWay?: string | number;
        /**
         * Filter by online payment methods
         */
        payWay_IsOnlinePayment?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by payment method name (case-insensitive)
         */
        payWay_Name?: string;
        /**
         * Filter by payment ID
         */
        paymentId?: string;
        paymentId_Icontains?: string;
        /**
         * Filter by payment method
         */
        paymentMethod?: string;
        paymentMethod_Icontains?: string;
        /**
         * Filter by payment status
         *
         * * `PENDING` - Pending
         * * `PROCESSING` - Processing
         * * `COMPLETED` - Completed
         * * `FAILED` - Failed
         * * `REFUNDED` - Refunded
         * * `PARTIALLY_REFUNDED` - Partially Refunded
         * * `CANCELED` - Canceled
         */
        paymentStatus?: 'CANCELED' | 'COMPLETED' | 'FAILED' | 'PARTIALLY_REFUNDED' | 'PENDING' | 'PROCESSING' | 'REFUNDED';
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        paymentStatus_In?: string | Array<string>;
        /**
         * Filter by phone number
         */
        phone?: string;
        phone_Icontains?: string;
        /**
         * Filter by place (case-insensitive)
         */
        place?: string;
        place_Icontains?: string;
        /**
         * Filter orders from the last 30 days
         */
        recentOrders?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by region code
         */
        region?: string;
        /**
         * Filter by region name (case-insensitive)
         */
        region_Name?: string;
        /**
         * A search term.
         */
        search?: string;
        /**
         * Filter by shipping carrier
         */
        shippingCarrier?: string;
        shippingCarrier_Icontains?: string;
        shippingPrice_Gte?: string | number;
        shippingPrice_Lte?: string | number;
        /**
         * Filter by maximum shipping price
         */
        shippingPriceMax?: string | number;
        /**
         * Filter by minimum shipping price
         */
        shippingPriceMin?: string | number;
        /**
         * Filter by order status
         *
         * * `PENDING` - Pending
         * * `PROCESSING` - Processing
         * * `SHIPPED` - Shipped
         * * `DELIVERED` - Delivered
         * * `COMPLETED` - Completed
         * * `CANCELED` - Canceled
         * * `RETURNED` - Returned
         * * `REFUNDED` - Refunded
         */
        status?: 'CANCELED' | 'COMPLETED' | 'DELIVERED' | 'PENDING' | 'PROCESSING' | 'REFUNDED' | 'RETURNED' | 'SHIPPED';
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        status_In?: string | Array<string>;
        /**
         * Filter by multiple statuses (comma-separated)
         */
        statusList?: string;
        /**
         * Filter orders with status updated after this date
         */
        statusUpdatedAfter?: string;
        statusUpdatedAt_Date?: string;
        statusUpdatedAt_Gte?: string;
        statusUpdatedAt_Lte?: string;
        /**
         * Filter orders with status updated before this date
         */
        statusUpdatedBefore?: string;
        /**
         * Filter by street (case-insensitive)
         */
        street?: string;
        street_Icontains?: string;
        /**
         * Filter by street number
         */
        streetNumber?: string;
        streetNumber_Icontains?: string;
        /**
         * Filter by tracking number
         */
        trackingNumber?: string;
        trackingNumber_Icontains?: string;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        /**
         * Filter by user ID
         */
        user?: string | number;
        /**
         * Filter by user email (case-insensitive)
         */
        user_Email?: string;
        /**
         * Filter by user first name (case-insensitive)
         */
        user_FirstName?: string;
        /**
         * Filter by user active status
         */
        user_IsActive?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by user last name (case-insensitive)
         */
        user_LastName?: string;
        /**
         * Filter by multiple user IDs (comma-separated)
         */
        userIds?: string;
        uuid?: string;
        /**
         * Filter by zipcode
         */
        zipcode?: string;
    };
    url: '/api/v1/order';
};

export type ListOrderResponses = {
    200: PaginatedOrderList;
};

export type ListOrderResponse = ListOrderResponses[keyof ListOrderResponses];

export type CreateOrderData = {
    body: OrderWriteRequest;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/order';
};

export type CreateOrderResponses = {
    201: OrderDetail;
};

export type CreateOrderResponse = CreateOrderResponses[keyof CreateOrderResponses];

export type ListOrderItemData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter bulk items (quantity > 5)
         */
        bulkItems?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Cursor for pagination
         */
        cursor?: string;
        /**
         * Filter items that have/don't have notes
         */
        hasNotes?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter items that have/don't have refunded quantity
         */
        hasRefundedQuantity?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter high value items (price > 100)
         */
        highValueItems?: 'true' | 'false' | '1' | '0' | boolean;
        id?: string | number;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        id_In?: string | Array<number>;
        /**
         * Filter fully refunded items
         */
        isFullyRefunded?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter partially refunded items
         */
        isPartiallyRefunded?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by refund status
         */
        isRefunded?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Filter by notes content (case-insensitive)
         */
        notes?: string;
        notes_Icontains?: string;
        /**
         * Filter by order ID
         */
        order?: string | number;
        /**
         * Filter by order country code
         */
        order_Country?: string;
        /**
         * Filter by order customer email (case-insensitive)
         */
        order_Email?: string;
        /**
         * Filter by order customer first name (case-insensitive)
         */
        order_FirstName?: string;
        /**
         * Filter by order customer last name (case-insensitive)
         */
        order_LastName?: string;
        /**
         * Filter by order payment status
         *
         * * `PENDING` - Pending
         * * `PROCESSING` - Processing
         * * `COMPLETED` - Completed
         * * `FAILED` - Failed
         * * `REFUNDED` - Refunded
         * * `PARTIALLY_REFUNDED` - Partially Refunded
         * * `CANCELED` - Canceled
         */
        order_PaymentStatus?: 'CANCELED' | 'COMPLETED' | 'FAILED' | 'PARTIALLY_REFUNDED' | 'PENDING' | 'PROCESSING' | 'REFUNDED';
        /**
         * Filter by order region code
         */
        order_Region?: string;
        /**
         * Filter by order status
         *
         * * `PENDING` - Pending
         * * `PROCESSING` - Processing
         * * `SHIPPED` - Shipped
         * * `DELIVERED` - Delivered
         * * `COMPLETED` - Completed
         * * `CANCELED` - Canceled
         * * `RETURNED` - Returned
         * * `REFUNDED` - Refunded
         */
        order_Status?: 'CANCELED' | 'COMPLETED' | 'DELIVERED' | 'PENDING' | 'PROCESSING' | 'REFUNDED' | 'RETURNED' | 'SHIPPED';
        /**
         * Filter by order user ID
         */
        order_User?: string | number;
        /**
         * Filter by order user email (case-insensitive)
         */
        order_User_Email?: string;
        /**
         * Filter by multiple order IDs (comma-separated)
         */
        orderIds?: string;
        /**
         * Filter by multiple order statuses (comma-separated)
         */
        orderStatuses?: string;
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, quantity, -quantity, price, -price, sortOrder, -sortOrder
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'quantity' | '-quantity' | 'price' | '-price' | 'sortOrder' | '-sortOrder';
        originalQuantity?: string | number;
        originalQuantity_Gte?: string | number;
        originalQuantity_Lte?: string | number;
        /**
         * Filter by maximum original quantity
         */
        originalQuantityMax?: string | number;
        /**
         * Filter by minimum original quantity
         */
        originalQuantityMin?: string | number;
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        price?: string | number;
        price_Gte?: string | number;
        price_Lte?: string | number;
        /**
         * Filter by exact price
         */
        priceExact?: string | number;
        /**
         * Filter by maximum price
         */
        priceMax?: string | number;
        /**
         * Filter by minimum price
         */
        priceMin?: string | number;
        /**
         * Filter by product ID
         */
        product?: string | number;
        /**
         * Filter by product active status
         */
        product_Active?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by product category ID
         */
        product_Category?: string | number;
        /**
         * Filter by product category name (case-insensitive)
         */
        product_Category_Name?: string;
        /**
         * Filter by product name (case-insensitive)
         */
        product_Name?: string;
        /**
         * Filter by product SKU
         */
        product_Sku?: string;
        /**
         * Filter by multiple product IDs (comma-separated)
         */
        productIds?: string;
        quantity?: string | number;
        quantity_Gte?: string | number;
        quantity_Lte?: string | number;
        /**
         * Filter by exact quantity
         */
        quantityExact?: string | number;
        /**
         * Filter by maximum quantity
         */
        quantityMax?: string | number;
        /**
         * Filter by minimum quantity
         */
        quantityMin?: string | number;
        /**
         * Filter items from the last 7 days
         */
        recentItems?: 'true' | 'false' | '1' | '0' | boolean;
        refundedQuantity?: string | number;
        refundedQuantity_Gte?: string | number;
        refundedQuantity_Lte?: string | number;
        /**
         * Filter by maximum refunded quantity
         */
        refundedQuantityMax?: string | number;
        /**
         * Filter by minimum refunded quantity
         */
        refundedQuantityMin?: string | number;
        /**
         * A search term.
         */
        search?: string;
        sortOrder?: string | number;
        sortOrder_Gte?: string | number;
        sortOrder_Lte?: string | number;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        uuid?: string;
    };
    url: '/api/v1/order-items';
};

export type ListOrderItemResponses = {
    200: PaginatedOrderItemList;
};

export type ListOrderItemResponse = ListOrderItemResponses[keyof ListOrderItemResponses];

export type CreateOrderItemData = {
    body: OrderItemWriteRequest;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/order-items';
};

export type CreateOrderItemResponses = {
    201: OrderItemDetail;
};

export type CreateOrderItemResponse = CreateOrderItemResponses[keyof CreateOrderItemResponses];

export type DestroyOrderItemData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/order-items/{id}';
};

export type DestroyOrderItemResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyOrderItemResponse = DestroyOrderItemResponses[keyof DestroyOrderItemResponses];

export type RetrieveOrderItemData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/order-items/{id}';
};

export type RetrieveOrderItemResponses = {
    200: OrderItemDetail;
};

export type RetrieveOrderItemResponse = RetrieveOrderItemResponses[keyof RetrieveOrderItemResponses];

export type PartialUpdateOrderItemData = {
    body?: PatchedOrderItemWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/order-items/{id}';
};

export type PartialUpdateOrderItemResponses = {
    200: OrderItemDetail;
};

export type PartialUpdateOrderItemResponse = PartialUpdateOrderItemResponses[keyof PartialUpdateOrderItemResponses];

export type UpdateOrderItemData = {
    body: OrderItemWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/order-items/{id}';
};

export type UpdateOrderItemResponses = {
    200: OrderItemDetail;
};

export type UpdateOrderItemResponse = UpdateOrderItemResponses[keyof UpdateOrderItemResponses];

export type RefundOrderItemData = {
    body?: OrderItemRefundRequest;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/order-items/{id}/refund';
};

export type RefundOrderItemErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type RefundOrderItemError = RefundOrderItemErrors[keyof RefundOrderItemErrors];

export type RefundOrderItemResponses = {
    200: OrderItemRefundResponse;
};

export type RefundOrderItemResponse = RefundOrderItemResponses[keyof RefundOrderItemResponses];

export type DestroyOrderData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/order/{id}';
};

export type DestroyOrderResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyOrderResponse = DestroyOrderResponses[keyof DestroyOrderResponses];

export type RetrieveOrderData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/order/{id}';
};

export type RetrieveOrderResponses = {
    200: OrderDetail;
};

export type RetrieveOrderResponse = RetrieveOrderResponses[keyof RetrieveOrderResponses];

export type PartialUpdateOrderData = {
    body?: PatchedOrderWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/order/{id}';
};

export type PartialUpdateOrderResponses = {
    200: OrderDetail;
};

export type PartialUpdateOrderResponse = PartialUpdateOrderResponses[keyof PartialUpdateOrderResponses];

export type UpdateOrderData = {
    body: OrderWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/order/{id}';
};

export type UpdateOrderResponses = {
    200: OrderDetail;
};

export type UpdateOrderResponse = UpdateOrderResponses[keyof UpdateOrderResponses];

export type AddOrderTrackingData = {
    body: AddTrackingRequest;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/order/{id}/add_tracking';
};

export type AddOrderTrackingErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    404: ErrorResponse;
};

export type AddOrderTrackingError = AddOrderTrackingErrors[keyof AddOrderTrackingErrors];

export type AddOrderTrackingResponses = {
    200: OrderDetail;
};

export type AddOrderTrackingResponse = AddOrderTrackingResponses[keyof AddOrderTrackingResponses];

export type CancelOrderData = {
    body?: CancelOrderRequestRequest;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/order/{id}/cancel';
};

export type CancelOrderErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    404: ErrorResponse;
};

export type CancelOrderError = CancelOrderErrors[keyof CancelOrderErrors];

export type CancelOrderResponses = {
    200: OrderDetail;
};

export type CancelOrderResponse = CancelOrderResponses[keyof CancelOrderResponses];

export type CreateOrderCheckoutSessionData = {
    body: CreateCheckoutSessionRequestRequest;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/order/{id}/create_checkout_session';
};

export type CreateOrderCheckoutSessionErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    404: ErrorResponse;
};

export type CreateOrderCheckoutSessionError = CreateOrderCheckoutSessionErrors[keyof CreateOrderCheckoutSessionErrors];

export type CreateOrderCheckoutSessionResponses = {
    200: CreateCheckoutSessionResponse;
};

export type CreateOrderCheckoutSessionResponse = CreateOrderCheckoutSessionResponses[keyof CreateOrderCheckoutSessionResponses];

export type CreateOrderPaymentIntentData = {
    body?: CreatePaymentIntentRequestRequest;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/order/{id}/create_payment_intent';
};

export type CreateOrderPaymentIntentErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    404: ErrorResponse;
};

export type CreateOrderPaymentIntentError = CreateOrderPaymentIntentErrors[keyof CreateOrderPaymentIntentErrors];

export type CreateOrderPaymentIntentResponses = {
    200: CreatePaymentIntentResponse;
};

export type CreateOrderPaymentIntentResponse = CreateOrderPaymentIntentResponses[keyof CreateOrderPaymentIntentResponses];

export type UpdateOrderStatusData = {
    body: UpdateStatusRequest;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/order/{id}/update_status';
};

export type UpdateOrderStatusErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    404: ErrorResponse;
};

export type UpdateOrderStatusError = UpdateOrderStatusErrors[keyof UpdateOrderStatusErrors];

export type UpdateOrderStatusResponses = {
    200: OrderDetail;
};

export type UpdateOrderStatusResponse = UpdateOrderStatusResponses[keyof UpdateOrderStatusResponses];

export type ListMyOrdersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter active orders (pending, processing, shipped, delivered)
         */
        activeOrders?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter orders that can be canceled
         */
        canBeCanceled?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by city (case-insensitive)
         */
        city?: string;
        city_Icontains?: string;
        /**
         * Filter by country code
         */
        country?: string;
        /**
         * Filter by country alpha-2 code
         */
        country_Alpha2?: string;
        /**
         * Filter by country name (case-insensitive)
         */
        country_Name?: string;
        /**
         * Filter by multiple country IDs (comma-separated)
         */
        countryIds?: string;
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        customerNotes?: string;
        customerNotes_Icontains?: string;
        /**
         * Filter by document type
         */
        documentType?: string;
        /**
         * Filter by customer email (case-insensitive)
         */
        email?: string;
        email_Icontains?: string;
        /**
         * Filter final orders (completed, canceled, refunded)
         */
        finalOrders?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by customer first name (case-insensitive)
         */
        firstName?: string;
        firstName_Icontains?: string;
        /**
         * Filter by floor
         */
        floor?: string;
        /**
         * Filter orders that have/don't have customer notes
         */
        hasCustomerNotes?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter orders that have/don't have mobile phone
         */
        hasMobilePhone?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter orders that have/don't have payment ID
         */
        hasPaymentId?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter orders that have status update timestamp
         */
        hasStatusUpdatedAt?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter orders that have/don't have tracking number
         */
        hasTracking?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter orders that have/don't have a user
         */
        hasUser?: 'true' | 'false' | '1' | '0' | boolean;
        id?: string | number;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        id_In?: string | Array<number>;
        /**
         * Filter canceled orders
         */
        isCanceled?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter completed orders
         */
        isCompleted?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter paid/unpaid orders
         */
        isPaid?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by customer last name (case-insensitive)
         */
        lastName?: string;
        lastName_Icontains?: string;
        /**
         * Filter by location type
         */
        locationType?: string;
        /**
         * Filter by mobile phone number
         */
        mobilePhone?: string;
        mobilePhone_Icontains?: string;
        /**
         * Filter orders that need processing
         */
        needsProcessing?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, status, -status, statusUpdatedAt, -statusUpdatedAt, paidAmount, -paidAmount, shippingPrice, -shippingPrice, paymentStatus, -paymentStatus, user_FirstName, -user_FirstName, user_LastName, -user_LastName
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'status' | '-status' | 'statusUpdatedAt' | '-statusUpdatedAt' | 'paidAmount' | '-paidAmount' | 'shippingPrice' | '-shippingPrice' | 'paymentStatus' | '-paymentStatus' | 'user_FirstName' | '-user_FirstName' | 'user_LastName' | '-user_LastName';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page.
         */
        pageSize?: string | number;
        paidAmount_Gte?: string | number;
        paidAmount_Lte?: string | number;
        /**
         * Filter by maximum paid amount
         */
        paidAmountMax?: string | number;
        /**
         * Filter by minimum paid amount
         */
        paidAmountMin?: string | number;
        /**
         * Filter by payment method ID
         */
        payWay?: string | number;
        /**
         * Filter by online payment methods
         */
        payWay_IsOnlinePayment?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by payment method name (case-insensitive)
         */
        payWay_Name?: string;
        /**
         * Filter by payment ID
         */
        paymentId?: string;
        paymentId_Icontains?: string;
        /**
         * Filter by payment method
         */
        paymentMethod?: string;
        paymentMethod_Icontains?: string;
        /**
         * Filter by payment status
         *
         * * `PENDING` - Pending
         * * `PROCESSING` - Processing
         * * `COMPLETED` - Completed
         * * `FAILED` - Failed
         * * `REFUNDED` - Refunded
         * * `PARTIALLY_REFUNDED` - Partially Refunded
         * * `CANCELED` - Canceled
         */
        paymentStatus?: 'CANCELED' | 'COMPLETED' | 'FAILED' | 'PARTIALLY_REFUNDED' | 'PENDING' | 'PROCESSING' | 'REFUNDED';
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        paymentStatus_In?: string | Array<string>;
        /**
         * Filter by phone number
         */
        phone?: string;
        phone_Icontains?: string;
        /**
         * Filter by place (case-insensitive)
         */
        place?: string;
        place_Icontains?: string;
        /**
         * Filter orders from the last 30 days
         */
        recentOrders?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by region code
         */
        region?: string;
        /**
         * Filter by region name (case-insensitive)
         */
        region_Name?: string;
        /**
         * A search term.
         */
        search?: string;
        /**
         * Filter by shipping carrier
         */
        shippingCarrier?: string;
        shippingCarrier_Icontains?: string;
        shippingPrice_Gte?: string | number;
        shippingPrice_Lte?: string | number;
        /**
         * Filter by maximum shipping price
         */
        shippingPriceMax?: string | number;
        /**
         * Filter by minimum shipping price
         */
        shippingPriceMin?: string | number;
        /**
         * Filter by order status
         *
         * * `PENDING` - Pending
         * * `PROCESSING` - Processing
         * * `SHIPPED` - Shipped
         * * `DELIVERED` - Delivered
         * * `COMPLETED` - Completed
         * * `CANCELED` - Canceled
         * * `RETURNED` - Returned
         * * `REFUNDED` - Refunded
         */
        status?: 'CANCELED' | 'COMPLETED' | 'DELIVERED' | 'PENDING' | 'PROCESSING' | 'REFUNDED' | 'RETURNED' | 'SHIPPED';
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        status_In?: string | Array<string>;
        /**
         * Filter by multiple statuses (comma-separated)
         */
        statusList?: string;
        /**
         * Filter orders with status updated after this date
         */
        statusUpdatedAfter?: string;
        statusUpdatedAt_Date?: string;
        statusUpdatedAt_Gte?: string;
        statusUpdatedAt_Lte?: string;
        /**
         * Filter orders with status updated before this date
         */
        statusUpdatedBefore?: string;
        /**
         * Filter by street (case-insensitive)
         */
        street?: string;
        street_Icontains?: string;
        /**
         * Filter by street number
         */
        streetNumber?: string;
        streetNumber_Icontains?: string;
        /**
         * Filter by tracking number
         */
        trackingNumber?: string;
        trackingNumber_Icontains?: string;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        /**
         * Filter by user ID
         */
        user?: string | number;
        /**
         * Filter by user email (case-insensitive)
         */
        user_Email?: string;
        /**
         * Filter by user first name (case-insensitive)
         */
        user_FirstName?: string;
        /**
         * Filter by user active status
         */
        user_IsActive?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by user last name (case-insensitive)
         */
        user_LastName?: string;
        /**
         * Filter by multiple user IDs (comma-separated)
         */
        userIds?: string;
        uuid?: string;
        /**
         * Filter by zipcode
         */
        zipcode?: string;
    };
    url: '/api/v1/order/my_orders';
};

export type ListMyOrdersErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    404: ErrorResponse;
};

export type ListMyOrdersError = ListMyOrdersErrors[keyof ListMyOrdersErrors];

export type ListMyOrdersResponses = {
    200: PaginatedOrderList;
};

export type ListMyOrdersResponse = ListMyOrdersResponses[keyof ListMyOrdersResponses];

export type RetrieveOrderByUuidData = {
    body?: never;
    path: {
        uuid: string;
    };
    query?: never;
    url: '/api/v1/order/uuid/{uuid}';
};

export type RetrieveOrderByUuidErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    404: ErrorResponse;
};

export type RetrieveOrderByUuidError = RetrieveOrderByUuidErrors[keyof RetrieveOrderByUuidErrors];

export type RetrieveOrderByUuidResponses = {
    200: OrderDetail;
};

export type RetrieveOrderByUuidResponse = RetrieveOrderByUuidResponses[keyof RetrieveOrderByUuidResponses];

export type ListPayWayData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by active status
         */
        active?: 'true' | 'false' | '1' | '0' | boolean;
        cost_Gte?: string | number;
        cost_Lte?: string | number;
        /**
         * Filter by maximum cost
         */
        costMax?: string | number;
        /**
         * Filter by minimum cost
         */
        costMin?: string | number;
        /**
         * Cursor for pagination
         */
        cursor?: string;
        /**
         * Filter by description (partial match)
         */
        description?: string;
        freeThreshold_Gte?: string | number;
        freeThreshold_Lte?: string | number;
        /**
         * Filter by maximum free threshold
         */
        freeThresholdMax?: string | number;
        /**
         * Filter by minimum free threshold
         */
        freeThresholdMin?: string | number;
        /**
         * Filter payment methods that have/don't have configuration
         */
        hasConfiguration?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter payment methods that have/don't have an icon
         */
        hasIcon?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by payment method ID
         */
        id?: string | number;
        /**
         * Filter by online payment status
         */
        isOnlinePayment?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Filter by name (partial match)
         */
        name?: string;
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, cost, -cost, freeThreshold, -freeThreshold, providerCode, -providerCode, isOnlinePayment, -isOnlinePayment, requiresConfirmation, -requiresConfirmation, sortOrder, -sortOrder
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'cost' | '-cost' | 'freeThreshold' | '-freeThreshold' | 'providerCode' | '-providerCode' | 'isOnlinePayment' | '-isOnlinePayment' | 'requiresConfirmation' | '-requiresConfirmation' | 'sortOrder' | '-sortOrder';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        /**
         * Filter by provider code (partial match)
         */
        providerCode?: string;
        providerCode_Icontains?: string;
        /**
         * Filter by confirmation requirement
         */
        requiresConfirmation?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * A search term.
         */
        search?: string;
        sortOrder?: string | number;
        sortOrder_Gte?: string | number;
        sortOrder_Lte?: string | number;
        uuid?: string;
    };
    url: '/api/v1/pay_way';
};

export type ListPayWayErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type ListPayWayError = ListPayWayErrors[keyof ListPayWayErrors];

export type ListPayWayResponses = {
    200: PaginatedPayWayList;
};

export type ListPayWayResponse = ListPayWayResponses[keyof ListPayWayResponses];

export type CreatePayWayData = {
    body: PayWayWriteRequest;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/pay_way';
};

export type CreatePayWayErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type CreatePayWayError = CreatePayWayErrors[keyof CreatePayWayErrors];

export type CreatePayWayResponses = {
    201: PayWayDetail;
};

export type CreatePayWayResponse = CreatePayWayResponses[keyof CreatePayWayResponses];

export type DestroyPayWayData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/pay_way/{id}';
};

export type DestroyPayWayErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type DestroyPayWayError = DestroyPayWayErrors[keyof DestroyPayWayErrors];

export type DestroyPayWayResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyPayWayResponse = DestroyPayWayResponses[keyof DestroyPayWayResponses];

export type RetrievePayWayData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/pay_way/{id}';
};

export type RetrievePayWayErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type RetrievePayWayError = RetrievePayWayErrors[keyof RetrievePayWayErrors];

export type RetrievePayWayResponses = {
    200: PayWayDetail;
};

export type RetrievePayWayResponse = RetrievePayWayResponses[keyof RetrievePayWayResponses];

export type PartialUpdatePayWayData = {
    body?: PatchedPayWayWriteRequest;
    path: {
        id: string;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/pay_way/{id}';
};

export type PartialUpdatePayWayErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type PartialUpdatePayWayError = PartialUpdatePayWayErrors[keyof PartialUpdatePayWayErrors];

export type PartialUpdatePayWayResponses = {
    200: PayWayDetail;
};

export type PartialUpdatePayWayResponse = PartialUpdatePayWayResponses[keyof PartialUpdatePayWayResponses];

export type UpdatePayWayData = {
    body: PayWayWriteRequest;
    path: {
        id: string;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/pay_way/{id}';
};

export type UpdatePayWayErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type UpdatePayWayError = UpdatePayWayErrors[keyof UpdatePayWayErrors];

export type UpdatePayWayResponses = {
    200: PayWayDetail;
};

export type UpdatePayWayResponse = UpdatePayWayResponses[keyof UpdatePayWayResponses];

export type ListProductData = {
    body?: never;
    path?: never;
    query?: {
        active?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by category ID (supports multiple IDs separated by underscore)
         */
        category?: string;
        /**
         * Filter by exact category ID
         */
        categoryId?: string | number;
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Cursor for pagination
         */
        cursor?: string;
        deletedAt_Date?: string;
        deletedAt_Gte?: string;
        deletedAt_Lte?: string;
        discountPercent?: string | number;
        discountPercent_Gte?: string | number;
        discountPercent_Lte?: string | number;
        /**
         * Filter products that have a discount
         */
        hasDiscount?: 'true' | 'false' | '1' | '0' | boolean;
        id?: string | number;
        /**
         * Filter products that are in stock (stock > 0)
         */
        inStock?: 'true' | 'false' | '1' | '0' | boolean;
        isDeleted?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Maximum discount value amount
         */
        maxDiscount?: string | number;
        /**
         * Maximum discount percentage
         */
        maxDiscountPercent?: string | number;
        /**
         * Maximum final price (after VAT and discount)
         */
        maxFinalPrice?: string | number;
        /**
         * Maximum likes count
         */
        maxLikes?: string | number;
        /**
         * Maximum price
         */
        maxPrice?: string | number;
        /**
         * Maximum review average rating
         */
        maxReviewAverage?: string | number;
        /**
         * Maximum stock quantity
         */
        maxStock?: string | number;
        /**
         * Maximum view count
         */
        maxViewCount?: string | number;
        /**
         * Maximum weight
         */
        maxWeight?: string | number;
        /**
         * Minimum discount value amount
         */
        minDiscount?: string | number;
        /**
         * Minimum discount percentage
         */
        minDiscountPercent?: string | number;
        /**
         * Minimum final price (after VAT and discount)
         */
        minFinalPrice?: string | number;
        /**
         * Minimum likes count
         */
        minLikes?: string | number;
        /**
         * Minimum price
         */
        minPrice?: string | number;
        /**
         * Minimum review average rating
         */
        minReviewAverage?: string | number;
        /**
         * Minimum stock quantity
         */
        minStock?: string | number;
        /**
         * Minimum view count
         */
        minViewCount?: string | number;
        /**
         * Minimum weight
         */
        minWeight?: string | number;
        /**
         * Which field to use when ordering the results. Available fields: price, -price, createdAt, -createdAt, active, -active, availabilityPriority, -availabilityPriority, viewCount, -viewCount, stock, -stock
         */
        ordering?: 'price' | '-price' | 'createdAt' | '-createdAt' | 'active' | '-active' | 'availabilityPriority' | '-availabilityPriority' | 'viewCount' | '-viewCount' | 'stock' | '-stock';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        price?: string | number;
        price_Gte?: string | number;
        price_Lte?: string | number;
        /**
         * A search term.
         */
        search?: string;
        sku?: string;
        sku_Icontains?: string;
        stock?: string | number;
        stock_Gte?: string | number;
        stock_Lte?: string | number;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        uuid?: string;
        viewCount?: string | number;
        viewCount_Gte?: string | number;
        viewCount_Lte?: string | number;
        weight?: string | number;
        weight_Gte?: string | number;
        weight_Lte?: string | number;
    };
    url: '/api/v1/product';
};

export type ListProductResponses = {
    200: PaginatedProductList;
};

export type ListProductResponse = ListProductResponses[keyof ListProductResponses];

export type CreateProductData = {
    body: ProductWriteRequest;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product';
};

export type CreateProductResponses = {
    201: ProductDetail;
};

export type CreateProductResponse = CreateProductResponses[keyof CreateProductResponses];

export type DestroyProductData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/product/{id}';
};

export type DestroyProductResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyProductResponse = DestroyProductResponses[keyof DestroyProductResponses];

export type RetrieveProductData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/{id}';
};

export type RetrieveProductResponses = {
    200: ProductDetail;
};

export type RetrieveProductResponse = RetrieveProductResponses[keyof RetrieveProductResponses];

export type PartialUpdateProductData = {
    body?: PatchedProductWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/{id}';
};

export type PartialUpdateProductResponses = {
    200: ProductDetail;
};

export type PartialUpdateProductResponse = PartialUpdateProductResponses[keyof PartialUpdateProductResponses];

export type UpdateProductData = {
    body: ProductWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/{id}';
};

export type UpdateProductResponses = {
    200: ProductDetail;
};

export type UpdateProductResponse = UpdateProductResponses[keyof UpdateProductResponses];

export type ListProductImagesData = {
    body?: never;
    path: {
        /**
         * Product ID
         */
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/{id}/images';
};

export type ListProductImagesErrors = {
    404: ErrorResponse;
};

export type ListProductImagesError = ListProductImagesErrors[keyof ListProductImagesErrors];

export type ListProductImagesResponses = {
    200: Array<ProductImage>;
};

export type ListProductImagesResponse = ListProductImagesResponses[keyof ListProductImagesResponses];

export type ListProductReviewsData = {
    body?: never;
    path: {
        /**
         * Product ID
         */
        id: string | number;
    };
    query?: {
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
    };
    url: '/api/v1/product/{id}/reviews';
};

export type ListProductReviewsErrors = {
    404: ErrorResponse;
};

export type ListProductReviewsError = ListProductReviewsErrors[keyof ListProductReviewsErrors];

export type ListProductReviewsResponses = {
    200: {
        links?: {
            next?: string | null;
            previous?: string | null;
        };
        count?: number;
        total_pages?: number;
        page_size?: number;
        page_total_results?: number;
        results?: Array<ProductReview>;
    };
};

export type ListProductReviewsResponse = ListProductReviewsResponses[keyof ListProductReviewsResponses];

export type ListProductTagsData = {
    body?: never;
    path: {
        /**
         * Product ID
         */
        id: string | number;
    };
    query?: never;
    url: '/api/v1/product/{id}/tags';
};

export type ListProductTagsErrors = {
    404: ErrorResponse;
};

export type ListProductTagsError = ListProductTagsErrors[keyof ListProductTagsErrors];

export type ListProductTagsResponses = {
    200: Array<Tag>;
};

export type ListProductTagsResponse = ListProductTagsResponses[keyof ListProductTagsResponses];

export type IncrementProductViewsData = {
    body: ProductDetailRequest;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/product/{id}/update_view_count';
};

export type IncrementProductViewsErrors = {
    404: ErrorResponse;
};

export type IncrementProductViewsError = IncrementProductViewsErrors[keyof IncrementProductViewsErrors];

export type IncrementProductViewsResponses = {
    200: ProductDetail;
};

export type IncrementProductViewsResponse = IncrementProductViewsResponses[keyof IncrementProductViewsResponses];

export type ListProductCategoryData = {
    body?: never;
    path?: never;
    query?: {
        active?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter ancestors of specified category ID
         */
        ancestorOf?: string | number;
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Cursor for pagination
         */
        cursor?: string;
        /**
         * Filter descendants of specified category ID
         */
        descendantOf?: string | number;
        /**
         * Filter categories that have children
         */
        hasChildren?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter categories that have products (recursive)
         */
        hasProducts?: 'true' | 'false' | '1' | '0' | boolean;
        id?: string | number;
        /**
         * Filter leaf categories (no children)
         */
        isLeaf?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter root categories (no parent)
         */
        isRoot?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Filter by hierarchy level (0 = root)
         */
        level?: string | number;
        level_Gte?: string | number;
        level_Lte?: string | number;
        /**
         * Maximum hierarchy level
         */
        maxLevel?: string | number;
        /**
         * Maximum number of products (recursive)
         */
        maxProductCount?: string | number;
        /**
         * Minimum hierarchy level
         */
        minLevel?: string | number;
        /**
         * Minimum number of products (recursive)
         */
        minProductCount?: string | number;
        /**
         * Which field to use when ordering the results. Available fields: id, -id, sortOrder, -sortOrder, level, -level, lft, -lft, rght, -rght, treeId, -treeId, createdAt, -createdAt, updatedAt, -updatedAt
         */
        ordering?: 'id' | '-id' | 'sortOrder' | '-sortOrder' | 'level' | '-level' | 'lft' | '-lft' | 'rght' | '-rght' | 'treeId' | '-treeId' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        /**
         * Filter by parent category ID
         */
        parent?: string | number;
        /**
         * Filter by parent category slug
         */
        parentSlug?: string;
        /**
         * A search term.
         */
        search?: string;
        /**
         * Filter siblings of specified category ID
         */
        siblingOf?: string | number;
        slug?: string;
        slug_Icontains?: string;
        /**
         * Filter by exact sort order
         */
        sortOrder?: string | number;
        /**
         * Maximum sort order
         */
        sortOrderMax?: string | number;
        /**
         * Minimum sort order
         */
        sortOrderMin?: string | number;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        uuid?: string;
    };
    url: '/api/v1/product/category';
};

export type ListProductCategoryResponses = {
    200: PaginatedProductCategoryList;
};

export type ListProductCategoryResponse = ListProductCategoryResponses[keyof ListProductCategoryResponses];

export type CreateProductCategoryData = {
    body: ProductCategoryWriteRequest;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/category';
};

export type CreateProductCategoryResponses = {
    201: ProductCategoryDetail;
};

export type CreateProductCategoryResponse = CreateProductCategoryResponses[keyof CreateProductCategoryResponses];

export type DestroyProductCategoryData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/product/category/{id}';
};

export type DestroyProductCategoryResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyProductCategoryResponse = DestroyProductCategoryResponses[keyof DestroyProductCategoryResponses];

export type RetrieveProductCategoryData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/category/{id}';
};

export type RetrieveProductCategoryResponses = {
    200: ProductCategoryDetail;
};

export type RetrieveProductCategoryResponse = RetrieveProductCategoryResponses[keyof RetrieveProductCategoryResponses];

export type PartialUpdateProductCategoryData = {
    body?: PatchedProductCategoryWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/category/{id}';
};

export type PartialUpdateProductCategoryResponses = {
    200: ProductCategoryDetail;
};

export type PartialUpdateProductCategoryResponse = PartialUpdateProductCategoryResponses[keyof PartialUpdateProductCategoryResponses];

export type UpdateProductCategoryData = {
    body: ProductCategoryWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/category/{id}';
};

export type UpdateProductCategoryResponses = {
    200: ProductCategoryDetail;
};

export type UpdateProductCategoryResponse = UpdateProductCategoryResponses[keyof UpdateProductCategoryResponses];

export type ListProductCategoryImageData = {
    body?: never;
    path?: never;
    query?: {
        active?: 'true' | 'false' | '1' | '0' | boolean;
        category?: string | number;
        /**
         * Cursor for pagination
         */
        cursor?: string;
        id?: string | number;
        /**
         * * `MAIN` - Main Image
         * * `BANNER` - Banner Image
         * * `ICON` - Icon Image
         * * `THUMBNAIL` - Thumbnail Image
         * * `GALLERY` - Gallery Image
         * * `BACKGROUND` - Background Image
         * * `HERO` - Hero Image
         * * `FEATURE` - Feature Image
         * * `PROMOTIONAL` - Promotional Image
         * * `SEASONAL` - Seasonal Image
         */
        imageType?: 'BACKGROUND' | 'BANNER' | 'FEATURE' | 'GALLERY' | 'HERO' | 'ICON' | 'MAIN' | 'PROMOTIONAL' | 'SEASONAL' | 'THUMBNAIL';
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Which field to use when ordering the results. Available fields: createdAt, -createdAt, imageType, -imageType, sortOrder, -sortOrder
         */
        ordering?: 'createdAt' | '-createdAt' | 'imageType' | '-imageType' | 'sortOrder' | '-sortOrder';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/api/v1/product/category/image';
};

export type ListProductCategoryImageResponses = {
    200: PaginatedProductCategoryImageList;
};

export type ListProductCategoryImageResponse = ListProductCategoryImageResponses[keyof ListProductCategoryImageResponses];

export type CreateProductCategoryImageData = {
    body: ProductCategoryImageWriteRequest;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/category/image';
};

export type CreateProductCategoryImageResponses = {
    201: ProductCategoryImageDetail;
};

export type CreateProductCategoryImageResponse = CreateProductCategoryImageResponses[keyof CreateProductCategoryImageResponses];

export type DestroyProductCategoryImageData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/product/category/image/{id}';
};

export type DestroyProductCategoryImageResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyProductCategoryImageResponse = DestroyProductCategoryImageResponses[keyof DestroyProductCategoryImageResponses];

export type RetrieveProductCategoryImageData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/category/image/{id}';
};

export type RetrieveProductCategoryImageResponses = {
    200: ProductCategoryImageDetail;
};

export type RetrieveProductCategoryImageResponse = RetrieveProductCategoryImageResponses[keyof RetrieveProductCategoryImageResponses];

export type PartialUpdateProductCategoryImageData = {
    body?: PatchedProductCategoryImageWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/category/image/{id}';
};

export type PartialUpdateProductCategoryImageResponses = {
    200: ProductCategoryImageDetail;
};

export type PartialUpdateProductCategoryImageResponse = PartialUpdateProductCategoryImageResponses[keyof PartialUpdateProductCategoryImageResponses];

export type UpdateProductCategoryImageData = {
    body: ProductCategoryImageWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/category/image/{id}';
};

export type UpdateProductCategoryImageResponses = {
    200: ProductCategoryImageDetail;
};

export type UpdateProductCategoryImageResponse = UpdateProductCategoryImageResponses[keyof UpdateProductCategoryImageResponses];

export type BulkUpdateProductCategoryImagesData = {
    body?: PatchedProductCategoryImageBulkUpdateRequest;
    path?: never;
    query?: never;
    url: '/api/v1/product/category/image/bulk_update';
};

export type BulkUpdateProductCategoryImagesErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
};

export type BulkUpdateProductCategoryImagesError = BulkUpdateProductCategoryImagesErrors[keyof BulkUpdateProductCategoryImagesErrors];

export type BulkUpdateProductCategoryImagesResponses = {
    200: ProductCategoryImageBulkResponse;
};

export type BulkUpdateProductCategoryImagesResponse = BulkUpdateProductCategoryImagesResponses[keyof BulkUpdateProductCategoryImagesResponses];

export type GetProductCategoryImagesByCategoryData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/product/category/image/by_category';
};

export type GetProductCategoryImagesByCategoryErrors = {
    404: ErrorResponse;
};

export type GetProductCategoryImagesByCategoryError = GetProductCategoryImagesByCategoryErrors[keyof GetProductCategoryImagesByCategoryErrors];

export type GetProductCategoryImagesByCategoryResponses = {
    200: Array<ProductCategoryImage>;
};

export type GetProductCategoryImagesByCategoryResponse = GetProductCategoryImagesByCategoryResponses[keyof GetProductCategoryImagesByCategoryResponses];

export type GetProductCategoryImagesByTypeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/product/category/image/by_type';
};

export type GetProductCategoryImagesByTypeResponses = {
    200: Array<ProductCategoryImage>;
};

export type GetProductCategoryImagesByTypeResponse = GetProductCategoryImagesByTypeResponses[keyof GetProductCategoryImagesByTypeResponses];

export type ListProductFavouriteData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Cursor for pagination
         */
        cursor?: string;
        id?: string | number;
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Which field to use when ordering the results. Available fields: id, -id, userId, -userId, productId, -productId, createdAt, -createdAt, updatedAt, -updatedAt
         */
        ordering?: 'id' | '-id' | 'userId' | '-userId' | 'productId' | '-productId' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        product?: string | number;
        productId?: string | number;
        /**
         * A search term.
         */
        search?: string;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        user?: string | number;
        userId?: string | number;
        uuid?: string;
    };
    url: '/api/v1/product/favourite';
};

export type ListProductFavouriteResponses = {
    200: PaginatedProductFavouriteList;
};

export type ListProductFavouriteResponse = ListProductFavouriteResponses[keyof ListProductFavouriteResponses];

export type CreateProductFavouriteData = {
    body: ProductFavouriteWriteRequest;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/favourite';
};

export type CreateProductFavouriteResponses = {
    201: ProductFavouriteWrite;
};

export type CreateProductFavouriteResponse = CreateProductFavouriteResponses[keyof CreateProductFavouriteResponses];

export type DestroyProductFavouriteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/product/favourite/{id}';
};

export type DestroyProductFavouriteResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyProductFavouriteResponse = DestroyProductFavouriteResponses[keyof DestroyProductFavouriteResponses];

export type RetrieveProductFavouriteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/favourite/{id}';
};

export type RetrieveProductFavouriteResponses = {
    200: ProductFavouriteDetail;
};

export type RetrieveProductFavouriteResponse = RetrieveProductFavouriteResponses[keyof RetrieveProductFavouriteResponses];

export type PartialUpdateProductFavouriteData = {
    body?: PatchedProductFavouriteWriteRequest;
    path: {
        id: string;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/favourite/{id}';
};

export type PartialUpdateProductFavouriteResponses = {
    200: ProductFavouriteWrite;
};

export type PartialUpdateProductFavouriteResponse = PartialUpdateProductFavouriteResponses[keyof PartialUpdateProductFavouriteResponses];

export type UpdateProductFavouriteData = {
    body: ProductFavouriteWriteRequest;
    path: {
        id: string;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/favourite/{id}';
};

export type UpdateProductFavouriteResponses = {
    200: ProductFavouriteWrite;
};

export type UpdateProductFavouriteResponse = UpdateProductFavouriteResponses[keyof UpdateProductFavouriteResponses];

export type GetProductFavouriteProductData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/product/favourite/{id}/product';
};

export type GetProductFavouriteProductResponses = {
    200: ProductDetailResponse;
};

export type GetProductFavouriteProductResponse = GetProductFavouriteProductResponses[keyof GetProductFavouriteProductResponses];

export type GetProductFavouritesByProductsData = {
    body: ProductFavouriteByProductsRequestRequest;
    path?: never;
    query?: never;
    url: '/api/v1/product/favourite/favourites_by_products';
};

export type GetProductFavouritesByProductsErrors = {
    404: ErrorResponse;
};

export type GetProductFavouritesByProductsError = GetProductFavouritesByProductsErrors[keyof GetProductFavouritesByProductsErrors];

export type GetProductFavouritesByProductsResponses = {
    200: Array<{
        id: number;
        userId: number;
        productId: number;
        createdAt: string;
    }>;
};

export type GetProductFavouritesByProductsResponse = GetProductFavouritesByProductsResponses[keyof GetProductFavouritesByProductsResponses];

export type ListProductImageData = {
    body?: never;
    path?: never;
    query?: {
        createdAt?: string;
        /**
         * Cursor for pagination
         */
        cursor?: string;
        id?: string | number;
        isMain?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, isMain, -isMain, sortOrder, -sortOrder
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'isMain' | '-isMain' | 'sortOrder' | '-sortOrder';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        product?: string | number;
        /**
         * A search term.
         */
        search?: string;
        sortOrder?: string | number;
        updatedAt?: string;
    };
    url: '/api/v1/product/image';
};

export type ListProductImageResponses = {
    200: PaginatedProductImageList;
};

export type ListProductImageResponse = ListProductImageResponses[keyof ListProductImageResponses];

export type CreateProductImageData = {
    body: ProductImageWriteRequest;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/image';
};

export type CreateProductImageResponses = {
    201: ProductImageDetail;
};

export type CreateProductImageResponse = CreateProductImageResponses[keyof CreateProductImageResponses];

export type DestroyProductImageData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/product/image/{id}';
};

export type DestroyProductImageResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyProductImageResponse = DestroyProductImageResponses[keyof DestroyProductImageResponses];

export type RetrieveProductImageData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/image/{id}';
};

export type RetrieveProductImageResponses = {
    200: ProductImageDetail;
};

export type RetrieveProductImageResponse = RetrieveProductImageResponses[keyof RetrieveProductImageResponses];

export type PartialUpdateProductImageData = {
    body?: PatchedProductImageWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/image/{id}';
};

export type PartialUpdateProductImageResponses = {
    200: ProductImageDetail;
};

export type PartialUpdateProductImageResponse = PartialUpdateProductImageResponses[keyof PartialUpdateProductImageResponses];

export type UpdateProductImageData = {
    body: ProductImageWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/image/{id}';
};

export type UpdateProductImageResponses = {
    200: ProductImageDetail;
};

export type UpdateProductImageResponse = UpdateProductImageResponses[keyof UpdateProductImageResponses];

export type ListProductReviewData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by comment content (partial match)
         */
        comment?: string;
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Filter items that are currently published (published_at <= now and is_published=True)
         */
        currentlyPublished?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Cursor for pagination
         */
        cursor?: string;
        /**
         * Filter reviews that have/don't have comments
         */
        hasComment?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by minimum helpful votes (if voting system exists)
         */
        helpfulVotesMin?: string | number;
        /**
         * Filter by review ID
         */
        id?: string | number;
        /**
         * Filter by published status
         */
        isPublished?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Filter by maximum rating (alias)
         */
        maxRate?: string | number;
        /**
         * Filter by minimum rating (alias)
         */
        minRate?: string | number;
        /**
         * Which field to use when ordering the results. Available fields: id, -id, userId, -userId, productId, -productId, rate, -rate, status, -status, isPublished, -isPublished, createdAt, -createdAt, updatedAt, -updatedAt, publishedAt, -publishedAt
         */
        ordering?: 'id' | '-id' | 'userId' | '-userId' | 'productId' | '-productId' | 'rate' | '-rate' | 'status' | '-status' | 'isPublished' | '-isPublished' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'publishedAt' | '-publishedAt';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        /**
         * Filter by product ID
         */
        product?: string | number;
        /**
         * Filter by product active status
         */
        productActive?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter products with maximum average rating
         */
        productAvgRatingMax?: string | number;
        /**
         * Filter products with minimum average rating
         */
        productAvgRatingMin?: string | number;
        /**
         * Filter by product category ID
         */
        productCategory?: string | number;
        /**
         * Filter by product ID
         */
        productId?: string | number;
        /**
         * Filter by product name (partial match)
         */
        productName?: string;
        /**
         * Filter items published after this date
         */
        publishedAfter?: string;
        publishedAt_Date?: string;
        publishedAt_Gte?: string;
        publishedAt_Lte?: string;
        /**
         * Filter items published before this date
         */
        publishedBefore?: string;
        /**
         * Filter reviews published in the last N days
         */
        publishedRecentDays?: string | number;
        /**
         * Filter by exact rating
         *
         * * `1` - One
         * * `2` - Two
         * * `3` - Three
         * * `4` - Four
         * * `5` - Five
         * * `6` - Six
         * * `7` - Seven
         * * `8` - Eight
         * * `9` - Nine
         * * `10` - Ten
         */
        rate?: string | number;
        rate_Gte?: string | number;
        rate_Lte?: string | number;
        /**
         * Filter by maximum rating
         */
        rateMax?: string | number;
        /**
         * Filter by minimum rating
         */
        rateMin?: string | number;
        /**
         * Filter reviews from the last N days
         */
        recentDays?: string | number;
        /**
         * A search term.
         */
        search?: string;
        /**
         * Filter by review status
         *
         * * `NEW` - New
         * * `TRUE` - True
         * * `FALSE` - False
         */
        status?: 'FALSE' | 'NEW' | 'TRUE';
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        /**
         * Filter by user ID
         */
        user?: string | number;
        /**
         * Filter by user email (partial match)
         */
        userEmail?: string;
        /**
         * Filter by user first name (partial match)
         */
        userFirstName?: string;
        /**
         * Filter by user ID
         */
        userId?: string | number;
        /**
         * Filter by user last name (partial match)
         */
        userLastName?: string;
        /**
         * Filter users with minimum number of reviews
         */
        userReviewCountMin?: string | number;
        uuid?: string;
        /**
         * Filter reviews from verified purchases (if order system exists)
         */
        verifiedPurchase?: 'true' | 'false' | '1' | '0' | boolean;
    };
    url: '/api/v1/product/review';
};

export type ListProductReviewErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type ListProductReviewError = ListProductReviewErrors[keyof ListProductReviewErrors];

export type ListProductReviewResponses = {
    200: PaginatedProductReviewList;
};

export type ListProductReviewResponse = ListProductReviewResponses[keyof ListProductReviewResponses];

export type CreateProductReviewData = {
    body: ProductReviewWriteRequest;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/review';
};

export type CreateProductReviewErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type CreateProductReviewError = CreateProductReviewErrors[keyof CreateProductReviewErrors];

export type CreateProductReviewResponses = {
    201: ProductReviewDetail;
};

export type CreateProductReviewResponse = CreateProductReviewResponses[keyof CreateProductReviewResponses];

export type DestroyProductReviewData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/product/review/{id}';
};

export type DestroyProductReviewErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type DestroyProductReviewError = DestroyProductReviewErrors[keyof DestroyProductReviewErrors];

export type DestroyProductReviewResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyProductReviewResponse = DestroyProductReviewResponses[keyof DestroyProductReviewResponses];

export type RetrieveProductReviewData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/review/{id}';
};

export type RetrieveProductReviewErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type RetrieveProductReviewError = RetrieveProductReviewErrors[keyof RetrieveProductReviewErrors];

export type RetrieveProductReviewResponses = {
    200: ProductReviewDetail;
};

export type RetrieveProductReviewResponse = RetrieveProductReviewResponses[keyof RetrieveProductReviewResponses];

export type PartialUpdateProductReviewData = {
    body?: PatchedProductReviewWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/review/{id}';
};

export type PartialUpdateProductReviewErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type PartialUpdateProductReviewError = PartialUpdateProductReviewErrors[keyof PartialUpdateProductReviewErrors];

export type PartialUpdateProductReviewResponses = {
    200: ProductReviewDetail;
};

export type PartialUpdateProductReviewResponse = PartialUpdateProductReviewResponses[keyof PartialUpdateProductReviewResponses];

export type UpdateProductReviewData = {
    body: ProductReviewWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/product/review/{id}';
};

export type UpdateProductReviewErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type UpdateProductReviewError = UpdateProductReviewErrors[keyof UpdateProductReviewErrors];

export type UpdateProductReviewResponses = {
    200: ProductReviewDetail;
};

export type UpdateProductReviewResponse = UpdateProductReviewResponses[keyof UpdateProductReviewResponses];

export type GetProductReviewProductData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/product/review/{id}/product';
};

export type GetProductReviewProductErrors = {
    404: ErrorResponse;
};

export type GetProductReviewProductError = GetProductReviewProductErrors[keyof GetProductReviewProductErrors];

export type GetProductReviewProductResponses = {
    200: Product;
};

export type GetProductReviewProductResponse = GetProductReviewProductResponses[keyof GetProductReviewProductResponses];

export type GetUserProductReviewData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/product/review/{id}/user_product_review';
};

export type GetUserProductReviewErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    404: ErrorResponse;
};

export type GetUserProductReviewError = GetUserProductReviewErrors[keyof GetUserProductReviewErrors];

export type GetUserProductReviewResponses = {
    200: ProductReviewDetail;
};

export type GetUserProductReviewResponse = GetUserProductReviewResponses[keyof GetUserProductReviewResponses];

export type ListRegionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by region alpha code (partial match)
         */
        alpha?: string;
        alpha_Icontains?: string;
        /**
         * Filter by exact region alpha code
         */
        alphaExact?: string;
        /**
         * Filter by country alpha-2 code
         */
        country?: string;
        /**
         * Filter by country name (partial match)
         */
        countryName?: string;
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Cursor for pagination
         */
        cursor?: string;
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Filter by region name (partial match)
         */
        name?: string;
        /**
         * Which field to use when ordering the results. Available fields: createdAt, -createdAt, alpha, -alpha, sortOrder, -sortOrder
         */
        ordering?: 'createdAt' | '-createdAt' | 'alpha' | '-alpha' | 'sortOrder' | '-sortOrder';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        /**
         * A search term.
         */
        search?: string;
        sortOrder?: string | number;
        sortOrder_Gte?: string | number;
        sortOrder_Lte?: string | number;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        uuid?: string;
    };
    url: '/api/v1/region';
};

export type ListRegionErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type ListRegionError = ListRegionErrors[keyof ListRegionErrors];

export type ListRegionResponses = {
    200: PaginatedRegionList;
};

export type ListRegionResponse = ListRegionResponses[keyof ListRegionResponses];

export type CreateRegionData = {
    body: RegionWriteRequest;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/region';
};

export type CreateRegionErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type CreateRegionError = CreateRegionErrors[keyof CreateRegionErrors];

export type CreateRegionResponses = {
    201: RegionDetail;
};

export type CreateRegionResponse = CreateRegionResponses[keyof CreateRegionResponses];

export type DestroyRegionData = {
    body?: never;
    path: {
        /**
         * Region Code
         * A unique value identifying this Region.
         */
        alpha: string;
    };
    query?: never;
    url: '/api/v1/region/{alpha}';
};

export type DestroyRegionErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type DestroyRegionError = DestroyRegionErrors[keyof DestroyRegionErrors];

export type DestroyRegionResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyRegionResponse = DestroyRegionResponses[keyof DestroyRegionResponses];

export type RetrieveRegionData = {
    body?: never;
    path: {
        /**
         * Region Code
         * A unique value identifying this Region.
         */
        alpha: string;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/region/{alpha}';
};

export type RetrieveRegionErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type RetrieveRegionError = RetrieveRegionErrors[keyof RetrieveRegionErrors];

export type RetrieveRegionResponses = {
    200: RegionDetail;
};

export type RetrieveRegionResponse = RetrieveRegionResponses[keyof RetrieveRegionResponses];

export type PartialUpdateRegionData = {
    body?: PatchedRegionWriteRequest;
    path: {
        /**
         * Region Code
         * A unique value identifying this Region.
         */
        alpha: string;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/region/{alpha}';
};

export type PartialUpdateRegionErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type PartialUpdateRegionError = PartialUpdateRegionErrors[keyof PartialUpdateRegionErrors];

export type PartialUpdateRegionResponses = {
    200: RegionDetail;
};

export type PartialUpdateRegionResponse = PartialUpdateRegionResponses[keyof PartialUpdateRegionResponses];

export type UpdateRegionData = {
    body: RegionWriteRequest;
    path: {
        /**
         * Region Code
         * A unique value identifying this Region.
         */
        alpha: string;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/region/{alpha}';
};

export type UpdateRegionErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type UpdateRegionError = UpdateRegionErrors[keyof UpdateRegionErrors];

export type UpdateRegionResponses = {
    200: RegionDetail;
};

export type UpdateRegionResponse = UpdateRegionResponses[keyof UpdateRegionResponses];

export type ListRegionsByCountryData = {
    body?: never;
    path: {
        /**
         * Region Code
         * A unique value identifying this Region.
         */
        alpha: string;
    };
    query?: {
        /**
         * Filter by region alpha code (partial match)
         */
        alpha?: string;
        alpha_Icontains?: string;
        /**
         * Filter by exact region alpha code
         */
        alphaExact?: string;
        /**
         * Filter by country alpha-2 code
         */
        country?: string;
        /**
         * Filter by country name (partial match)
         */
        countryName?: string;
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Filter by region name (partial match)
         */
        name?: string;
        /**
         * Which field to use when ordering the results. Available fields: createdAt, -createdAt, alpha, -alpha, sortOrder, -sortOrder
         */
        ordering?: 'createdAt' | '-createdAt' | 'alpha' | '-alpha' | 'sortOrder' | '-sortOrder';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page.
         */
        pageSize?: string | number;
        /**
         * A search term.
         */
        search?: string;
        sortOrder?: string | number;
        sortOrder_Gte?: string | number;
        sortOrder_Lte?: string | number;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        uuid?: string;
    };
    url: '/api/v1/region/{alpha}/get_regions_by_country_alpha_2';
};

export type ListRegionsByCountryErrors = {
    404: ErrorResponse;
};

export type ListRegionsByCountryError = ListRegionsByCountryErrors[keyof ListRegionsByCountryErrors];

export type ListRegionsByCountryResponses = {
    200: PaginatedRegionList;
};

export type ListRegionsByCountryResponse = ListRegionsByCountryResponses[keyof ListRegionsByCountryResponses];

export type ApiV1SearchBlogPostRetrieveData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Language code to filter results (e.g., 'en', 'el', 'de'). If not provided, searches all languages.
         */
        languageCode?: string;
        /**
         * Maximum number of results to return
         */
        limit?: string | number;
        /**
         * Number of results to skip
         */
        offset?: string | number;
        /**
         * Search query string
         */
        query: string;
    };
    url: '/api/v1/search/blog/post';
};

export type ApiV1SearchBlogPostRetrieveErrors = {
    400: ErrorResponse;
};

export type ApiV1SearchBlogPostRetrieveError = ApiV1SearchBlogPostRetrieveErrors[keyof ApiV1SearchBlogPostRetrieveErrors];

export type ApiV1SearchBlogPostRetrieveResponses = {
    200: BlogPostMeiliSearchResponse;
};

export type ApiV1SearchBlogPostRetrieveResponse = ApiV1SearchBlogPostRetrieveResponses[keyof ApiV1SearchBlogPostRetrieveResponses];

export type ApiV1SearchProductRetrieveData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Language code to filter results (e.g., 'en', 'el', 'de'). If not provided, searches all languages.
         */
        languageCode?: string;
        /**
         * Maximum number of results to return
         */
        limit?: string | number;
        /**
         * Number of results to skip
         */
        offset?: string | number;
        /**
         * Search query string
         */
        query: string;
    };
    url: '/api/v1/search/product';
};

export type ApiV1SearchProductRetrieveErrors = {
    400: ErrorResponse;
};

export type ApiV1SearchProductRetrieveError = ApiV1SearchProductRetrieveErrors[keyof ApiV1SearchProductRetrieveErrors];

export type ApiV1SearchProductRetrieveResponses = {
    200: ProductMeiliSearchResponse;
};

export type ApiV1SearchProductRetrieveResponse = ApiV1SearchProductRetrieveResponses[keyof ApiV1SearchProductRetrieveResponses];

export type ApiV1SearchSuggestionsRetrieveData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Language code to filter results (e.g., 'en', 'el', 'de'). If not provided, searches all languages.
         */
        languageCode?: string;
        /**
         * Maximum number of suggestions to return
         */
        limit?: string | number;
        /**
         * Partial search query string
         */
        query: string;
    };
    url: '/api/v1/search/suggestions';
};

export type ApiV1SearchSuggestionsRetrieveErrors = {
    400: ErrorResponse;
};

export type ApiV1SearchSuggestionsRetrieveError = ApiV1SearchSuggestionsRetrieveErrors[keyof ApiV1SearchSuggestionsRetrieveErrors];

export type ApiV1SearchSuggestionsRetrieveResponses = {
    200: SearchSuggestionResponse;
};

export type ApiV1SearchSuggestionsRetrieveResponse = ApiV1SearchSuggestionsRetrieveResponses[keyof ApiV1SearchSuggestionsRetrieveResponses];

export type ListTagData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by active status
         */
        active?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter tags used for specific content type
         */
        contentType?: string;
        /**
         * Filter tags used for content from specific app
         */
        contentType_AppLabel?: string;
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Cursor for pagination
         */
        cursor?: string;
        /**
         * Filter tags that have/don't have a label
         */
        hasLabel?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter tags that are/aren't used
         */
        hasUsage?: 'true' | 'false' | '1' | '0' | boolean;
        id?: string | number;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        id_In?: string | Array<number>;
        /**
         * Filter by tag label (partial match)
         */
        label?: string;
        /**
         * Filter by exact tag label
         */
        label_Exact?: string;
        /**
         * Filter tags with labels starting with
         */
        label_Startswith?: string;
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Filter tags used at most X times
         */
        maxUsageCount?: string | number;
        /**
         * Filter tags used at least X times
         */
        minUsageCount?: string | number;
        /**
         * Order tags by usage count (most used first)
         */
        mostUsed?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter tags used for specific object ID
         */
        objectId?: string | number;
        /**
         * Which field to use when ordering the results. Available fields: id, -id, active, -active, createdAt, -createdAt, updatedAt, -updatedAt, sortOrder, -sortOrder, translations_Label, -translations_Label
         */
        ordering?: 'id' | '-id' | 'active' | '-active' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'sortOrder' | '-sortOrder' | 'translations_Label' | '-translations_Label';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        /**
         * A search term.
         */
        search?: string;
        sortOrder?: string | number;
        sortOrder_Gte?: string | number;
        sortOrder_Lte?: string | number;
        translations_Label?: string;
        translations_Label_Icontains?: string;
        translations_Label_Istartswith?: string;
        /**
         * Filter tags not used anywhere
         */
        unused?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        uuid?: string;
    };
    url: '/api/v1/tag';
};

export type ListTagErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type ListTagError = ListTagErrors[keyof ListTagErrors];

export type ListTagResponses = {
    200: PaginatedTagList;
};

export type ListTagResponse = ListTagResponses[keyof ListTagResponses];

export type CreateTagData = {
    body: TagWriteRequest;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/tag';
};

export type CreateTagErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type CreateTagError = CreateTagErrors[keyof CreateTagErrors];

export type CreateTagResponses = {
    201: TagDetail;
};

export type CreateTagResponse = CreateTagResponses[keyof CreateTagResponses];

export type DestroyTagData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/tag/{id}';
};

export type DestroyTagErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type DestroyTagError = DestroyTagErrors[keyof DestroyTagErrors];

export type DestroyTagResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyTagResponse = DestroyTagResponses[keyof DestroyTagResponses];

export type RetrieveTagData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/tag/{id}';
};

export type RetrieveTagErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type RetrieveTagError = RetrieveTagErrors[keyof RetrieveTagErrors];

export type RetrieveTagResponses = {
    200: TagDetail;
};

export type RetrieveTagResponse = RetrieveTagResponses[keyof RetrieveTagResponses];

export type PartialUpdateTagData = {
    body?: PatchedTagWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/tag/{id}';
};

export type PartialUpdateTagErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type PartialUpdateTagError = PartialUpdateTagErrors[keyof PartialUpdateTagErrors];

export type PartialUpdateTagResponses = {
    200: TagDetail;
};

export type PartialUpdateTagResponse = PartialUpdateTagResponses[keyof PartialUpdateTagResponses];

export type UpdateTagData = {
    body: TagWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/tag/{id}';
};

export type UpdateTagErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type UpdateTagError = UpdateTagErrors[keyof UpdateTagErrors];

export type UpdateTagResponses = {
    200: TagDetail;
};

export type UpdateTagResponse = UpdateTagResponses[keyof UpdateTagResponses];

export type ListTaggedItemData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by content type model name
         */
        contentType?: string;
        /**
         * Filter by content type app label
         */
        contentType_AppLabel?: string;
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Cursor for pagination
         */
        cursor?: string;
        id?: string | number;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        id_In?: string | Array<number>;
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Filter by object ID
         */
        objectId?: string | number;
        /**
         * Filter by multiple object IDs (comma-separated)
         */
        objectId_In?: string | Array<number>;
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, objectId, -objectId, tag_Translations_Label, -tag_Translations_Label
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'objectId' | '-objectId' | 'tag_Translations_Label' | '-tag_Translations_Label';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        /**
         * A search term.
         */
        search?: string;
        /**
         * Filter by specific tag ID
         */
        tag?: string | number;
        /**
         * Filter by tag active status
         */
        tag_Active?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by tag label (partial match)
         */
        tag_Label?: string;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        uuid?: string;
    };
    url: '/api/v1/tagged-item';
};

export type ListTaggedItemErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type ListTaggedItemError = ListTaggedItemErrors[keyof ListTaggedItemErrors];

export type ListTaggedItemResponses = {
    200: PaginatedTaggedItemList;
};

export type ListTaggedItemResponse = ListTaggedItemResponses[keyof ListTaggedItemResponses];

export type CreateTaggedItemData = {
    body: TaggedItemWriteRequestWritable;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/tagged-item';
};

export type CreateTaggedItemErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type CreateTaggedItemError = CreateTaggedItemErrors[keyof CreateTaggedItemErrors];

export type CreateTaggedItemResponses = {
    201: TaggedItemDetail;
};

export type CreateTaggedItemResponse = CreateTaggedItemResponses[keyof CreateTaggedItemResponses];

export type DestroyTaggedItemData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/tagged-item/{id}';
};

export type DestroyTaggedItemErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type DestroyTaggedItemError = DestroyTaggedItemErrors[keyof DestroyTaggedItemErrors];

export type DestroyTaggedItemResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyTaggedItemResponse = DestroyTaggedItemResponses[keyof DestroyTaggedItemResponses];

export type RetrieveTaggedItemData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/tagged-item/{id}';
};

export type RetrieveTaggedItemErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type RetrieveTaggedItemError = RetrieveTaggedItemErrors[keyof RetrieveTaggedItemErrors];

export type RetrieveTaggedItemResponses = {
    200: TaggedItemDetail;
};

export type RetrieveTaggedItemResponse = RetrieveTaggedItemResponses[keyof RetrieveTaggedItemResponses];

export type PartialUpdateTaggedItemData = {
    body?: PatchedTaggedItemWriteRequestWritable;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/tagged-item/{id}';
};

export type PartialUpdateTaggedItemErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type PartialUpdateTaggedItemError = PartialUpdateTaggedItemErrors[keyof PartialUpdateTaggedItemErrors];

export type PartialUpdateTaggedItemResponses = {
    200: TaggedItemDetail;
};

export type PartialUpdateTaggedItemResponse = PartialUpdateTaggedItemResponses[keyof PartialUpdateTaggedItemResponses];

export type UpdateTaggedItemData = {
    body: TaggedItemWriteRequestWritable;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/tagged-item/{id}';
};

export type UpdateTaggedItemErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type UpdateTaggedItemError = UpdateTaggedItemErrors[keyof UpdateTaggedItemErrors];

export type UpdateTaggedItemResponses = {
    200: TaggedItemDetail;
};

export type UpdateTaggedItemResponse = UpdateTaggedItemResponses[keyof UpdateTaggedItemResponses];

export type ListUserAccountData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Cursor for pagination
         */
        cursor?: string;
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Which field to use when ordering the results. Available fields: id, -id, email, -email, username, -username, createdAt, -createdAt, updatedAt, -updatedAt
         */
        ordering?: 'id' | '-id' | 'email' | '-email' | 'username' | '-username' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/api/v1/user/account';
};

export type ListUserAccountErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type ListUserAccountError = ListUserAccountErrors[keyof ListUserAccountErrors];

export type ListUserAccountResponses = {
    200: PaginatedUserDetailsList;
};

export type ListUserAccountResponse = ListUserAccountResponses[keyof ListUserAccountResponses];

export type CreateUserAccountData = {
    body: UserWriteRequest;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/user/account';
};

export type CreateUserAccountErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type CreateUserAccountError = CreateUserAccountErrors[keyof CreateUserAccountErrors];

export type CreateUserAccountResponses = {
    201: UserDetails;
};

export type CreateUserAccountResponse = CreateUserAccountResponses[keyof CreateUserAccountResponses];

export type DestroyUserAccountData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/user/account/{id}';
};

export type DestroyUserAccountErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type DestroyUserAccountError = DestroyUserAccountErrors[keyof DestroyUserAccountErrors];

export type DestroyUserAccountResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyUserAccountResponse = DestroyUserAccountResponses[keyof DestroyUserAccountResponses];

export type RetrieveUserAccountData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/user/account/{id}';
};

export type RetrieveUserAccountErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type RetrieveUserAccountError = RetrieveUserAccountErrors[keyof RetrieveUserAccountErrors];

export type RetrieveUserAccountResponses = {
    200: UserDetails;
};

export type RetrieveUserAccountResponse = RetrieveUserAccountResponses[keyof RetrieveUserAccountResponses];

export type PartialUpdateUserAccountData = {
    body?: PatchedUserWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/user/account/{id}';
};

export type PartialUpdateUserAccountErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type PartialUpdateUserAccountError = PartialUpdateUserAccountErrors[keyof PartialUpdateUserAccountErrors];

export type PartialUpdateUserAccountResponses = {
    200: UserDetails;
};

export type PartialUpdateUserAccountResponse = PartialUpdateUserAccountResponses[keyof PartialUpdateUserAccountResponses];

export type UpdateUserAccountData = {
    body: UserWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/user/account/{id}';
};

export type UpdateUserAccountErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type UpdateUserAccountError = UpdateUserAccountErrors[keyof UpdateUserAccountErrors];

export type UpdateUserAccountResponses = {
    200: UserDetails;
};

export type UpdateUserAccountResponse = UpdateUserAccountResponses[keyof UpdateUserAccountResponses];

export type GetUserAccountAddressesData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Which field to use when ordering the results. Available fields: id, -id, email, -email, username, -username, createdAt, -createdAt, updatedAt, -updatedAt
         */
        ordering?: 'id' | '-id' | 'email' | '-email' | 'username' | '-username' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page.
         */
        pageSize?: string | number;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/api/v1/user/account/{id}/addresses';
};

export type GetUserAccountAddressesErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type GetUserAccountAddressesError = GetUserAccountAddressesErrors[keyof GetUserAccountAddressesErrors];

export type GetUserAccountAddressesResponses = {
    200: PaginatedUserAddressList;
};

export type GetUserAccountAddressesResponse = GetUserAccountAddressesResponses[keyof GetUserAccountAddressesResponses];

export type GetUserAccountBlogPostCommentsData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Which field to use when ordering the results. Available fields: id, -id, email, -email, username, -username, createdAt, -createdAt, updatedAt, -updatedAt
         */
        ordering?: 'id' | '-id' | 'email' | '-email' | 'username' | '-username' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page.
         */
        pageSize?: string | number;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/api/v1/user/account/{id}/blog_post_comments';
};

export type GetUserAccountBlogPostCommentsErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type GetUserAccountBlogPostCommentsError = GetUserAccountBlogPostCommentsErrors[keyof GetUserAccountBlogPostCommentsErrors];

export type GetUserAccountBlogPostCommentsResponses = {
    200: PaginatedBlogCommentList;
};

export type GetUserAccountBlogPostCommentsResponse = GetUserAccountBlogPostCommentsResponses[keyof GetUserAccountBlogPostCommentsResponses];

export type ChangeUserAccountUsernameData = {
    body: UsernameUpdateRequest;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/user/account/{id}/change_username';
};

export type ChangeUserAccountUsernameErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type ChangeUserAccountUsernameError = ChangeUserAccountUsernameErrors[keyof ChangeUserAccountUsernameErrors];

export type ChangeUserAccountUsernameResponses = {
    200: UsernameUpdateResponse;
};

export type ChangeUserAccountUsernameResponse = ChangeUserAccountUsernameResponses[keyof ChangeUserAccountUsernameResponses];

export type GetUserAccountFavouriteProductsData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Which field to use when ordering the results. Available fields: id, -id, email, -email, username, -username, createdAt, -createdAt, updatedAt, -updatedAt
         */
        ordering?: 'id' | '-id' | 'email' | '-email' | 'username' | '-username' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page.
         */
        pageSize?: string | number;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/api/v1/user/account/{id}/favourite_products';
};

export type GetUserAccountFavouriteProductsErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type GetUserAccountFavouriteProductsError = GetUserAccountFavouriteProductsErrors[keyof GetUserAccountFavouriteProductsErrors];

export type GetUserAccountFavouriteProductsResponses = {
    200: PaginatedProductFavouriteList;
};

export type GetUserAccountFavouriteProductsResponse = GetUserAccountFavouriteProductsResponses[keyof GetUserAccountFavouriteProductsResponses];

export type GetUserAccountLikedBlogPostsData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Which field to use when ordering the results. Available fields: id, -id, email, -email, username, -username, createdAt, -createdAt, updatedAt, -updatedAt
         */
        ordering?: 'id' | '-id' | 'email' | '-email' | 'username' | '-username' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page.
         */
        pageSize?: string | number;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/api/v1/user/account/{id}/liked_blog_posts';
};

export type GetUserAccountLikedBlogPostsErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type GetUserAccountLikedBlogPostsError = GetUserAccountLikedBlogPostsErrors[keyof GetUserAccountLikedBlogPostsErrors];

export type GetUserAccountLikedBlogPostsResponses = {
    200: PaginatedBlogPostList;
};

export type GetUserAccountLikedBlogPostsResponse = GetUserAccountLikedBlogPostsResponses[keyof GetUserAccountLikedBlogPostsResponses];

export type GetUserAccountNotificationsData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Which field to use when ordering the results. Available fields: id, -id, email, -email, username, -username, createdAt, -createdAt, updatedAt, -updatedAt
         */
        ordering?: 'id' | '-id' | 'email' | '-email' | 'username' | '-username' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page.
         */
        pageSize?: string | number;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/api/v1/user/account/{id}/notifications';
};

export type GetUserAccountNotificationsErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type GetUserAccountNotificationsError = GetUserAccountNotificationsErrors[keyof GetUserAccountNotificationsErrors];

export type GetUserAccountNotificationsResponses = {
    200: PaginatedNotificationUserList;
};

export type GetUserAccountNotificationsResponse = GetUserAccountNotificationsResponses[keyof GetUserAccountNotificationsResponses];

export type GetUserAccountOrdersData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Which field to use when ordering the results. Available fields: id, -id, email, -email, username, -username, createdAt, -createdAt, updatedAt, -updatedAt
         */
        ordering?: 'id' | '-id' | 'email' | '-email' | 'username' | '-username' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page.
         */
        pageSize?: string | number;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/api/v1/user/account/{id}/orders';
};

export type GetUserAccountOrdersErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type GetUserAccountOrdersError = GetUserAccountOrdersErrors[keyof GetUserAccountOrdersErrors];

export type GetUserAccountOrdersResponses = {
    200: PaginatedOrderList;
};

export type GetUserAccountOrdersResponse = GetUserAccountOrdersResponses[keyof GetUserAccountOrdersResponses];

export type GetUserAccountProductReviewsData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Which field to use when ordering the results. Available fields: id, -id, email, -email, username, -username, createdAt, -createdAt, updatedAt, -updatedAt
         */
        ordering?: 'id' | '-id' | 'email' | '-email' | 'username' | '-username' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page.
         */
        pageSize?: string | number;
        /**
         * A search term.
         */
        search?: string;
    };
    url: '/api/v1/user/account/{id}/product_reviews';
};

export type GetUserAccountProductReviewsErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type GetUserAccountProductReviewsError = GetUserAccountProductReviewsErrors[keyof GetUserAccountProductReviewsErrors];

export type GetUserAccountProductReviewsResponses = {
    200: PaginatedProductReviewList;
};

export type GetUserAccountProductReviewsResponse = GetUserAccountProductReviewsResponses[keyof GetUserAccountProductReviewsResponses];

export type ListUserAddressData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by city name (partial match)
         */
        city?: string;
        city_Icontains?: string;
        /**
         * Filter by country alpha_2 code
         */
        country?: string;
        /**
         * Filter by country code (e.g., 'US', 'CA')
         */
        countryCode?: string;
        /**
         * Filter by country name (partial match)
         */
        countryName?: string;
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Cursor for pagination
         */
        cursor?: string;
        /**
         * Filter by first name (partial match)
         */
        firstName?: string;
        firstName_Icontains?: string;
        /**
         * Filter by floor
         */
        floor?: '' | 'BASEMENT' | 'FIFTH_FLOOR' | 'FIRST_FLOOR' | 'FOURTH_FLOOR' | 'GROUND_FLOOR' | 'SECOND_FLOOR' | 'SIXTH_FLOOR_PLUS' | 'THIRD_FLOOR';
        /**
         * Filter by full name (first + last name)
         */
        fullName?: string;
        /**
         * Filter addresses that have notes
         */
        hasNotes?: 'true' | 'false' | '1' | '0' | boolean;
        id?: string | number;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        id_In?: string | Array<number>;
        /**
         * Filter by main address status
         */
        isMain?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Filter by last name (partial match)
         */
        lastName?: string;
        lastName_Icontains?: string;
        /**
         * Filter by location type (exact match, case insensitive)
         */
        locationType?: string;
        locationType_Icontains?: string;
        /**
         * Filter by location type (partial match)
         */
        locationTypeContains?: string;
        /**
         * Filter by mobile phone number (partial match)
         */
        mobilePhone?: string;
        mobilePhone_Icontains?: string;
        /**
         * Which field to use when ordering the results. Available fields: id, -id, createdAt, -createdAt, updatedAt, -updatedAt, city, -city, zipcode, -zipcode, isMain, -isMain
         */
        ordering?: 'id' | '-id' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'city' | '-city' | 'zipcode' | '-zipcode' | 'isMain' | '-isMain';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        /**
         * Filter by phone number (partial match)
         */
        phone?: string;
        phone_Icontains?: string;
        /**
         * Filter by region alpha code
         */
        region?: string;
        /**
         * Filter by region code
         */
        regionCode?: string;
        /**
         * Filter by region name (partial match)
         */
        regionName?: string;
        /**
         * A search term.
         */
        search?: string;
        /**
         * Filter by street name (partial match)
         */
        street?: string;
        street_Icontains?: string;
        /**
         * Filter by street number
         */
        streetNumber?: string;
        streetNumber_Icontains?: string;
        title?: string;
        title_Icontains?: string;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        uuid?: string;
        /**
         * Filter by zipcode (partial match)
         */
        zipcode?: string;
        zipcode_Icontains?: string;
        /**
         * Filter by exact zipcode
         */
        zipcodeExact?: string;
    };
    url: '/api/v1/user/address';
};

export type ListUserAddressErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type ListUserAddressError = ListUserAddressErrors[keyof ListUserAddressErrors];

export type ListUserAddressResponses = {
    200: PaginatedUserAddressList;
};

export type ListUserAddressResponse = ListUserAddressResponses[keyof ListUserAddressResponses];

export type CreateUserAddressData = {
    body: UserAddressWriteRequest;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/user/address';
};

export type CreateUserAddressErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type CreateUserAddressError = CreateUserAddressErrors[keyof CreateUserAddressErrors];

export type CreateUserAddressResponses = {
    201: UserAddressDetail;
};

export type CreateUserAddressResponse = CreateUserAddressResponses[keyof CreateUserAddressResponses];

export type DestroyUserAddressData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/user/address/{id}';
};

export type DestroyUserAddressErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type DestroyUserAddressError = DestroyUserAddressErrors[keyof DestroyUserAddressErrors];

export type DestroyUserAddressResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyUserAddressResponse = DestroyUserAddressResponses[keyof DestroyUserAddressResponses];

export type RetrieveUserAddressData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/user/address/{id}';
};

export type RetrieveUserAddressErrors = {
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type RetrieveUserAddressError = RetrieveUserAddressErrors[keyof RetrieveUserAddressErrors];

export type RetrieveUserAddressResponses = {
    200: UserAddressDetail;
};

export type RetrieveUserAddressResponse = RetrieveUserAddressResponses[keyof RetrieveUserAddressResponses];

export type PartialUpdateUserAddressData = {
    body?: PatchedUserAddressWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/user/address/{id}';
};

export type PartialUpdateUserAddressErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type PartialUpdateUserAddressError = PartialUpdateUserAddressErrors[keyof PartialUpdateUserAddressErrors];

export type PartialUpdateUserAddressResponses = {
    200: UserAddressDetail;
};

export type PartialUpdateUserAddressResponse = PartialUpdateUserAddressResponses[keyof PartialUpdateUserAddressResponses];

export type UpdateUserAddressData = {
    body: UserAddressWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/user/address/{id}';
};

export type UpdateUserAddressErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
    500: ErrorResponse;
};

export type UpdateUserAddressError = UpdateUserAddressErrors[keyof UpdateUserAddressErrors];

export type UpdateUserAddressResponses = {
    200: UserAddressDetail;
};

export type UpdateUserAddressResponse = UpdateUserAddressResponses[keyof UpdateUserAddressResponses];

export type SetMainUserAddressData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/user/address/{id}/set_main';
};

export type SetMainUserAddressErrors = {
    401: ErrorResponse;
    404: ErrorResponse;
};

export type SetMainUserAddressError = SetMainUserAddressErrors[keyof SetMainUserAddressErrors];

export type SetMainUserAddressResponses = {
    200: UserAddressDetail;
};

export type SetMainUserAddressResponse = SetMainUserAddressResponses[keyof SetMainUserAddressResponses];

export type ListUserSubscriptionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Cursor for pagination
         */
        cursor?: string;
        /**
         * Filter subscriptions that have metadata
         */
        hasMetadata?: 'true' | 'false' | '1' | '0' | boolean;
        id?: string | number;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        id_In?: string | Array<number>;
        /**
         * Filter by confirmation status
         */
        isConfirmed?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Which field to use when ordering the results. Available fields: subscribedAt, -subscribedAt, unsubscribedAt, -unsubscribedAt, createdAt, -createdAt, updatedAt, -updatedAt, status, -status, topic_Category, -topic_Category
         */
        ordering?: 'subscribedAt' | '-subscribedAt' | 'unsubscribedAt' | '-unsubscribedAt' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'status' | '-status' | 'topic_Category' | '-topic_Category';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        /**
         * A search term.
         */
        search?: string;
        /**
         * Filter by subscription status
         *
         * * `ACTIVE` - Active
         * * `PENDING` - Pending Confirmation
         * * `UNSUBSCRIBED` - Unsubscribed
         * * `BOUNCED` - Bounced
         */
        status?: 'ACTIVE' | 'BOUNCED' | 'PENDING' | 'UNSUBSCRIBED';
        /**
         * Filter subscriptions created after this date
         */
        subscribedAfter?: string;
        subscribedAt_Date?: string;
        subscribedAt_Gte?: string;
        subscribedAt_Lte?: string;
        /**
         * Filter subscriptions created before this date
         */
        subscribedBefore?: string;
        /**
         * Filter by subscription topic
         */
        topic?: string | number;
        /**
         * Filter by topic category
         *
         * * `MARKETING` - Marketing Campaigns
         * * `PRODUCT` - Product Updates
         * * `ACCOUNT` - Account Updates
         * * `SYSTEM` - System Notifications
         * * `NEWSLETTER` - Newsletter
         * * `PROMOTIONAL` - Promotional
         * * `OTHER` - Other
         */
        topicCategory?: 'ACCOUNT' | 'MARKETING' | 'NEWSLETTER' | 'OTHER' | 'PRODUCT' | 'PROMOTIONAL' | 'SYSTEM';
        /**
         * Filter by topic description (partial match)
         */
        topicDescription?: string;
        /**
         * Filter by topic name (partial match)
         */
        topicName?: string;
        /**
         * Filter by topic slug (partial match)
         */
        topicSlug?: string;
        /**
         * Filter by exact topic slug
         */
        topicSlugExact?: string;
        /**
         * Filter subscriptions unsubscribed after this date
         */
        unsubscribedAfter?: string;
        unsubscribedAt_Date?: string;
        unsubscribedAt_Gte?: string;
        unsubscribedAt_Lte?: string;
        /**
         * Filter subscriptions unsubscribed before this date
         */
        unsubscribedBefore?: string;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        uuid?: string;
    };
    url: '/api/v1/user/subscription';
};

export type ListUserSubscriptionResponses = {
    200: PaginatedUserSubscriptionList;
};

export type ListUserSubscriptionResponse = ListUserSubscriptionResponses[keyof ListUserSubscriptionResponses];

export type CreateUserSubscriptionData = {
    body: UserSubscriptionWriteRequest;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/user/subscription';
};

export type CreateUserSubscriptionResponses = {
    201: UserSubscriptionDetail;
};

export type CreateUserSubscriptionResponse = CreateUserSubscriptionResponses[keyof CreateUserSubscriptionResponses];

export type DestroyUserSubscriptionData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/user/subscription/{id}';
};

export type DestroyUserSubscriptionResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroyUserSubscriptionResponse = DestroyUserSubscriptionResponses[keyof DestroyUserSubscriptionResponses];

export type RetrieveUserSubscriptionData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/user/subscription/{id}';
};

export type RetrieveUserSubscriptionResponses = {
    200: UserSubscriptionDetail;
};

export type RetrieveUserSubscriptionResponse = RetrieveUserSubscriptionResponses[keyof RetrieveUserSubscriptionResponses];

export type PartialUpdateUserSubscriptionData = {
    body?: PatchedUserSubscriptionWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/user/subscription/{id}';
};

export type PartialUpdateUserSubscriptionResponses = {
    200: UserSubscriptionDetail;
};

export type PartialUpdateUserSubscriptionResponse = PartialUpdateUserSubscriptionResponses[keyof PartialUpdateUserSubscriptionResponses];

export type UpdateUserSubscriptionData = {
    body: UserSubscriptionWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/user/subscription/{id}';
};

export type UpdateUserSubscriptionResponses = {
    200: UserSubscriptionDetail;
};

export type UpdateUserSubscriptionResponse = UpdateUserSubscriptionResponses[keyof UpdateUserSubscriptionResponses];

export type ConfirmUserSubscriptionData = {
    body: UserSubscriptionDetailRequest;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/user/subscription/{id}/confirm';
};

export type ConfirmUserSubscriptionErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    403: ErrorResponse;
    404: ErrorResponse;
};

export type ConfirmUserSubscriptionError = ConfirmUserSubscriptionErrors[keyof ConfirmUserSubscriptionErrors];

export type ConfirmUserSubscriptionResponses = {
    200: UserSubscriptionDetail;
};

export type ConfirmUserSubscriptionResponse = ConfirmUserSubscriptionResponses[keyof ConfirmUserSubscriptionResponses];

export type BulkUpdateUserSubscriptionsData = {
    body: BulkSubscriptionRequest;
    path?: never;
    query?: never;
    url: '/api/v1/user/subscription/bulk_update';
};

export type BulkUpdateUserSubscriptionsErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
};

export type BulkUpdateUserSubscriptionsError = BulkUpdateUserSubscriptionsErrors[keyof BulkUpdateUserSubscriptionsErrors];

export type BulkUpdateUserSubscriptionsResponses = {
    /**
     * No response body
     */
    200: unknown;
};

export type ListSubscriptionTopicData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by topic category
         *
         * * `MARKETING` - Marketing Campaigns
         * * `PRODUCT` - Product Updates
         * * `ACCOUNT` - Account Updates
         * * `SYSTEM` - System Notifications
         * * `NEWSLETTER` - Newsletter
         * * `PROMOTIONAL` - Promotional
         * * `OTHER` - Other
         */
        category?: 'ACCOUNT' | 'MARKETING' | 'NEWSLETTER' | 'OTHER' | 'PRODUCT' | 'PROMOTIONAL' | 'SYSTEM';
        /**
         * Filter items created after this date
         */
        createdAfter?: string;
        createdAt_Date?: string;
        createdAt_Gte?: string;
        createdAt_Lte?: string;
        /**
         * Filter items created before this date
         */
        createdBefore?: string;
        /**
         * Cursor for pagination
         */
        cursor?: string;
        /**
         * Filter by description (partial match)
         */
        description?: string;
        /**
         * Filter topics that have subscribers
         */
        hasSubscribers?: 'true' | 'false' | '1' | '0' | boolean;
        id?: string | number;
        /**
         * Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
         */
        id_In?: string | Array<number>;
        /**
         * Filter by active status
         */
        isActive?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Filter by default subscription status
         */
        isDefault?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
        /**
         * Filter by name (partial match)
         */
        name?: string;
        /**
         * Which field to use when ordering the results. Available fields: category, -category, createdAt, -createdAt, updatedAt, -updatedAt, slug, -slug
         */
        ordering?: 'category' | '-category' | 'createdAt' | '-createdAt' | 'updatedAt' | '-updatedAt' | 'slug' | '-slug';
        /**
         * A page number within the paginated result set.
         */
        page?: string | number;
        /**
         * Number of results to return per page
         */
        pageSize?: string | number;
        /**
         * Enable or disable pagination
         */
        pagination?: 'false' | 'true';
        /**
         * Pagination strategy type
         */
        paginationType?: 'cursor' | 'limitOffset' | 'pageNumber';
        /**
         * Filter by confirmation requirement
         */
        requiresConfirmation?: 'true' | 'false' | '1' | '0' | boolean;
        /**
         * A search term.
         */
        search?: string;
        /**
         * Filter by slug (partial match)
         */
        slug?: string;
        slug_Icontains?: string;
        /**
         * Filter by exact slug
         */
        slugExact?: string;
        /**
         * Filter items updated after this date
         */
        updatedAfter?: string;
        updatedAt_Date?: string;
        updatedAt_Gte?: string;
        updatedAt_Lte?: string;
        /**
         * Filter items updated before this date
         */
        updatedBefore?: string;
        uuid?: string;
    };
    url: '/api/v1/user/subscription/topic';
};

export type ListSubscriptionTopicResponses = {
    200: PaginatedSubscriptionTopicList;
};

export type ListSubscriptionTopicResponse = ListSubscriptionTopicResponses[keyof ListSubscriptionTopicResponses];

export type CreateSubscriptionTopicData = {
    body: SubscriptionTopicWriteRequest;
    path?: never;
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/user/subscription/topic';
};

export type CreateSubscriptionTopicResponses = {
    201: SubscriptionTopicDetail;
};

export type CreateSubscriptionTopicResponse = CreateSubscriptionTopicResponses[keyof CreateSubscriptionTopicResponses];

export type DestroySubscriptionTopicData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/user/subscription/topic/{id}';
};

export type DestroySubscriptionTopicResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DestroySubscriptionTopicResponse = DestroySubscriptionTopicResponses[keyof DestroySubscriptionTopicResponses];

export type RetrieveSubscriptionTopicData = {
    body?: never;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/user/subscription/topic/{id}';
};

export type RetrieveSubscriptionTopicResponses = {
    200: SubscriptionTopicDetail;
};

export type RetrieveSubscriptionTopicResponse = RetrieveSubscriptionTopicResponses[keyof RetrieveSubscriptionTopicResponses];

export type PartialUpdateSubscriptionTopicData = {
    body?: PatchedSubscriptionTopicWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/user/subscription/topic/{id}';
};

export type PartialUpdateSubscriptionTopicResponses = {
    200: SubscriptionTopicDetail;
};

export type PartialUpdateSubscriptionTopicResponse = PartialUpdateSubscriptionTopicResponses[keyof PartialUpdateSubscriptionTopicResponses];

export type UpdateSubscriptionTopicData = {
    body: SubscriptionTopicWriteRequest;
    path: {
        id: string | number;
    };
    query?: {
        /**
         * Language code for translations (el, en, de)
         */
        languageCode?: 'de' | 'el' | 'en';
    };
    url: '/api/v1/user/subscription/topic/{id}';
};

export type UpdateSubscriptionTopicResponses = {
    200: SubscriptionTopicDetail;
};

export type UpdateSubscriptionTopicResponse = UpdateSubscriptionTopicResponses[keyof UpdateSubscriptionTopicResponses];

export type SubscribeToTopicData = {
    body: UserSubscriptionRequest;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/user/subscription/topic/{id}/subscribe';
};

export type SubscribeToTopicErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    404: ErrorResponse;
};

export type SubscribeToTopicError = SubscribeToTopicErrors[keyof SubscribeToTopicErrors];

export type SubscribeToTopicResponses = {
    200: UserSubscription;
    201: UserSubscription;
};

export type SubscribeToTopicResponse = SubscribeToTopicResponses[keyof SubscribeToTopicResponses];

export type UnsubscribeFromTopicData = {
    body: DetailRequest;
    path: {
        id: string | number;
    };
    query?: never;
    url: '/api/v1/user/subscription/topic/{id}/unsubscribe';
};

export type UnsubscribeFromTopicErrors = {
    400: ErrorResponse;
    401: ErrorResponse;
    404: ErrorResponse;
};

export type UnsubscribeFromTopicError = UnsubscribeFromTopicErrors[keyof UnsubscribeFromTopicErrors];

export type UnsubscribeFromTopicResponses = {
    /**
     * No response body
     */
    200: unknown;
};

export type GetMySubscriptionTopicsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/user/subscription/topic/my_subscriptions';
};

export type GetMySubscriptionTopicsErrors = {
    401: ErrorResponse;
};

export type GetMySubscriptionTopicsError = GetMySubscriptionTopicsErrors[keyof GetMySubscriptionTopicsErrors];

export type GetMySubscriptionTopicsResponses = {
    200: {
        subscribed?: Array<SubscriptionTopic>;
        available?: Array<SubscriptionTopic>;
    };
};

export type GetMySubscriptionTopicsResponse = GetMySubscriptionTopicsResponses[keyof GetMySubscriptionTopicsResponses];

export type UnsubscribeViaLinkData = {
    body?: never;
    path: {
        token: string;
        topicSlug: string;
        uidb64: string;
    };
    query?: never;
    url: '/api/v1/user/unsubscribe/{uidb64}/{token}/{topic_slug}';
};

export type UnsubscribeViaLinkErrors = {
    400: ErrorResponse;
};

export type UnsubscribeViaLinkError = UnsubscribeViaLinkErrors[keyof UnsubscribeViaLinkErrors];

export type UnsubscribeViaLinkResponses = {
    200: Unsubscribe;
};

export type UnsubscribeViaLinkResponse = UnsubscribeViaLinkResponses[keyof UnsubscribeViaLinkResponses];
